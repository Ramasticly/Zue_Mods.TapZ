package com.namcobandaigames.dragonballtap.apk;

import android.app.AlertDialog;
import android.content.Context;
import android.graphics.RectF;
import android.media.MediaPlayer;
import android.media.SoundPool;
import android.util.Log;
import com.namcobandaigames.dragonballtap.apk.GameData.SpriteData;
//import com.gdgohan.touhouflowerstap.apk.TCBManajer.AutoCardTask;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
import java.nio.ShortBuffer;
import java.util.HashMap;
import javax.microedition.khronos.opengles.GL10;

public final class TCBManajer {
   static boolean[] AICtrl = new boolean[2];
   static int[] ActionPalette = new int[31];
   static int[] AddAttack = new int[2];
   static int[] AddDeffencePer = new int[2];
   static int[] AddLevel = new int[2];
   static int[] AddRushAttack = new int[2];
   static int[] AddSPAttack = new int[2];
   static boolean[] AirType = new boolean[2];
   static int[] Angry = new int[2];
   static boolean[] AngryLoop = new boolean[2];
   static boolean[] AngryOn = new boolean[2];
   static int[] AngrySubTime = new int[2];
   static int[] AttackMul = new int[2];
   static int[] AttackPoint = new int[2];
   static int[][] AuraAction = new int[2][63];
   static int[][] AuraPosition = new int[2][126];
   static int[] BTRevStatus = new int[3];
   static int[] BTSendStatus = new int[3];
   static int[] BallGetCount = new int[7];
   static int[] BeatNum = new int[2];
   static int[][] BubbleAction = new int[2][30];
   static int[][] BubblePosition = new int[2][60];
   static int[][] BulletAction = new int[2][2];
   static int[] BulletNum = new int[2];
   static int[] CPUCommand = new int[2];
   static int[] CPUCount = new int[2];
   static int[] CPUGuard = new int[2];
   static int[] CPUGuardTime = new int[2];
   static int[] CPUIndex = new int[2];
   static int[] CPULevel = new int[2];
   static int[] CPURand = new int[2];
   static int[][] CPURandBuf = new int[2][3];
   static int[][] CPURandWork = new int[2][3];
   static int[] CPUSeqNo = new int[2];
   static int[] CancelTime = new int[2];
   static int ClearTime;
   static int[] ComboCount = new int[2];
   static byte[] ConfigData = new byte[12906];
   static boolean ConfigDataInit;
   static int[] Create = new int[31];
   static int[] CreatedAct = new int[31];
   static int[] DamageHitActNo = new int[2];
   static int[] DamageHitBack = new int[2];
   static int[] DamageHitSpecialType = new int[2];
   static int[] DamageIndex = new int[2];
   static int[] DamageMove = new int[2];
   static int[] DamageOldIndex = new int[2];
   static int[] DamageOldType = new int[2];
   static int[] DamageTime = new int[2];
   static int[] DamageType = new int[2];
   static boolean[] DamageWall = new boolean[2];
   static int[] DamageXAccel = new int[2];
   static int[] DamageXSpeed = new int[2];
   static int[] DamageYAccel = new int[2];
   static int[] DamageYSpeed = new int[2];
   static int[] Dash = new int[2];
   static int[] DataVersion = new int[2];
   static int[] DefensiveFlag = new int[2];
   static int[] DeffenceMul = new int[2];
   static int EventHitStop;
   static int[] Exp = new int[2];
   static int[] ExtremeObject = new int[2];
   static int[] FocusXPos = new int[2];
   static int[] FocusYPos = new int[2];
   static int[] FocusZoom = new int[2];
   static int[] Footwork = new int[2];
   static int[][] GaugeLen = new int[2][3];
   static int[] GuardCancelTime = new int[2];
   static int[] GuardHardness = new int[2];
   static int[] GuardHitBack = new int[2];
   static int[] HitActNo = new int[2];
   static int[] HitFocusTarget = new int[2];
   static int[] HitFocusTime = new int[2];
   static int[] HitFocusXPos = new int[2];
   static int[] HitFocusYPos = new int[2];
   static int[] HitFocusZoom = new int[2];
   static int[] HitTarget = new int[2];
   static int[] ImageIndex = new int[31];
   static int[] ImageNumber = new int[31];
   static long[] InitMtiKey = new long[4];
   static int[] Joy = new int[2];
   static int[][] JoyBuf = new int[2][3];
   static int[] JoyTrig = new int[2];
   static int[][] JoyTrigBuf = new int[2][3];
   static int[][] JoyTrigWork = new int[2][3];
   static int[][] JoyWork = new int[2][3];
   static int[][] KeyBuf = new int[2][4];
   static int[][] KeyBufTime = new int[2][4];
   static int[] Level = new int[2];
   static int[] Life = new int[2];
   static int[] LoadData = new int[31];
   static int[] LoadFilter = new int[31];
   static int[] LoadedImage = new int[31];
   static int LoadingDataMax;
   static int LoadingDataPos;
   static int[] MaxComboCount = new int[2];
   static int[] MaxComboCountSave = new int[2];
   static int[] OldLife = new int[2];
   static boolean[] OldLifeSet = new boolean[2];
   static int[] OldLifeWait = new int[2];
   static int[] PerfectNum = new int[2];
   static boolean[] PlayerAir = new boolean[2];
   static int[] PlayerArtsSeal = new int[2];
   static int[] PlayerAttack = new int[2];
   static int[] PlayerAttackFlag = new int[2];
   static int[][] PlayerCard = new int[2][8];
   static int[] PlayerCardCount = new int[2];
   static int[][] PlayerCardFormation = new int[2][85];
   static int[] PlayerCardFormationCount = new int[2];
   static int[][] PlayerCardFormationOK = new int[2][5];
   static int[][] PlayerCardLevel = new int[2][8];
   static int[][] PlayerCardVersion = new int[2][8];
   static int[] PlayerEventFlag = new int[2];
   static int[] PlayerHitStop = new int[2];
   static int[] PlayerKey = new int[2];
   static int[] PlayerLife = new int[2];
   static int[] PlayerNameType = new int[2];
   static int[] PlayerOldXPos = new int[2];
   static int[] PlayerOrder = new int[2];
   static boolean[] PlayerSearch = new boolean[2];
   static int[] PlayerState = new int[2];
   static int[] PlayerType = new int[2];
   static int[] PlayerWarpXPos = new int[2];
   static int[] PlayerWarpYPos = new int[2];
   static int[] PlayerXPos = new int[2];
   static int[] PlayerYLimit = new int[2];
   static int[] PlayerYPos = new int[2];
   static int[] PracticeSetting = new int[6];
   static int RoundLose;
   static int[] RushCount = new int[2];
   static boolean[] RushFightWin = new boolean[2];
   static int[] RushFightWinLevel = new int[2];
   static int[] SavePlayerPalette = new int[2];
   static int[] SavePlayerType = new int[2];
   static int[] Score = new int[2];
   static boolean[] ScreenEdgeOff = new boolean[2];
   static boolean[] ScrollCheckOff = new boolean[2];
   static int[] SetSoftKey = new int[2];
   static int[] SoftKey = new int[2];
   static int[] SpecialBulletNumber = new int[2];
   static int[] SpecialKind = new int[2];
   static int[] SpecialPushAno = new int[2];
   static int[] SpecialType = new int[2];
   static int[] StageBonus = new int[19];
   static int StageLose;
   static int[] StageTime = new int[2];
   static int StageWin;
   static int[] Synchro = new int[2];
   static int[] SynchroAttackPer = new int[2];
   static int[] SynchroMax = new int[2];
   static int[] SynchroPowerUp = new int[2];
   static int[] SynchroRecover = new int[2];
   static int[] SynchroTamePer = new int[2];
   static int[] TameCnt = new int[2];
   static int[] TapPullXPos = new int[5];
   static int[] TapPullYPos = new int[5];
   static int[] TapType = new int[5];
   static int[] TapXBT = new int[2];
   static int[][] TapXBTBuf = new int[2][3];
   static int[][] TapXBTWork = new int[2][3];
   static int[] TapXPos = new int[5];
   static int[] TapYBT = new int[2];
   static int[][] TapYBTBuf = new int[2][3];
   static int[][] TapYBTWork = new int[2][3];
   static int[] TapYPos = new int[5];
   static int[] TargetXPos = new int[2];
   static int[] TargetYPos = new int[2];
   static boolean[] ThrowDamage = new boolean[2];
   static int[] TotalDamage = new int[2];
   static int TotalTime;
   static int[] TouchCheckOff = new int[2];
   static int[] TouchPlayerTime = new int[2];
   static int[] TouchPlayerTimeStart = new int[2];
   static int[] TouchPlayerXPosOld = new int[2];
   static int[] TouchPlayerXPosStart = new int[2];
   static int[] TouchPlayerYPosOld = new int[2];
   static int[] TouchPlayerYPosStart = new int[2];
   static int[] TouchStart = new int[2];
   static int[] TouchTimeStart = new int[2];
   static int[] TouchesCommand = new int[2];
   static int[][] TouchesCommandBuf = new int[2][3];
   static int[][] TouchesCommandWork = new int[2][3];
   static int[] TouchesStatus = new int[5];
   static int[] TouchesVal1 = new int[2];
   static int[][] TouchesVal1Buf = new int[2][3];
   static int[][] TouchesVal1Work = new int[2][3];
   static int[] TouchesVal2 = new int[2];
   static int[][] TouchesVal2Buf = new int[2][3];
   static int[][] TouchesVal2Work = new int[2][3];
   static int[] TouchesXPos = new int[5];
   static int[] TouchesXPosGame = new int[5];
   static int[] TouchesYPos = new int[5];
   static int[] TouchesYPosGame = new int[5];
   static int[] WalkCnt = new int[2];
   static int[] WinPoint = new int[2];
   static float[] __coord = new float[12];
   static int[] __vertex = new int[12];
   static int _cameraPrio;
   static int[] _commandButton = new int[2];
   static int[][] _commandButtonBuf = new int[2][3];
   static int _commandButtonTmp;
   static int[] _commandButtonTmp2 = new int[3];
   static int[][] _commandButtonWork = new int[2][3];
   static int[] _screeneffect = new int[12];
   static int[] _screenoffect_frame = new int[12];
   static boolean[] bAIStart = new boolean[2];
   static boolean bActionStop;
   static boolean bBGMPlayLoop;
   static boolean bBTBusyWait;
   static byte[] bBTData = new byte[90];
   static boolean bBTDataSetOK;
   static byte[][] bBTReadDataBuf = new byte[3][90];
   static boolean bBTRevOK;
   static boolean bBTSend;
   static boolean bBTSendGo;
   static boolean bBackKeyPush;
   static boolean bBackVisible;
   static boolean bBlackOut;
   static byte[] bCardLevelBuf = new byte[90];
   static byte[] bCardNoSv = new byte[90];
   static byte[] bCardVersionSv = new byte[90];
   static byte[] bCharIndex = new byte[90];
   static byte[] bCharNoSv = new byte[90];
   static byte[] bCharVersionSv = new byte[90];
   static boolean bChrChange;
   static boolean bClrBack;
   static boolean bDLError;
   static boolean bDebug;
   static boolean bDebugMode;
   static boolean bDrawLoading;
   static boolean bDrawPiece;
   static boolean bDrawSkip;
   static boolean bEffectFullScreen;
   static boolean bEnableAlpha;
   static byte[] bEventFlag = new byte[2];
   static byte bEventFlagBuf;
   static boolean bEventFlagSend;
   static byte[][] bEventValue = new byte[2][3];
   static byte[] bEventValueBuf = new byte[3];
   static boolean bExitAsk;
   static boolean bFinishMovie;
   static boolean bFlipWait;
   static boolean bForceWall;
   static boolean bGameStart;
   static boolean bGetBall;
   static boolean bPause;
   static boolean bResume;
   static boolean bReturn;
   static boolean bSaveSD;
   static boolean bSceneSkip;
   static boolean bScrollLock;
   static boolean bSetChrStatus;
   static boolean bSoundResume;
   static boolean[] bStartAction = new boolean[2];
   static boolean bTaskNext;
   static boolean bTaskRepeat;
   static boolean bTaskSkip;
   static boolean bTicketChange;
   static boolean bWin;
   static int cstatusCount;
   static int[] iAC_Cost = new int[8];
   static int[] iAC_Index = new int[8];
   static int iAC_Pos;
   static int[] iAC_Val = new int[8];
   static int[] iAC_sindex = new int[8];
   static int iActionZoomFrame;
   static int iActionZoomH;
   static int iActionZoomW;
   static int iActionZoomX;
   static int iActionZoomY;
   static int iAppVersion;
   static int iBTDataSet;
   static int iBTDataSetType;
   static int iBTErrMess;
   static int iBTJoyCount;
   static int iBTReadDataBufIndex;
   static int iBTReadDataIndex;
   static int iBTReadDataNowIndex;
   static int iBTSkipCount;
   static int iBTSkipType;
   static int iBackKeyType;
   static int iBackMode;
   static volatile int iBackNo;
   static volatile int iBackNo2;
   static int iBackShake;
   static int iBackShakeType;
   static int iBackXAdd;
   static int iBackXOffset;
   static int iBackXPos;
   static int[] iBackXPosSprite = new int[3];
   static int iBackXScroll;
   static int iBackXSize;
   static int iBackYOffset;
   static int iBackYPos;
   static int iBackYScroll;
   static int iBallPreviewPage;
   static int iBaseXPos;
   static int iBinarySize;
   static int iBinaryType;
   static int iBluetoothMode;
   static int iBossNo;
   static int iBossTextType;
   static int iCPUDist;
   static int[] iCPUNo = new int[10];
   static int iCPURandCnt;
   static int iCameraLock;
   static int[] iCardAttr = new int[4];
   static int iCardAutoBaseIndex;
   static int[] iCardAutoCost = new int[8];
   static int iCardAutoCostMax;
   static int[] iCardAutoIndex = new int[8];
   static int iCardAutoSrcIndex;
   static int iCardAutoType;
   static int[] iCardAutoVal = new int[8];
   static int[] iCardBuf = new int[90];
   static int iCardBufCount;
   static int iCardBufVal;
   static int[][] iCardCheck = new int[2][8];
   static int iCardCountSv;
   static int iCardPreviewMode;
   static int[][] iCardWork = new int[2][8];
   static int iCharCountSv;
   static int iChrSelectMode;
   static int iChrSelectPlayer;
   static int iClipYPos;
   static int iClipYSize;
   static int iClrB;
   static int iClrG;
   static int iClrR;
   static int[] iControlType = new int[3];
   static int[] iDebugVal = new int[2];
   static int iDemoPushXPos;
   static int iDemoPushYPos;
   static int iDifficulty;
   static int iDistMiddle;
   static int iDistMiddleAir;
   static int iDistNear;
   static int iDistNearAir;
   static int iDrawAlpha;
   static int iDrawLoadingOffset;
   static int iDrawLoadingOffsetCount;
   static int iDrawObjFlag;
   static int iDrawObjNum;
   static int iDrawSkip;
   static int iDrawXZoom;
   static int iDrawYZoom;
   static int iEncountType;
   static boolean iEventBackScroll;
   static int iEventStatus;
   static int[] iEventVal = new int[2];
   static int iExchangeMode;
   static int iExtCount;
   static int iExtOn;
   static int iFade;
   static int iFadeB;
   static int iFadeBack;
   static int iFadeG;
   static int iFadeR;
   static int iFileSize;
   static int iFocusTarget;
   static int[] iGamePadWork = new int[10];
   static int iGetCardNo;
   static int iHitXPos;
   static int iHitYPos;
   static int iJoyBufCount;
   static int iJoyWorkCount;
   static int iKeylockStatus;
   static int iLanguage;
   static int[] iLifeDamage = new int[2];
   static int iLoadingType;
   static int iLoopCounter;
   static int iMapWidthMax;
   static int iMarkVisible;
   static int iMissionClear;
   static int iMissionJoyFillter;
   static int iMissionPross;
   static int iMissionSubPross;
   static int[] iMissionVal = new int[2];
   static int iNetModeNo;
   static int iNetTargetRetryTime;
   static int iNetworkResult;
   static int iNewsEnd;
   static int iNumDifficulty;
   static int iPlatform;
   static int iPlayBGMNo;
   static int iPlayMode;
   static int iPlayMovieReq;
   static int[] iPlayerIndex = new int[2];
   static int iPlayerNo;
   static int[] iPushCounter = new int[2];
   static int iPushTarget;
   static int iPushTimer;
   static int iRangeBulletGuard;
   static int[] iReqSEBuf = new int[5];
   static int iReqSECount;
   static int iReqSENo;
   static int iReturnTask;
   static int iRound;
   static int iRushType;
   static int iScoreClearCounter;
   static int iScreenX;
   static int iScreenY;
   static int iScrollTarget;
   static int iSelectCard;
   static int iSelectCardResult;
   static int iSelectMenu;
   static int iSentenceNum;
   static int iSkipCounter;
   static int iSkipFrame;
   static int iSkipSpeed;
   static int iSleepMin;
   static int iSmapReturnCur;
   static int iSmapReturnMD;
   static int iSmokeEffectNumber;
   static int[] iSoundVolume = new int[2];
   static int iStage;
   static int iStageBGM;
   static int iStageCPU;
   static int iStageMax;
   static int iStagePoint;
   static int iStringXpos;
   static int iSystemFix;
   static int[] iTCBReqNum = new int[2];
   static int iTaskLoop;
   static int iTaskSleep;
   static int iTextEnd;
   static int iTimer;
   static int iTimingStatus;
   static int iTouchStatus;
   static int iTouchesCommandCount;
   static int iVibration;
   static int iZoomBase;
   static int iZoomXCenter;
   static int iZoomYCenter;
   static long lNowTime;
   static long lOldTime;
   public static volatile boolean mshow2;
   static long[] mt = new long[624];
   static int mti;
   static ObjReq objExec;
   static byte[] pBinaryData;
   static byte[] pBinaryGetData;
   static int pushButtonCounter;
   static int[] pushCounter = new int[2];
   static String resk;
   static TCB[][] tcbAura = new TCB[2][63];
   static TCB[] tcbBack = new TCB[3];
   static TCB[] tcbEffect = new TCB[24];
   static TCB tcbHead;
   static TCB[] tcbMission = new TCB[3];
   static TCB tcbNow;
   static TCB[] tcbPlayer = new TCB[2];
   static TCB tcbPrev;
   static TCB[] tcbReqHit = new TCB[32];
   static TCB tcbStock;
   static int wSystemFlag;
   final short[] AtanTable;
   final int[] AutoCardAno;
   final int[] BackShakePos;
   final int[] BallPos;
   final short[] BonusObjectData;
   final int[] CardBattleCardPos;
   final int[] CardData_TextPage;
   final int[] CardSelectAno;
   final int[] CardSelectPos;
   final int[] CharAct_Name;
   final int[] CharData_TextPage;
   GameData[] ChrGameData;
   int[] ChrSoundCount;
   final int[] DefaultKeyConfig;
   final short[] DefaultRankingName;
   final int[] DefaultScore;
   final int[] FillRectColor;
   final int[] GameData_TextPage;
   final int[] GuardEffectActNo;
   final int[] HitEffectActNo;
   final int[] HitSound;
   final int[] IDList;
   final int[] KeyChangeData;
   final int[] KeyConfigText;
   final int[] KeyExList;
   final short[] MaxPractice;
   ObjReq[] ObjStock;
   ObjReq ObjStockNext;
   final short[] PositionData;
   final int[][] SeqKey;
   final short[] SinTable;
   ObjReq[] SortTable;
   final int[] SoundVolumeActNo;
   TCB[] TCBList;
   final int[] TapSeqNo;
   final int[] TextColor;
   final int[] TextPractice;
   final AlertDialog[] alertDialog;
   private AutoCardTask autoCardTask;
   byte[] bBTBinData;
   byte[][] bBTReadData;
   public Context context;
   public Controller controller;
   private GL10 gl;
   GlobalWork globalWork;
   private GlobalWork gw;
   int iObjNum;
   AndroidGLTexture imageTexture;
   private AndroidGLTexture loadingImage;
   public MediaPlayer mp;
   int newsDataCount;
   String newsURL;
   NewsData[] newsdata;
   public offscreen osb;
   private boolean osbOK;
   public int osbSkip;
   GameData pGameData;
   ObjReq pObjReqBuffer;
   GameData pTextData;
   int[] padID;
   private SoundPool soundPool;
   private HashMap soundPoolMap;
   final String[] strDataFolder2;
   StringTexture[] stringTexture;

   public TCBManajer() {
      this.mp = new MediaPlayer();
      this.soundPool = null;
      this.soundPoolMap = null;
      this.alertDialog = new AlertDialog[1];
      //super();
      this.gl = null;
      this.gw = null;
      this.loadingImage = null;
      this.bBTReadData = new byte[3][];
      this.ChrGameData = new GameData[31];
      this.ChrSoundCount = new int[31];
      this.SortTable = new ObjReq[1200];
      this.ObjStock = new ObjReq[1200];
      this.TCBList = new TCB[1170];
      this.controller = new Controller();
      this.padID = new int[10];
      this.MaxPractice = new short[]{1, 1, 3, 7, 1};
      this.TextPractice = new int[]{84, 84, 86, 14, 84};
      int[] var17 = new int[]{0, 0};
      int[] var19 = new int[]{0, 0};
      int[] var11 = new int[]{32768, 32768};
      int[] var6 = new int[]{512, 128};
      int[] var9 = new int[]{128, 512};
      int[] var23 = new int[]{256, 256};
      int[] var21 = new int[]{65536, 65536};
      int[] var22 = new int[]{64, 16};
      int[] var16 = new int[]{16, 64};
      int[] var24 = new int[]{131072, 131072};
      int[] var20 = new int[]{262144, 262144};
      int[] var13 = new int[]{16386, 16386};
      int[] var12 = new int[]{524288, 524288};
      int[] var3 = new int[]{16388, 16392};
      int[] var5 = new int[]{1073741824, 1073741824};
      int[] var4 = new int[]{24576, 24576};
      int[] var18 = new int[]{8196, 8200};
      int[] var15 = new int[]{32776, 32772};
      int[] var7 = new int[]{32772, 32776};
      int[] var10 = new int[]{0, 0};
      int[] var2 = new int[]{32769, 32769};
      int[] var1 = new int[]{32770, 32770};
      int[] var8 = new int[]{65544, 65544};
      int[] var14 = new int[]{65537, 65537};
      this.SeqKey = new int[][]{var17, var19, {16384, 16384}, var11, var6, var9, var23, var21, var22, {32, 32}, var16, var24, var20, {16392, 16388}, var13, var12, {2048, 2048}, var3, var5, var4, var18, {8200, 8196}, var15, var7, var10, var2, var1, var8, var14, {65538, 65538}};
      this.CardBattleCardPos = new int[]{152, 96, 40, 208, 328, 384, 440, 272};
      this.DefaultScore = new int[]{0, 150000, 0, 140000, 0, 130000, 3, 120000, 3, 100000, 1, 80000, 1, 50000};
      this.BackShakePos = new int[]{-1, -1, 0, 0, -3, -3, 0, -2, -2, 0, 0, -6, -6, 0, -3, -3, 0, 0, -9, -9, 0};
      this.TextColor = new int[]{255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 0, 0, 255, 255, 255, 0, 255, 0, 0, 0, 128, 128, 128};
      this.AutoCardAno = new int[]{250, 251, 252};
      this.CardSelectAno = new int[]{33, 33, 33, 33, 44, 33, 33, 33, 33, 33, 33, 33, 33, 151, 140, 33, 33, 33, 33, 33, 33, 140, 151, 33, 33, 33, 33, 292, 292, 292, 292, 281, 292, 292, 292, 292, 292, 292, 292, 292, 314, 303, 292, 292, 292, 292, 292, 292, 303, 314, 292, 292, 292, 292};
      this.CardSelectPos = new int[]{-240, 120, -30, 120, 30, 120, 90, 120, 150, 120, 239, 120, 328, 120, 388, 120, 448, 120, 508, 120, 720, 120};
      this.BallPos = new int[]{126, 120, 190, 160, 198, 80, 250, 120, 318, 160, 310, 80, 382, 120};
      this.TapSeqNo = new int[]{60, 64, 68, 72, 61, 65, 69, 73, 62, 66, 70, 74, 63, 67, 71, 75, 76, 76, 76, 76};
      this.BonusObjectData = new short[]{0, 120, 40, 0, 0, 0, 0, 2, 22, 63, 0, 0, 0, 0, 3, 22, 82, 0, 0, 0, 0, 97, 22, 110, 86, 163, 110, 6, 96, 22, 126, 102, 163, 126, 6, 95, 22, 142, 118, 163, 142, 6, 163, 147, 142, 133, 131, 142, 2, 98, 22, 187, 138, 163, 187, 6, 16, 128, 118, 0, 0, 0, 0, 143, 22, 110, 0, 163, 110, 6, 142, 22, 126, 0, 163, 126, 6, 145, 22, 142, 0, 163, 142, 6, 142, 22, 176, 0, 163, 176, 6, 143, 22, 110, 0, 163, 110, 6, 146, 22, 126, 0, 163, 126, 6};
      this.PositionData = $d2j$hex$83b9c161$decode_S("07007800480006000000010023007800480000000100270078006000000001003f0078007800000001002900780090000000010041007800a800000001002b007800c0000000010064007800100000000600780048000500000001002d0078004800000001002f00780060000000010037007800780000000100310078009000000001003d007800a8000000010065007800100000000500780048000400000001003b00780048000000010039007800600000000100430078007800000001006000780090000000010066007800100000000400780048000300000001005e00780048000000010025007800600000000100450078007800000001004b00780010000000060037004800050000000000c2006400080000000000be004800480000000000b6004b00600001000000b7004b00780002000000b9004b00900000000000b4004b00a80000000200000000000200010001001f004600b000000001002100aa00b0000000030039004800030000000000b5004800480000000000c2004800600000000000ba00480078000000030000000000000000000100080078000500000001000a00040002000000010000000000970000000e0000000000000000000000940006000600000000009600d900060000000100620078000f00000001004900000000000000000003002000390000000000030020006100000000000300200089000000000003002000b1000000000003002000d900000001004a0006003000000001004a0006005800000001004a0006008000000001004a000600a800000001004a000600d0000000130000000000000000000000940006000600000000009600d9000600000000001000cd003a00000000001000cd006200000000001000cd008a00000000001000cd00b200000000001000cd00da0000000100470078000f00000001004900000000000000000003002000390000000000030020006100000000000300200089000000000003002000b1000000000003002000d900000001004a0006003000000001004a0006005800000001004a0006008000000001004a000600a800000001004a000600d0000000040000000000000000000100540078001000000001000a000400020000000000940006000500000000009600d90005000000030000000000000000000000c0007800000000000000940006000500000000009600d9000500000004004b00730002000000002034003c0028000000002035003c004600000066002e005f007300000066002f005f008b00000005004b00730003000000002032003c0028000000002033003c004600000066002e005f007300000066002f005f008b00000000007e005f00a3000000050039004800050000000000b5004800480000000000b8004800600000000000bd004800780000000000c2004800900000000000ba004800a80000000400000000000300010001003f0046003200000001004100aa00320000000100350046005f0000000100670078001400000003004b00c8000200000000007c005f00c800000000007d005f00d800000000205f000a00b4000000040000000000000000000100620078000f000000010049000000000000000000030020006100000001004a000600580000000500000000000000000000001000cd00620000000100470078000f000000010049000000000000000000030020006100000001004a00060058000000020039004900020000000000b5004800480000000000c20048006000000006004b00730002000000002020000a0028000000002021000a004600000066002e005f007300000066002f005f008b0000000100570078001000000001000a00040002000000050000000000000000000100570078001000000001000a000400020000000000ce0004009f0000000000940006000600000000009600d9000600000007004b00730002000000002026000a0028000000002027000a0041000000002028000a005a00000066002e005f007300000066002f005f008b0000000100570078001000000001000a00040002000000040000000000000000000020290014002800000000202a001400410000000100570078001000000001000a000400020000000b004b00730002000000002072000a0028000000002073000a0037000000002074000a0046000000002075000a00a8000000002076000a00b7000000002077000a00c6000000002078000a00d500000066002e005f007300000066002f005f008b0000000100560078000500000001000a00040002000000040000000000000000000020790014002800000000207a002e00370000000100560078000500000001000a00040002000000020000000000000000000100560078000500000001000a000400020000000400000000000000000000207c0014002800000000207a002e00370000000100560078000500000001000a000400020000000400000000000000000000207d0014002800000000207a002e00370000000100560078000500000001000a0004000200000007002c00680003000000002017004000680000000020180040008000000000206a0040009800000000005300000000000000000054000000000000000100560078000500000001000a000400020000000300000000000000000000207a002e00370000000100560078000500000001000a000400020000000200000000000000000000207f000a0037000000002080000a00460000000300000000000000000001001b0078000500000001000a000400020000000000c9000400af0000000b0000000000000000000000cf000f001700000000202b000c003e00000000202c000c004d00000000202d000c005c000000002030002a006b0000000000cf0088001700000000202b0085003e00000000202c0085004d00000000202d0085005c00000000203000a3006b000000050075000000000000000300000000000000000000207a002e00370000000100570078001000000001000a000400020000000400000000000000000000205e0014002800000000202a001400410000000100570078001000000001000a0004000200000004000000000000000000002000000600330000000020300032003300000000203600a2003200000000203700e00032000000040000000000000000000020000006004f0000000020300032004f00000000203600a2004e00000000203700e0004e000000040000000000000000000020000006006b0000000020300032006b00000000203600a2006a00000000203700e0006a00000004000000000000000000002000000600870000000020300032008700000000203600a2008600000000203700e0008600000004000000000000000000002000000600a3000000002030003200a300000000203600a200a200000000203700e000a200000004000000000000000000002000000600bf000000002030003200bf00000000203600a200be00000000203700e000be00000001000000000000000000002022001600ce00000001000000000000000000002023001600dd0000000300000000000000000000207f000a0037000000002080000a004600000001000a000400020000000500000000000000000001000a00040002000000010051007800100000000000c80004009f0000000000940006000600000000009600d90006000000030000000000000000000100690078000500000001000a000400020000000000c9000400af000000020000000000000000000020390000006e00000000203a0000007d0000000100000000000000000000000000000000000000020000000000000000000000c80004009d0000000000c30000000000000002000b00bd0002000000002022001e00bd000000002023001e00d500000003004b00c3000200000000007c005f00c300000000007d005f00d3000000002061010a00b400000004004b0087000200000000007c005f008700000000007d005f0097000000002072010a0037000000002073010a004600000009004b0077000200000000007c005f007700000000007d005f0087000000002078010a0046000000002079010a005500000000207a010a006400000000207b010a00a100000000207c010a00b000000000207d010a00bf00000000207e010a00ce000000030000000000000000000000b900460004000000002065010e00c4000000002066010e00d60000000300000000000000000005000b0060006f0000000500030048006300000005000400b00097000000020000000000000000000100560078000500000001000a00040002000000010000000000000000000000c80004009d0000000000000000000000");
      this.SoundVolumeActNo = new int[]{188, 217, 218, 219, 220, 221};
      this.DefaultRankingName = new short[]{145, 183, 140, 229, 139, 243, 0, 184, 216, 216, 221, 0, 0, 0, 147, 86, 146, 195, 148, 209, 0, 233, 76, 142, 113, 0, 0, 0, 203, 223, 175, 186, 219, 0, 0};
      this.SinTable = $d2j$hex$83b9c161$decode_S("000002000400070009000b000d00100012001400160018001b001d001f0021002300250028002a002c002e00300032003400360038003a003c003e004000420044004600480049004b004d004f005100520054005600570059005b005c005e005f0061006200630065006600680069006a006b006d006e006f00700071007200730074007500760077007700780079007a007a007b007c007c007d007d007e007e007e007f007f007f00800080008000800080008000800080008000800080007f007f007f007e007e007e007d007d007c007c007b007a007a00790078007800770076007500740073007200710070006f006e006d006b006a0069006800660065006300620061005f005e005c005b005900570056005400520051004f004d004b004900480046004400420040003e003c003a00380036003400320030002e002c002a0028002500230021001f001d001b00180016001400120010000d000b0009000700040002000000fffffdfffafff8fff6fff4fff1ffefffedffebffe9ffe6ffe4ffe2ffe0ffdeffdcffd9ffd7ffd5ffd3ffd1ffcfffcdffcbffc9ffc7ffc5ffc3ffc1ffbfffbdffbbffb9ffb8ffb6ffb4ffb2ffb0ffafffadffabffaaffa8ffa7ffa5ffa3ffa2ffa0ff9fff9eff9cff9bff99ff98ff97ff96ff94ff93ff92ff91ff90ff8fff8eff8dff8cff8bff8aff8aff89ff88ff87ff87ff86ff85ff85ff84ff84ff83ff83ff83ff82ff82ff82ff81ff81ff81ff81ff81ff81ff81ff81ff81ff81ff81ff82ff82ff82ff83ff83ff83ff84ff84ff85ff85ff86ff87ff87ff88ff89ff89ff8aff8bff8cff8dff8eff8fff90ff91ff92ff93ff94ff96ff97ff98ff99ff9bff9cff9eff9fffa0ffa2ffa3ffa5ffa6ffa8ffaaffabffadffafffb0ffb2ffb4ffb6ffb8ffb9ffbbffbdffbfffc1ffc3ffc5ffc7ffc9ffcbffcdffcfffd1ffd3ffd5ffd7ffd9ffdcffdeffe0ffe2ffe4ffe6ffe9ffebffedffeffff1fff4fff6fff8fffafffdffffff");
      this.AtanTable = $d2j$hex$83b9c161$decode_S("00000000000000000000000000000100010001000100010001000200020002000200020002000300030003000300030003000300040004000400040004000400050005000500050005000500060006000600060006000600060007000700070007000700070008000800080008000800080009000900090009000900090009000a000a000a000a000a000a000b000b000b000b000b000b000c000c000c000c000c000c000c000d000d000d000d000d000d000e000e000e000e000e000e000e000f000f000f000f000f000f00100010001000100010001000100011001100110011001100110012001200120012001200120012001300130013001300130013001300140014001400140014001400150015001500150015001500150016001600160016001600160016001700170017001700170017001700180018001800180018001800180019001900190019001900190019001a001a001a001a001a001a001a001b001b001b001b001b001b001b001c001c001c001c001c001c001c001d001d001d001d001d001d001d001e001e001e001e001e001e001e001f001f001f001f001f001f001f001f002000200020002000200020002000210021002100210021002100210022002200220022002200220022002200230023002300230023002300230023002400240024002400240024002400250025002500250025002500250025002600260026002600260026002600260027002700270027002700270027002700280028002800280028002800280028002900290029002900290029002900290029002a002a002a002a002a002a002a002a002b002b002b002b002b002b002b002b002c002c002c002c002c002c002c002c002c002d002d002d002d002d002d002d002d002d002e002e002e002e002e002e002e002e002e002f002f002f002f002f002f002f002f002f003000300030003000300030003000300030003100310031003100310031003100310031003200320032003200320032003200320032003200330033003300330033003300330033003300340034003400340034003400340034003400340035003500350035003500350035003500350035003600360036003600360036003600360036003600370037003700370037003700370037003700370037003800380038003800380038003800380038003800390039003900390039003900390039003900390039003a003a003a003a003a003a003a003a003a003a003a003b003b003b003b003b003b003b003b003b003b003b003b003c003c003c003c003c003c003c003c003c003c003c003d003d003d003d003d003d003d003d003d003d003d003d003e003e003e003e003e003e003e003e003e003e003e003e003f003f003f003f003f003f003f003f003f003f003f003f004000");
      this.IDList = new int[]{0, 1, 4, 6, 6, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 13, 12};
      this.HitSound = new int[]{3, 4, 6, 3, 7};
      this.HitEffectActNo = new int[]{0, 0, 1, 0, -1};
      this.GuardEffectActNo = new int[]{2, 2, 2, 2, -1};
      this.DefaultKeyConfig = new int[]{1, 6, 2, 7, 4, 1, 5, 8, 3, 9};
      this.KeyConfigText = new int[]{292, 14, 15, 16, 17, 18, 19, 20, 21, 22, 359};
      this.KeyChangeData = new int[]{0, 16384, 1, 2, 4, 8, 5, 9, 6, 10, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456};
      this.KeyExList = new int[]{16384, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096};
      this.FillRectColor = new int[]{8, 16777215, 16717848, 179794, 303441, 9233436, 16509445, 65280, 16711680, 15615, 16751360, 16751360};
      this.GameData_TextPage = new int[]{137, 138, 154, 271, 272, 273, 274, 275, 276, 277, 278, 279};
      this.CharData_TextPage = new int[]{2, 43, 44, 45};
      this.CardData_TextPage = new int[]{0, 1, 2, 3, 4, 5, 6, 7};
      this.CharAct_Name = new int[]{0, 51, 53, 55, 0, 31, 32, 33, 20, 21, 22, 23};
      this.strDataFolder2 = new String[]{"common", "select0", "back", "back", "bobj", "bobj", "char", "chardemo", "charf", "effect", "demo_00", "demo_08", "font00", "card_preview", "gamedata", "text00", "card", "common_en", "select0_en", "back", "back", "bobj", "bobj", "char", "chardemo", "charf", "effect_en", "demo_00_en", "demo_08", "font00", "card_preview", "gamedata", "text00", "card"};
      this.osb = null;
      this.osbOK = true;
      this.osbSkip = 0;
      this.autoCardTask = null;
   }

   private void DrawImage(GlobalWork var1, ObjReq var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9, int var10, int var11, int var12) {
      int var16 = var2.img * 9;
      byte var25 = this.ChrGameData[var2.acttype].getData(0)[var16];
      int var18 = this.ChrGameData[var2.acttype].getImageWidth(this.ChrGameData[var2.acttype].getData(0)[var16] & 255);
      int var23 = this.ChrGameData[var2.acttype].getImageHeight(this.ChrGameData[var2.acttype].getData(0)[var16] & 255);
      if (var18 > 0 && var23 > 0) {
         short var20 = (short)((this.ChrGameData[var2.acttype].getData(0)[var16 + 1] & 255 & 255) << 8 | this.ChrGameData[var2.acttype].getData(0)[var16 + 2] & 255 & 255);
         int var17 = var2.iOffsetSprXPos;
         short var21 = (short)((this.ChrGameData[var2.acttype].getData(0)[var16 + 3] & 255 & 255) << 8 | this.ChrGameData[var2.acttype].getData(0)[var16 + 4] & 255 & 255);
         int var19 = var2.iOffsetSprYPos;
         int var22 = (short)((this.ChrGameData[var2.acttype].getData(0)[var16 + 5] & 255 & 255) << 8 | this.ChrGameData[var2.acttype].getData(0)[var16 + 6] & 255 & 255) + var2.iOffsetSprXSize;
         int var24 = (short)((this.ChrGameData[var2.acttype].getData(0)[var16 + 7] & 255 & 255) << 8 | this.ChrGameData[var2.acttype].getData(0)[var16 + 8] & 255 & 255) + var2.iOffsetSprYSize;
         float var13 = 1.0F;
         if (var2.acttype == 3 || var2.acttype == 4) {
            var13 = 2.0F;
         }

         int var14 = var2.iAlpha + var2.iGlobalAlpha;
         var10 = var14;
         if (var14 > 255) {
            var10 = 255;
         }

         var14 = var10;
         if (var10 < 0) {
            var14 = 0;
         }

         if (this.ChrGameData[var2.acttype].getImage(this.ChrGameData[var2.acttype].getData(0)[var16] & 255) != 0) {
            if (var14 == 0 && (var2.wActFlag & 2048) == 0) {
               Graphics2D.getInstance().drawMode(var1.gl, 3);
               Graphics2D.getInstance().setColorGl(var1.gl, 255, 255, 255, 255);
            } else if ((var2.wActFlag & 512) == 0 && (var2.wObjFlag & 512) == 0) {
               if ((var2.wActFlag & 1024) == 0 && (var2.wObjFlag & 1024) == 0) {
                  if (var14 == 255) {
                     Graphics2D.getInstance().drawMode(var1.gl, 3);
                  } else {
                     Graphics2D.getInstance().drawMode(var1.gl, 0);
                  }

                  Graphics2D.getInstance().setColorGl(var1.gl, 255, 255, 255, var14);
               } else {
                  Graphics2D.getInstance().setColorGl(var1.gl, 255, 255, 255, 255);
                  Graphics2D.getInstance().drawMode(var1.gl, 2);
               }
            } else {
               Graphics2D.getInstance().setColorGl(var1.gl, 255, 255, 255, var14);
               Graphics2D.getInstance().drawMode(var1.gl, 1);
            }

            var10 = 0;
            var14 = var3;
            if ((var5 & 16) != 0) {
               var14 = var3 - var22 * var11 / 100;
               var10 = 0 | 1;
            }

            int var15 = var10;
            var3 = var4;
            if ((var5 & 32) != 0) {
               var3 = var4 - var24 * var12 / 100;
               var15 = var10 | 2;
            }

            Graphics2D.getInstance().drawTexture(var1.gl, this.ChrGameData[var2.acttype].getImage(this.ChrGameData[var2.acttype].getData(0)[var16] & 255), var14, var3, var8 + var6, var9 + var7, var22, var24, (float)(var20 + var17) * var13 / (float)var18, (float)(var21 + var19) * var13 / (float)var23, (float)var22 * var13 / (float)var18, (float)var24 * var13 / (float)var23, var15, var2.iRotate, (float)var11 / 100.0F, (float)var12 / 100.0F);
            bDrawPiece = true;
         }
      }

   }

   private void InitSE(GlobalWork var1) {
      int var2;
      for(var2 = 0; var2 < 5; ++var2) {
         iReqSEBuf[var2] = -1;
      }

      iReqSECount = 0;
      SoundEffect.getInstance().dispose();

      for(var2 = 0; var2 < 79; ++var2) {
         SoundEffect.getInstance().load(var1.context, "se_" + Utility.InttoString(2, var2));
      }

   }

   private void PlayBGM(GlobalWork var1, int var2, boolean var3) {
      if (iPlayBGMNo < 0) {
         SoundEffect.getInstance().stopBgm();
      } else {
         float var4 = (float)((double)((float)(ConfigData[2] & 255) / 100.0F) * 0.7D);
         SoundEffect.getInstance().playBgm(var1.context, "bgm_" + Utility.InttoString(2, iPlayBGMNo), var4, var3);
      }

   }

   public void PlaySE(GlobalWork var1, int var2) {
        if (iReqSECount > 0) {
            int var3 = iReqSEBuf[0];
            for (int var4 = 0; var4 < 4; var4++) {
                iReqSEBuf[var4] = iReqSEBuf[var4 + 1];
            }
            iReqSECount--;
            iReqSEBuf[4] = -1;
            if (var3 < 0) {
                return;
            }
            if (80 > var3) {
                SoundEffect.getInstance().playSE(var3, (float) (((double) (((float) (ConfigData[3] & 255)) / 100.0f)) * 0.6d));
                return;
            }
            SoundEffect.getInstance().playAudio(var3 - 80, ((float) (ConfigData[3] & 255)) / 100.0f);
        }
    }


   private void PushSE(GlobalWork var1, int var2) {
      if (iReqSECount < 4) {
         iReqSEBuf[iReqSECount] = iReqSENo;
         ++iReqSECount;
      }

      iReqSENo = -1;
   }

   // $FF: synthetic method
   static GlobalWork access$000(TCBManajer var0) {
      return var0.gw;
   }

   private String gub(int var1) {
      String var2;
      if (var1 == 2) {
         var2 = "utf-8";
      } else {
         var2 = "Shift_JIS";
      }

      return var2;
   }

   public void ANGRY_ADD(GlobalWork var1, int var2, int var3) {
      if (Life[var2] != 0 && iTimer != 0 && !AngryOn[var2]) {
         int[] var4 = Angry;
         var4[var2] += var3;
         if (Angry[var2] > 100) {
            Angry[var2] = 100;
         }
      }

   }

   public void AddBP(GlobalWork var1, int var2) {
   }

   void AddBall(GlobalWork var1, int var2, int var3) {
      var3 += this.GetBall(var1, var2);
      var2 = (var2 << 1) + 12445;
      ConfigData[var2] = (byte)(var3 & 255);
      ConfigData[var2 + 1] = (byte)(var3 >> 8 & 255);
   }

   void AddBallLine(GlobalWork var1) {
      int var2 = this.GetBallLine(var1) + 1;
      ConfigData[12443] = (byte)(var2 & 255);
      ConfigData[12443 + 1] = (byte)(var2 >> 8 & 255);
   }

   boolean AddCard(GlobalWork var1, int var2, int var3) {
      byte[] var6 = ConfigData;
      int var4 = var2 + 11000;
      var6[var4] = (byte)(var6[var4] + var3);
      if (ConfigData[var2 + 11000] < 0) {
         ConfigData[var2 + 11000] = 0;
      }

      boolean var5;
      if (ConfigData[var2 + 11000] > 11) {
         ConfigData[var2 + 11000] = 11;
         var5 = true;
      } else {
         var5 = false;
      }

      return var5;
   }

   public boolean AddExp(GlobalWork var1, int var2, int var3) {
      int var8 = PlayerType[var2] * 100 + 30 + 53;
      var2 = (ConfigData[var8 + 0] & 255) << 16 | (ConfigData[var8 + 1] & 255) << 8 | ConfigData[var8 + 2] & 255;
      boolean var10 = false;
      boolean var9 = false;
      int var4 = var2 % 1000;
      int var7 = var2 / 1000 - 1;
      int var5 = var3;
      if (var3 == -1) {
         var4 = 0;
         var5 = 0;
      }

      var2 = var4;
      int var6 = var7;
      if (var4 < 99000) {
         var3 = var7;

         while(true) {
            var10 = var9;
            var2 = var4;
            var6 = var3;
            if (var5 <= 0) {
               break;
            }

            short var11;
            if (var3 == 98) {
               var11 = 0;
            } else {
               var11 = this.pGameData.piGameData[this.pGameData.piGameDataPos[43] + var3 / 5 * this.pGameData.piGameDataXSize[43] + 0];
            }

            if (var4 + var5 < var11) {
               var2 = var4 + var5;
               var6 = var3;
               var10 = var9;
               break;
            }

            var2 = var5 - (var11 - var4);
            var4 = 0;
            var5 = var3 + 1;
            var3 = var5;
            if (var5 >= 98) {
               var3 = 98;
               var2 = 0;
            }

            var9 = true;
            var5 = var2;
         }
      }

      var3 = var2;
      if (var2 > 99000) {
         var3 = 99000;
      }

      var2 = (var6 + 1) * 1000 + var3;
      ConfigData[var8 + 0] = (byte)(var2 >> 16 & 255);
      ConfigData[var8 + 1] = (byte)(var2 >> 8 & 255);
      ConfigData[var8 + 2] = (byte)(var2 & 255);
      return var10;
   }

   public void AddRP(GlobalWork var1, int var2, int var3) {
   }

   public void AddScore(GlobalWork var1, int var2, int var3) {
      int[] var4 = Score;
      var4[var2] += var3;
      if (Score[var2] > 9999900) {
         Score[var2] = 9999900;
      }

   }

   void AddTicket(GlobalWork var1, int var2) {
      int var3 = this.GetTicket(var1) + var2;
      var2 = var3;
      if (var3 < 0) {
         var2 = 0;
      }

      var3 = var2;
      if (var2 > 9999) {
         var3 = 9999;
      }

      ConfigData[12523] = (byte)(var3 & 255);
      ConfigData[12523 + 1] = (byte)(var3 >> 8 & 255);
   }

   public void AttackEnd(GlobalWork var1) {
      int var2 = tcbNow._work[0];
      this.CmdClear(var1, var2);
      PlayerAttack[var2] = 0;
      CancelTime[var2] = 0;
      tcbNow.iHitStop = 0;
      DamageMove[var2] = 0;
      BulletAction[var2][0] = 0;
      PlayerAttack[var2] = 0;
      SpecialKind[var2] = 0;
      SpecialType[var2] = 0;
      RushCount[var2] = 0;
      OldLifeWait[var2] = 0;
      HitFocusTarget[var2] = -1;
      if (iPlayMode == 2) {
         Life[var2] = PlayerLife[var2];
         Score[1 - var2] = 0;
         iScoreClearCounter = 0;
      }

      if (this.MissionLifeCheck(var1, var2, iStage) != 0) {
         Life[var2] = PlayerLife[var2];
      }

   }

   public void AutoCard(GlobalWork var1, int var2, int var3, int var4) {
      this.InitAutoCardBuf(var1, var3, var4, 0);
      iCardBufVal = 0;

      for(var2 = 0; var2 < 8; ++var2) {
         iCardWork[0][var2] = 0;
         iCardWork[1][var2] = 0;
      }

      iCardAutoType = var4;
      iCardAutoCostMax = var3;
      iCardAutoBaseIndex = 0;
      iAC_Pos = 0;

      for(var2 = 0; var2 < 8; ++var2) {
         iAC_Cost[var2] = 0;
         iAC_Val[var2] = 0;
         iAC_Index[var2] = 0;
      }

   }

   public int AutoCardCheck(GlobalWork var1, int var2) {
      int var3 = 0;

      byte var4;
      while(true) {
         if (var3 >= 8) {
            var4 = 0;
            break;
         }

         if (iCardWork[1][var3] == var2) {
            var4 = 1;
            break;
         }

         ++var3;
      }

      return var4;
   }

   public boolean AutoCardFinish(GlobalWork var1, int var2) {
      boolean var4;
      if (iCardAutoBaseIndex < iCardBufCount) {
         if (this.AutoCardSet(var1, iCardAutoBaseIndex)) {
            iAC_Pos = 0;
            ++iCardAutoBaseIndex;
            iAC_Index[0] = iCardAutoBaseIndex;
         }

         var4 = false;
      } else {
         for(int var3 = 0; var3 < 8; ++var3) {
            this.SetCardNo(var1, var2, var3, iCardWork[0][var3]);
         }

         var4 = true;
      }

      return var4;
   }

   public void AutoCardFlash(GlobalWork var1, int var2) {
      if (iCardBufVal < var2) {
         iCardBufVal = var2;

         for(var2 = 0; var2 < 8; ++var2) {
            iCardWork[0][var2] = iCardWork[1][var2];
         }
      }

   }

   public boolean AutoCardSet(GlobalWork var1, int var2) {
      int var6 = iAC_Index[iAC_Pos];
      int var5 = iAC_Cost[iAC_Pos];
      int var4 = iAC_Val[iAC_Pos];
      int var3 = iAC_Index[iAC_Pos];

      boolean var8;
      while(true) {
         if (var3 >= iCardBufCount) {
            iCardWork[1][iAC_Pos] = 0;
            this.AutoCardFlash(var1, var4);
            --iAC_Pos;
            if (iAC_Pos <= 0) {
               var8 = true;
            } else {
               var8 = false;
            }
            break;
         }

         iCardWork[1][iAC_Pos] = iCardBuf[var3];
         short var7 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 48 + bCardLevelBuf[var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 48 + bCardLevelBuf[var3] * 2] & 255);
         switch(iCardAutoType) {
         case 0:
            var2 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 50 + bCardLevelBuf[var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 50 + bCardLevelBuf[var3] * 2] & 255) + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 52 + bCardLevelBuf[var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 52 + bCardLevelBuf[var3] * 2] & 255) + ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 6 + bCardLevelBuf[var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 6 + bCardLevelBuf[var3] * 2] & 255) << 9) + ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 12 + bCardLevelBuf[var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 12 + bCardLevelBuf[var3] * 2] & 255) << 9);
            break;
         case 1:
            var2 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 50 + bCardLevelBuf[var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 50 + bCardLevelBuf[var3] * 2] & 255) + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 6 + bCardLevelBuf[var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 6 + bCardLevelBuf[var3] * 2] & 255) * 1000;
            break;
         default:
            var2 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 52 + bCardLevelBuf[var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 52 + bCardLevelBuf[var3] * 2] & 255) + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 12 + bCardLevelBuf[var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 12 + bCardLevelBuf[var3] * 2] & 255) * 1000;
         }

         if (var5 + var7 <= iCardAutoCostMax) {
            var3 = var6 + 1;
            if (iAC_Pos < 7) {
               iAC_Index[iAC_Pos] = var3;
               ++iAC_Pos;
               iAC_Cost[iAC_Pos] = var5 + var7;
               iAC_Val[iAC_Pos] = var4 + var2;
               iAC_Index[iAC_Pos] = var3;
            } else {
               iAC_Index[iAC_Pos] = var3;
               this.AutoCardFlash(var1, var4 + var2);
               iCardWork[1][iAC_Pos] = 0;
            }

            var8 = false;
            break;
         }

         if (var5 + var7 > iCardAutoCostMax) {
            iCardWork[1][iAC_Pos] = 0;
            this.AutoCardFlash(var1, var4);
            iAC_Index[iAC_Pos] = var6 + 1;
            var8 = false;
            break;
         }

         ++var3;
      }

      return var8;
   }

   boolean BTDataSet(GlobalWork var1, int var2) {
      boolean var6;
      if (bBTDataSetOK) {
         var6 = false;
      } else {
         iBTDataSetType = var2;
         this.bBTBinData = null;
         byte[] var7 = bBTData;
         int var3 = 0 + 1;
         var7[0] = (byte)var2;
         byte[] var8;
         int var9;
         label77:
         switch(var2) {
         case 1:
            iBTSkipCount = 0;
            iBTSkipType = 0;
            var8 = bBTData;
            var2 = var3 + 1;
            var8[var3] = 1;
            bBTData[var2] = (byte)(iControlType[iPlayerNo] & 255);
            break;
         case 2:
            iBTSkipCount = 0;
            iBTSkipType = 0;
            var7 = bBTData;
            var2 = var3 + 1;
            var7[var3] = (byte)(PlayerType[iPlayerNo] & 255);
            var7 = bBTData;
            var9 = var2 + 1;
            var7[var2] = (byte)(this.GetCharVersion(var1, PlayerType[iPlayerNo]) & 255);
            var8 = bBTData;
            var3 = var9 + 1;
            var8[var9] = (byte)(Level[iPlayerNo] & 255);
            var8 = bBTData;
            var2 = var3 + 1;
            var8[var3] = (byte)(PlayerCardCount[iPlayerNo] & 255);

            for(var3 = 0; var3 < 8; ++var3) {
               var8 = bBTData;
               var9 = var2 + 1;
               var8[var2] = (byte)(PlayerCard[iPlayerNo][var3] & 255);
               var8 = bBTData;
               var2 = var9 + 1;
               var8[var9] = (byte)(PlayerCardLevel[iPlayerNo][var3] & 255);
            }

            bBTData[var2] = (byte)(PlayerCardFormationCount[iPlayerNo] & 255);
            var3 = 0;
            ++var2;

            while(var3 < 16) {
               bBTData[var2] = (byte)(PlayerCardFormation[iPlayerNo][var3] & 255);
               ++var3;
               ++var2;
            }
            break;
         case 3:
            iBTSkipCount = 3;
            iBTSkipType = 0;
            byte var4;
            if (iPlayerNo == 0) {
               var4 = 0;
               var2 = var3;

               for(var3 = var4; var3 < 3; ++var3) {
                  var8 = bBTData;
                  var9 = var2 + 1;
                  var8[var2] = (byte)(CPURandBuf[0][var3] & 255);
                  var8 = bBTData;
                  var2 = var9 + 1;
                  var8[var9] = (byte)(CPURandBuf[0][var3] >> 8 & 255);
               }
            } else {
               var2 = var3 + 6;
            }

            if (bEventFlagSend) {
               var8 = bBTData;
               var3 = var2 + 1;
               var8[var2] = 1;
               var8 = bBTData;
               var2 = var3 + 1;
               var8[var3] = bEventFlagBuf;
            } else {
               var8 = bBTData;
               var3 = var2 + 1;
               var8[var2] = 0;
               var8 = bBTData;
               var2 = var3 + 1;
               var8[var3] = 0;
            }

            bEventFlagSend = false;
            var8 = bBTData;
            var9 = var2 + 1;
            var8[var2] = bEventValueBuf[0];
            var8 = bBTData;
            var3 = var9 + 1;
            var8[var9] = bEventValueBuf[1];
            var8 = bBTData;
            var2 = var3 + 1;
            var8[var3] = bEventValueBuf[2];
            bEventValueBuf[0] = 0;
            bEventValueBuf[1] = 0;
            bEventValueBuf[2] = 0;

            for(var3 = 0; var3 < 3; ++var3) {
               var8 = bBTData;
               var9 = var2 + 1;
               var8[var2] = (byte)(TapXBTBuf[iPlayerNo][var3] & 255);
               var8 = bBTData;
               var2 = var9 + 1;
               var8[var9] = (byte)(TapXBTBuf[iPlayerNo][var3] >> 8 & 255);
               var8 = bBTData;
               int var5 = var2 + 1;
               var8[var2] = (byte)(TapXBTBuf[iPlayerNo][var3] >> 16 & 255);
               var8 = bBTData;
               var9 = var5 + 1;
               var8[var5] = (byte)(TapXBTBuf[iPlayerNo][var3] >> 24 & 255);
               var8 = bBTData;
               var2 = var9 + 1;
               var8[var9] = (byte)(TapYBTBuf[iPlayerNo][var3] & 255);
               var8 = bBTData;
               var9 = var2 + 1;
               var8[var2] = (byte)(TapYBTBuf[iPlayerNo][var3] >> 8 & 255);
               var8 = bBTData;
               var5 = var9 + 1;
               var8[var9] = (byte)(TapYBTBuf[iPlayerNo][var3] >> 16 & 255);
               var8 = bBTData;
               var2 = var5 + 1;
               var8[var5] = (byte)(TapYBTBuf[iPlayerNo][var3] >> 24 & 255);
            }

            for(var3 = 0; var3 < 3; ++var3) {
               var8 = bBTData;
               var9 = var2 + 1;
               var8[var2] = (byte)(JoyTrigBuf[iPlayerNo][var3] & 255);
               var8 = bBTData;
               var2 = var9 + 1;
               var8[var9] = (byte)(JoyTrigBuf[iPlayerNo][var3] >> 8 & 255);
               var8 = bBTData;
               var9 = var2 + 1;
               var8[var2] = (byte)(JoyTrigBuf[iPlayerNo][var3] >> 16 & 255);
               var8 = bBTData;
               var2 = var9 + 1;
               var8[var9] = (byte)(JoyTrigBuf[iPlayerNo][var3] >> 24 & 255);
               var8 = bBTData;
               var9 = var2 + 1;
               var8[var2] = (byte)(JoyBuf[iPlayerNo][var3] & 255);
               var8 = bBTData;
               var2 = var9 + 1;
               var8[var9] = (byte)(JoyBuf[iPlayerNo][var3] >> 8 & 255);
               var8 = bBTData;
               var9 = var2 + 1;
               var8[var2] = (byte)(JoyBuf[iPlayerNo][var3] >> 16 & 255);
               var8 = bBTData;
               var2 = var9 + 1;
               var8[var9] = (byte)(JoyBuf[iPlayerNo][var3] >> 24 & 255);
               JoyTrigBuf[iPlayerNo][var3] = 0;
               JoyBuf[iPlayerNo][var3] = 0;
            }

            var4 = 0;
            var3 = var2;
            var2 = var4;

            while(true) {
               if (var2 >= 3) {
                  break label77;
               }

               var8 = bBTData;
               var9 = var3 + 1;
               var8[var3] = (byte)(TouchesCommandBuf[iPlayerNo][var2] & 255);
               var8 = bBTData;
               var3 = var9 + 1;
               var8[var9] = (byte)(_commandButtonBuf[iPlayerNo][var2] & 255);
               var8 = bBTData;
               var9 = var3 + 1;
               var8[var3] = (byte)(TouchesVal1Buf[iPlayerNo][var2] & 255);
               var8 = bBTData;
               var3 = var9 + 1;
               var8[var9] = (byte)(TouchesVal1Buf[iPlayerNo][var2] >> 8 & 255);
               var8 = bBTData;
               var9 = var3 + 1;
               var8[var3] = (byte)(TouchesVal1Buf[iPlayerNo][var2] >> 16 & 255);
               var8 = bBTData;
               var3 = var9 + 1;
               var8[var9] = (byte)(TouchesVal1Buf[iPlayerNo][var2] >> 24 & 255);
               var8 = bBTData;
               var9 = var3 + 1;
               var8[var3] = (byte)(TouchesVal2Buf[iPlayerNo][var2] & 255);
               var8 = bBTData;
               var3 = var9 + 1;
               var8[var9] = (byte)(TouchesVal2Buf[iPlayerNo][var2] >> 8 & 255);
               var8 = bBTData;
               var9 = var3 + 1;
               var8[var3] = (byte)(TouchesVal2Buf[iPlayerNo][var2] >> 16 & 255);
               var8 = bBTData;
               var3 = var9 + 1;
               var8[var9] = (byte)(TouchesVal2Buf[iPlayerNo][var2] >> 24 & 255);
               ++var2;
            }
         case 4:
            iBTSkipType = 0;
            iBTSkipCount = 3;
            var8 = bBTData;
            var2 = var3 + 1;
            var8[var3] = bEventValueBuf[0];
            var8 = bBTData;
            var3 = var2 + 1;
            var8[var2] = bEventValueBuf[1];
            bBTData[var3] = bEventValueBuf[2];
            bEventValueBuf[0] = 0;
            bEventValueBuf[1] = 0;
            bEventValueBuf[2] = 0;
            break;
         case 5:
            iBTSkipCount = 0;
            iBTSkipType = 1;
            var8 = bBTData;
            var2 = var3 + 1;
            var8[var3] = bEventValueBuf[0];
            var8 = bBTData;
            var3 = var2 + 1;
            var8[var2] = bEventValueBuf[1];
            bBTData[var3] = bEventValueBuf[2];
            bEventValueBuf[0] = 0;
            bEventValueBuf[1] = 0;
            bEventValueBuf[2] = 0;
            break;
         case 6:
            iBTSkipCount = 3;
            iBTSkipType = 0;
            var8 = bBTData;
            var2 = var3 + 1;
            var8[var3] = bEventValueBuf[0];
            var8 = bBTData;
            var3 = var2 + 1;
            var8[var2] = bEventValueBuf[1];
            bBTData[var3] = bEventValueBuf[2];
            bEventValueBuf[0] = 0;
            bEventValueBuf[1] = 0;
            bEventValueBuf[2] = 0;
            break;
         case 7:
            iBTSkipCount = 3;
            iBTSkipType = 0;
            var2 = 0;

            while(true) {
               if (var2 >= 8) {
                  break label77;
               }

               bBTData[var3] = (byte)(iCardCheck[iPlayerNo][var2] & 255);
               ++var2;
               ++var3;
            }
         case 8:
            iBTSkipCount = 60;
            iBTSkipType = 0;
            var8 = bBTData;
            var2 = var3 + 1;
            var8[var3] = (byte)(iBinaryType & 255);
            var8 = bBTData;
            var3 = var2 + 1;
            var8[var2] = (byte)(iBinarySize & 255);
            var8 = bBTData;
            var2 = var3 + 1;
            var8[var3] = (byte)(iBinarySize >> 8 & 255);
            var8 = bBTData;
            var3 = var2 + 1;
            var8[var2] = (byte)(iBinarySize >> 16 & 255);
            bBTData[var3] = (byte)(iBinarySize >> 24 & 255);
            pBinaryGetData = null;
            this.bBTBinData = pBinaryData;
         }

         bBTDataSetOK = true;
         var6 = true;
      }

      return var6;
   }

   void BTDispose(GlobalWork var1) {
      bBTSend = false;
      bBTDataSetOK = false;
      iBTReadDataIndex = 0;
      iBTReadDataBufIndex = 0;
      var1.iBluetoothOK = 0;
      BluetoothManajer.getInstance().dispose();
      BluetoothManajer.clearInstance();
   }

   void BTReset(GlobalWork var1, boolean var2) {
      if (var2) {
         BluetoothManajer.getInstance().reset();
      }

      iBTReadDataBufIndex = 0;
      iBTReadDataIndex = 0;
      iBTSkipCount = 0;
      bBTDataSetOK = false;
      bBTSend = false;
      bBTRevOK = false;
   }

   boolean BTRev(GlobalWork var1) {
      int var6 = iPlayerNo;
      int var5 = 1 - var6;
      boolean var7;
      if (!bBTSend) {
         var7 = true;
      } else {
         --iBTSkipCount;
         if (iBTSkipCount > 0) {
            var7 = true;
         } else {
            iBTSkipCount = 0;
            byte[] var11 = bBTData;
            byte[] var10 = bBTData;
            int var3 = var10.length;
            byte[] var9 = var10;
            byte[] var8 = var11;
            int var2 = var3;
            if (iPlayMode == 8) {
               var9 = var10;
               var8 = var11;
               var2 = var3;
               if (var1.iBluetoothOK == 1) {
                  var9 = BluetoothManajer.getInstance().getData();
                  var8 = BluetoothManajer.getInstance().getSendData();
                  var2 = BluetoothManajer.getInstance().getReadDataSize();
                  if (!BluetoothManajer.getInstance().isConnect()) {
                     this.BTDispose(var1);
                     this._TKilx(var1, 8192, 65535);
                     iBTErrMess = 2;
                     if (iBluetoothMode == 0) {
                        this._TaskMake(var1, 792, 8192);
                     } else {
                        this._TaskMake(var1, 180, 8192);
                     }

                     bDrawLoading = false;
                     var7 = true;
                     return var7;
                  }
               }
            }

            if (var9 == null) {
               var7 = false;
            } else {
               int var4 = 0;

               for(var3 = 0; var3 < var2 / 90; ++var3) {
                  System.arraycopy(var9, var4, bBTReadDataBuf[iBTReadDataBufIndex], 0, 90);
                  var4 += 90;
                  this.bBTReadData[iBTReadDataIndex] = bBTReadDataBuf[iBTReadDataBufIndex];
                  ++iBTReadDataIndex;
                  iBTReadDataBufIndex = (iBTReadDataBufIndex + 1) % 3;
               }

               var9 = this.bBTReadData[0];
               bBTRevOK = true;
               bBTSend = false;

               for(var2 = 0; var2 < 2; ++var2) {
                  this.bBTReadData[var2 + 0] = this.bBTReadData[var2 + 1];
               }

               this.bBTReadData[2] = null;
               label108:
               switch(var9[0]) {
               case 1:
                  iAppVersion = var9[1] & 255;
                  iControlType[var5] = var9[1 + 1] & 255;
                  break;
               case 2:
                  int[] var13 = PlayerType;
                  var2 = 1 + 1;
                  var13[var5] = var9[1] & 255;
                  var13 = DataVersion;
                  var3 = var2 + 1;
                  var13[var5] = var9[var2] & 255;
                  var13 = Level;
                  var2 = var3 + 1;
                  var13[var5] = var9[var3] & 255;
                  PlayerCardCount[var5] = var9[var2] & 255;
                  var3 = 0;
                  ++var2;

                  while(var3 < 8) {
                     var13 = PlayerCard[var5];
                     var4 = var2 + 1;
                     var13[var3] = var9[var2] & 255;
                     var13 = PlayerCardLevel[var5];
                     var2 = var4 + 1;
                     var13[var3] = var9[var4] & 255;
                     ++var3;
                  }

                  PlayerCardFormationCount[var5] = var9[var2] & 255;
                  var3 = 0;
                  ++var2;

                  while(var3 < 16) {
                     PlayerCardFormation[var5][var3] = var9[var2] & 255;
                     ++var3;
                     ++var2;
                  }
                  break;
               case 3:
                  iCPURandCnt = 0;
                  var3 = 0;

                  for(var2 = 1; var3 < 3; var2 += 2) {
                     if (var6 == 1) {
                        CPURandWork[0][var3] = var9[var2] & 255 | (var9[var2 + 1] & 255) << 8;
                     } else {
                        CPURandWork[0][var3] = var8[var2] & 255 | (var8[var2 + 1] & 255) << 8;
                     }

                     CPURandWork[1][var3] = CPURandWork[0][var3];
                     ++var3;
                  }

                  var3 = var2 + 1;
                  if (var9[var2] != 0) {
                     bEventFlag[var5] = var9[var3];
                     bEventFlag[var6] = var8[var3];
                  }

                  var2 = var3 + 1;
                  bEventValue[var5][0] = var9[var2];
                  bEventValue[var5][1] = var9[var2 + 1];
                  bEventValue[var5][2] = var9[var2 + 2];
                  bEventValue[var6][0] = var8[var2];
                  bEventValue[var6][1] = var8[var2 + 1];
                  bEventValue[var6][2] = var8[var2 + 2];
                  var2 += 3;

                  for(var3 = 0; var3 < 3; ++var3) {
                     TapXBTWork[var5][var3] = var9[var2] & 255 | (var9[var2 + 1] & 255) << 8 | (var9[var2 + 2] & 255) << 16 | (var9[var2 + 3] & 255) << 24;
                     TapYBTWork[var5][var3] = var9[var2 + 4] & 255 | (var9[var2 + 5] & 255) << 8 | (var9[var2 + 6] & 255) << 16 | (var9[var2 + 7] & 255) << 24;
                     TapXBTWork[var6][var3] = var8[var2] & 255 | (var8[var2 + 1] & 255) << 8 | (var8[var2 + 2] & 255) << 16 | (var8[var2 + 3] & 255) << 24;
                     TapYBTWork[var6][var3] = var8[var2 + 4] & 255 | (var8[var2 + 5] & 255) << 8 | (var8[var2 + 6] & 255) << 16 | (var8[var2 + 7] & 255) << 24;
                     var2 += 8;
                  }

                  for(var3 = 0; var3 < 3; ++var3) {
                     JoyTrigWork[var5][var3] = var9[var2] & 255 | (var9[var2 + 1] & 255) << 8 | (var9[var2 + 2] & 255) << 16 | (var9[var2 + 3] & 255) << 24;
                     JoyWork[var5][var3] = var9[var2 + 4] & 255 | (var9[var2 + 5] & 255) << 8 | (var9[var2 + 6] & 255) << 16 | (var9[var2 + 7] & 255) << 24;
                     JoyTrigWork[var6][var3] = var8[var2] & 255 | (var8[var2 + 1] & 255) << 8 | (var8[var2 + 2] & 255) << 16 | (var8[var2 + 3] & 255) << 24;
                     JoyWork[var6][var3] = var8[var2 + 4] & 255 | (var8[var2 + 5] & 255) << 8 | (var8[var2 + 6] & 255) << 16 | (var8[var2 + 7] & 255) << 24;
                     var2 += 8;
                  }

                  iTouchesCommandCount = 0;
                  byte var12 = 0;
                  var3 = var2;
                  var2 = var12;

                  while(true) {
                     if (var2 >= 3) {
                        break label108;
                     }

                     TouchesCommandWork[var5][var2] = var9[var3] & 255;
                     _commandButtonWork[var5][var2] = var9[var3 + 1] & 255;
                     TouchesVal1Work[var5][var2] = var9[var3 + 2] & 255 | (var9[var3 + 3] & 255) << 8 | (var9[var3 + 4] & 255) << 16 | (var9[var3 + 5] & 255) << 24;
                     TouchesVal2Work[var5][var2] = var9[var3 + 6] & 255 | (var9[var3 + 7] & 255) << 8 | (var9[var3 + 8] & 255) << 16 | (var9[var3 + 9] & 255) << 24;
                     TouchesCommandWork[var6][var2] = var8[var3] & 255;
                     _commandButtonWork[var6][var2] = var8[var3 + 1] & 255;
                     TouchesVal1Work[var6][var2] = var8[var3 + 2] & 255 | (var8[var3 + 3] & 255) << 8 | (var8[var3 + 4] & 255) << 16 | (var8[var3 + 5] & 255) << 24;
                     TouchesVal2Work[var6][var2] = var8[var3 + 6] & 255 | (var8[var3 + 7] & 255) << 8 | (var8[var3 + 8] & 255) << 16 | (var8[var3 + 9] & 255) << 24;
                     var3 += 10;
                     ++var2;
                  }
               case 4:
                  iJoyBufCount = 0;
                  bEventValue[var5][0] = var9[1];
                  bEventValue[var5][1] = var9[1 + 1];
                  bEventValue[var5][2] = var9[1 + 2];
                  bEventValue[var6][0] = var8[1];
                  bEventValue[var6][1] = var8[1 + 1];
                  bEventValue[var6][2] = var8[1 + 2];
                  break;
               case 5:
                  bEventValue[var5][0] = var9[1];
                  bEventValue[var5][1] = var9[1 + 1];
                  bEventValue[var5][2] = var9[1 + 2];
                  bEventValue[var6][0] = var8[1];
                  bEventValue[var6][1] = var8[1 + 1];
                  bEventValue[var6][2] = var8[1 + 2];
                  break;
               case 6:
                  bEventValue[var5][0] = var9[1];
                  bEventValue[var5][1] = var9[1 + 1];
                  bEventValue[var5][2] = var9[1 + 2];
                  bEventValue[var6][0] = var8[1];
                  bEventValue[var6][1] = var8[1 + 1];
                  bEventValue[var6][2] = var8[1 + 2];
                  break;
               case 7:
                  var3 = 0;
                  var2 = 1;

                  while(true) {
                     if (var3 >= 8) {
                        break label108;
                     }

                     iCardCheck[var5][var3] = var9[var2] & 255;
                     ++var3;
                     ++var2;
                  }
               case 8:
                  var2 = var9[1 + 1] & 255 | (var9[1 + 2] & 255) << 8 | (var9[1 + 3] & 255) << 16 | (var9[1 + 4] & 255) << 24;
                  pBinaryData = null;
                  pBinaryGetData = null;
                  if (var2 > 0) {
                     pBinaryGetData = new byte[var2];
                     System.arraycopy(var9, 90, pBinaryGetData, 0, var2);
                  }
               }

               if (iBTReadDataIndex > 0) {
                  --iBTReadDataIndex;
               }

               if (iPlayMode == 8 && var1.iBluetoothOK == 1) {
                  BluetoothManajer.getInstance().clearData();
               }

               var7 = true;
            }
         }
      }

      return var7;
   }

   boolean BTSend(GlobalWork var1) {
      boolean var2;
      if (bBTDataSetOK && !bBTSend) {
         if (iBTDataSetType == 3) {
         }

         bBTDataSetOK = false;
         bBTSend = true;
         bBTRevOK = false;
         if (iPlayMode == 8 && var1.iBluetoothOK == 1) {
            BluetoothManajer.getInstance().setData(bBTData);
         }

         var2 = true;
      } else {
         var2 = false;
      }

      return var2;
   }

   public void BuyAppFree(GlobalWork var1) {
      ConfigData[12534] = 1;
      this._FILESave(var1);
   }

   void BuyCardPack(GlobalWork var1, int var2) {
      int var3 = var2 / 8 + 12535;
      byte[] var4 = ConfigData;
      var4[var3] = (byte)(var4[var3] | 1 << var2 % 8);
      this._FILESave(var1);
   }

   public void BuyCharctor(GlobalWork var1, int var2) {
      ConfigData[var2 * 100 + 30 + 1] = 1;
      ConfigData[var2 * 100 + 30 + 85] = 1;
      this._FILESave(var1);
   }

   boolean CPUNoCheck(GlobalWork var1, int var2) {
      boolean var3;
      if (this.pGameData.piGameData[this.pGameData.piGameDataPos[145] + this.pGameData.piGameDataXSize[145] * 0 + 0] != var2 && this.pGameData.piGameData[this.pGameData.piGameDataPos[145] + this.pGameData.piGameDataXSize[145] * 0 + 1] != var2) {
         if (PlayerType[0] == var2) {
            var3 = false;
         } else {
            var3 = true;
         }
      } else {
         var3 = false;
      }

      return var3;
   }

   public void CREATE_STRING(GlobalWork var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9, int var10, int var11, int var12, int var13, int var14, int var15, int var16) {
      byte var20 = 0;
      int var17 = 0;

      int var18;
      for(var18 = 0; var18 < var2; ++var18) {
         var17 += ((this.pGameData.piGameData[this.pGameData.piGameDataPos[7] + this.pGameData.piGameDataXSize[7] * 0 + var17] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[7] + this.pGameData.piGameDataXSize[7] * 0 + var17 + 1] & 255) + 2;
      }

      int var21;
      label32: {
         var21 = (this.pGameData.piGameData[this.pGameData.piGameDataPos[7] + this.pGameData.piGameDataXSize[7] * 0 + var17] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[7] + this.pGameData.piGameDataXSize[7] * 0 + var17 + 1] & 255;
         var18 = var17 + 2;
         var17 = var8;
         if ((var7 & 128) != 0) {
            int var19 = 240 - var16 * var21 / 2 << 16;
            var2 = var8;
            if (var8 == 0) {
               var2 = var19;
            }

            var17 = var2;
            if (var10 == 0) {
               var10 = var19;
               var17 = var2;
               var8 = var20;
               var2 = var18;
               break label32;
            }
         }

         var2 = var18;
      }

      for(var8 = var20; var8 < var21; var10 = var18) {
         var18 = this.pGameData.piGameData[this.pGameData.piGameDataPos[7] + this.pGameData.piGameDataXSize[7] * 0 + var2] & 255;
         if (var18 != 32) {
            TCB var22 = this._TaskMake(var1, 805, var3);
            var22._work[0] = var4;
            var22._work[1] = this.pGameData.piGameData[this.pGameData.piGameDataPos[8] + this.pGameData.piGameDataXSize[8] * 0 + var18] + var5;
            var22._work[2] = var6;
            var22._work[3] = var7;
            var22._work[4] = var17;
            var22._work[5] = var9;
            var22._work[6] = var10;
            var22._work[7] = var11;
            var22._work[8] = var12;
            var22._work[9] = var13;
            var22._work[10] = var14;
            var22._work[11] = var15;
         }

         var17 += var16 << 16;
         var18 = var10;
         if (var17 != var10) {
            var18 = var10 + (var16 << 16);
         }

         ++var8;
         ++var2;
      }

   }

   void CardGDTString(GlobalWork var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9, int var10, int var11) {
      this.SetString(var1, var4, var3, var2, 1, var5, var6, var7, var8, var9, var10, var11, 0);
   }

   public int CardPutCheck(GlobalWork var1, int var2, int var3) {
      int var4 = 0;

      byte var5;
      while(true) {
         if (var4 >= 8) {
            var5 = 0;
            break;
         }

         if (this.GetCardNo(var1, var2, var4) == var3) {
            var5 = 1;
            break;
         }

         ++var4;
      }

      return var5;
   }

   public void CardPutClear(GlobalWork var1) {
      for(int var2 = 0; var2 < 90; ++var2) {
         for(int var3 = 0; var3 < 8; ++var3) {
            this.SetCardNo(var1, var2, var3, 0);
         }
      }

   }

   public int CardPutCount(GlobalWork var1, int var2) {
      int var4 = 0;

      int var5;
      for(int var3 = 0; var3 < 8; var4 = var5) {
         var5 = var4;
         if (this.GetCardNo(var1, var2, var3) != 0) {
            var5 = var4 + 1;
         }

         ++var3;
      }

      return var4;
   }

   public void CardRefresh(GlobalWork var1, int var2) {
      for(int var3 = 0; var3 < 8; ++var3) {
         int var4 = this.GetCardNo(var1, var2, var3);
         if (ConfigData[var4 + 11000] == 0) {
            this.SetCardNo(var1, var2, var3, 0);
         }
      }

   }

   boolean CharGDTString(GlobalWork var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9, int var10) {
      this.SetString(var1, var3, 0, var2, 3, var4, var5, var6, var7, var8, var9, var10, 0);
      return true;
   }

   int CharOpen(GlobalWork var1, int var2) {
      var2 = var2 * 100 + 30 + 85;
      byte var3;
      if (ConfigData[var2] == 0) {
         ConfigData[var2] = 1;
         var3 = 1;
      } else {
         var3 = 0;
      }

      return var3;
   }

   void CharVisibleInit(GlobalWork var1) {
      cstatusCount = 0;
      if (this.isMission(var1) == 0 && iPlayMode != 8) {
         bCharIndex[0] = 0;
         cstatusCount = 1;
      } else {
         for(int var2 = 0; var2 < 90; ++var2) {
            bCharIndex[var2] = 0;
            if (this.CheckCharctorFiles(var1, var2)) {
               bCharIndex[cstatusCount] = (byte)var2;
               ++cstatusCount;
            }
         }
      }

   }

   boolean Check2Byte(int var1) {
      boolean var2;
      if (var1 >= 32 && (var1 < 128 || var1 > 160) && var1 < 224) {
         var2 = false;
      } else {
         var2 = true;
      }

      return var2;
   }

   public boolean CheckBack(GlobalWork var1, int var2, int var3, int var4) {
      boolean var5;
      if (bDrawLoading || (var2 <= -10 || var2 >= 100 || var3 <= 0 || var3 >= 48 || var4 == 0) && (!bBackKeyPush || iBackKeyType != 0) && (!bBackKeyPush || iBackKeyType != 1 || !bPause)) {
         var5 = false;
      } else {
         var5 = true;
      }

      return var5;
   }

   boolean CheckBall(GlobalWork var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9, int var10, int var11, boolean var12) {
      var12 = false;
      var11 = this.GetBallLine(var1);
      if (var11 >= 11) {
         var12 = false;
      } else {
         for(var3 = 0; var3 < 7; ++var3) {
            BallGetCount[var3] = 0;
         }

         if (this.isMission(var1) == 0 && iPlayMode != 8) {
            if (var9 > 7) {
               var12 = false;
            } else {
               BallGetCount[var9 - 1] = 1;
               var12 = true;
            }
         } else {
            var9 = var11 * 7;

            boolean var13;
            for(var3 = 0; var3 < 7; var12 = var13) {
               var13 = var12;
               if (var11 >= this.GetBall(var1, var3)) {
                  if ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 0 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 0] & 255) != var2 + 1) {
                     var13 = var12;
                  } else {
                     label85: {
                        if ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 2] & 255) != 0) {
                           var13 = var12;
                           if ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 2] & 255) != var4 + 1) {
                              break label85;
                           }
                        }

                        if ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 4 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 4] & 255) != 0) {
                           var13 = var12;
                           if ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 4 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 4] & 255) * 100 > var5) {
                              break label85;
                           }
                        }

                        if ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 6 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 6] & 255) != 0) {
                           var13 = var12;
                           if ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 6 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 6] & 255) > var6) {
                              break label85;
                           }
                        }

                        if ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 8 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 8] & 255) != 0) {
                           var13 = var12;
                           if (var7 == 1) {
                              break label85;
                           }
                        }

                        if ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 10 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 10] & 255) != 0) {
                           var13 = var12;
                           if ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 10 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 10] & 255) <= var8) {
                              break label85;
                           }
                        }

                        if ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 16 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 16] & 255) != 0) {
                           var13 = var12;
                           if (var10 != 8) {
                              break label85;
                           }
                        }

                        if ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 16 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[153] + (var9 + var3) * 2 * this.pGameData.piGameDataXSize[153] + 16] & 255) == 0) {
                           var13 = var12;
                           if (var10 == 8) {
                              break label85;
                           }
                        }

                        BallGetCount[var3] = 1;
                        var13 = true;
                     }
                  }
               }

               ++var3;
            }
         }
      }

      return var12;
   }

   boolean CheckBallLine(GlobalWork var1) {
      int var3 = this.GetBallLine(var1);
      int var2 = 0;

      boolean var4;
      while(true) {
         if (var2 >= 7) {
            var4 = true;
            break;
         }

         if (var3 >= this.GetBall(var1, var2)) {
            var4 = false;
            break;
         }

         ++var2;
      }

      return var4;
   }

   boolean CheckCardFiles(GlobalWork var1, int var2) {
      boolean var3 = false;
      if (var2 >= 0 && Utility.checkFile(var1.context, "card" + Utility.InttoString(3, var2) + ".pac")) {
         var3 = true;
      }

      return var3;
   }

   boolean CheckCardPackFiles(GlobalWork var1, int var2) {
      int var3 = 0;

      boolean var4;
      while(true) {
         if (var3 >= 10) {
            var4 = true;
            break;
         }

         if (!this.CheckCardFiles(var1, var2 * 10 + 1 + var3)) {
            var4 = false;
            break;
         }

         ++var3;
      }

      return var4;
   }

   boolean CheckCharctorFiles(GlobalWork var1, int var2) {
      boolean var4 = false;
      boolean var3;
      if (var2 < 0) {
         var3 = var4;
      } else {
         System.out.println("Comprobando " + var2);
         var3 = var4;
         if (Utility.checkFile(var1.context, "char" + Utility.InttoString(2, var2) + ".pac")) {
            var3 = var4;
            if (Utility.checkFile(var1.context, "chardemo" + Utility.InttoString(2, var2) + ".pac")) {
               var3 = var4;
               if (Utility.checkFile(var1.context, "charf00" + Utility.InttoString(2, var2) + ".pac")) {
                  var3 = true;
               }
            }
         }
      }

      return var3;
   }

   boolean CheckDefaultCharctor(GlobalWork var1, int var2) {
      int var3 = 0;

      boolean var4;
      while(true) {
         if (var3 >= this.pGameData.piGameDataYSize[158]) {
            var4 = false;
            break;
         }

         if (this.pGameData.piGameData[this.pGameData.piGameDataPos[158] + this.pGameData.piGameDataXSize[158] * var3 + 0] == var2) {
            var4 = true;
            break;
         }

         ++var3;
      }

      return var4;
   }

   public boolean CheckDownBtn(GlobalWork var1, int var2, int var3, int var4) {
      boolean var5;
      if (var2 > 410 && var2 < 480 && var3 > 280 && var3 < 320 && var4 != 0) {
         var5 = true;
      } else {
         var5 = false;
      }

      return var5;
   }

   public int CheckObjHit(GlobalWork var1, ObjReq var2, ObjReq var3, boolean var4) {
      short var15;
      for(int var5 = 0; var5 < var2.iHitNum; ++var5) {
         if (var2.hit[var5 * 5 + 0] == 2) {
            for(int var6 = 0; var6 < var3.iHitNum; ++var6) {
               if (!var4) {
                  if (var3.hit[var6 * 5 + 0] != 1) {
                     continue;
                  }
               } else if (var3.hit[var6 * 5 + 0] != 2) {
                  continue;
               }

               int var9 = var2.wActFlag & 48 ^ var2.wObjFlag & 48;
               int var7;
               int var8;
               if ((var9 & 16) != 0) {
                  var7 = (var2.x >> 16) - var2.hit[var5 * 5 + 1];
                  var8 = var7 - var2.hit[var5 * 5 + 3];
               } else {
                  var8 = var2.hit[var5 * 5 + 1] + (var2.x >> 16);
                  var7 = var8 + var2.hit[var5 * 5 + 3];
               }

               int var10;
               if ((var9 & 32) != 0) {
                  var9 = (var2.y >> 16) - var2.hit[var5 * 5 + 2];
                  var10 = var9 - var2.hit[var5 * 5 + 4];
               } else {
                  var10 = var2.hit[var5 * 5 + 2] + (var2.y >> 16);
                  var9 = var10 + var2.hit[var5 * 5 + 4];
               }

               int var13 = var3.wActFlag & 48 ^ var3.wObjFlag & 48;
               int var11;
               int var12;
               if ((var13 & 16) != 0) {
                  var11 = (var3.x >> 16) - var3.hit[var6 * 5 + 1];
                  var12 = var11 - var3.hit[var6 * 5 + 3];
               } else {
                  var12 = var3.hit[var6 * 5 + 1] + (var3.x >> 16);
                  var11 = var12 + var3.hit[var6 * 5 + 3];
               }

               int var14;
               if ((var13 & 32) != 0) {
                  var14 = (var3.y >> 16) - var3.hit[var6 * 5 + 2];
                  var13 = var14 - var3.hit[var6 * 5 + 4];
               } else {
                  var13 = var3.hit[var6 * 5 + 2] + (var3.y >> 16);
                  var14 = var13 + var3.hit[var6 * 5 + 4];
               }

               if (var8 < var11 && var12 < var7 && var10 < var14 && var13 < var9) {
                  iHitXPos = ((var7 - var8) / 2 + var8 + var12 + (var11 - var12) / 2) / 2 << 16;
                  iHitYPos = ((var9 - var10) / 2 + var10 + var13 + (var14 - var13) / 2) / 2 << 16;
                  var15 = (short)((var2.hit[var5 * 5 + 0] & 255) << 8 | var3.hit[var6 * 5 + 0] & 255);
                  return var15;
               }
            }
         }
      }

      var15 = 0;
      return var15;
   }

   public void CheckOptFlag(GlobalWork var1) {
      int var9 = tcbNow._work[0];
      int var10 = 1 - var9;
      int var12 = objExec.wOptFlag;
      int var6 = objExec.x + iBackXPos + iBackXOffset;
      int var11 = objExec.y;
      int var8 = iBackYPos;
      if (bGameStart) {
         int var2;
         int var3;
         int var4;
         int var5;
         int[] var13;
         ObjReq var17;
         if (var12 != 0) {
            byte var7 = 0;
            var3 = 0;
            var4 = var6;
            if ((var12 & 1024) != 0) {
               var13 = PlayerState;
               var13[var9] |= 1;
            }

            if ((var12 & 4096) != 0) {
               var3 = 0 | 1;
            }

            var2 = var3;
            if ((var12 & 8192) != 0) {
               var2 = var3 | 2;
            }

            var3 = var2;
            if ((var12 & 16384) != 0) {
               var3 = var2 | 4;
            }

            var5 = var3;
            if (('耀' & var12) != 0) {
               var5 = var3 | 8;
            }

            var2 = var7;
            byte var15;
            if ((var12 & 2048) != 0) {
               if (!DamageWall[var9]) {
                  return;
               }

               if (PlayerXPos[var9] <= iBackXPos + iBackXOffset + 15728640) {
                  var2 = iBackXPos + iBackXOffset;
               } else {
                  var2 = iBackXPos + iBackXOffset + 31391744;
               }

               var15 = 12;
               CancelTime[1 - var9] = 0;
               iReqSENo = 6;
               this.PushSE(var1, 6);
               var4 = var2;
               var2 = var15;
            }

            if (var5 != 0 || var2 != 0) {
               iSmokeEffectNumber = (iSmokeEffectNumber + 1) % 6;
               var3 = iSmokeEffectNumber + 13599;
               this._TKilx(var1, var3, var3);
               TCB var14 = this._TaskMake(var1, 961, var3);
               if (var2 != 0) {
                  var14._work[6] = 2;
               } else if (var5 < 8) {
                  if (var5 >= 6) {
                     var14._work[6] = 5;
                     var2 = var5 + 78 - 6;
                  } else {
                     var14._work[6] = 2;
                     var2 = var5 + 10 - 1;
                  }
               } else {
                  var14._work[6] = 5;
                  var2 = var5 + 70 - 8;
               }

               var13 = var14._work;
               if ((objExec.wObjFlag & 16) != 0) {
                  var15 = 80;
               } else {
                  var15 = 0;
               }

               var13[0] = var15 + var2;
               var14._work[3] = var4;
               var14._work[4] = objExec.y + iBackYPos;
               var14._work[5] = objExec.wObjFlag & 16;
            }

            var17 = objExec;
            var17.wOptFlag &= 1792;
         }

         var3 = 0;

         for(var2 = 0; var3 < objExec.iHitNum; var2 += 5) {
            var5 = objExec.hit[var2 + 0];
            int var16;
            if (var5 == 30) {
               var16 = objExec.x;
               if ((objExec.wObjFlag & 16) == 0) {
                  var4 = objExec.hit[var2 + 1];
               } else {
                  var4 = -objExec.hit[var2 + 1];
               }

               iActionZoomX = var16 + (var4 << 16);
               iActionZoomY = objExec.y + (objExec.hit[var2 + 2] << 16);
               iActionZoomW = objExec.hit[var2 + 3];
               iActionZoomH = objExec.hit[var2 + 3];
               iActionZoomFrame = objExec.hit[var2 + 4];
            }

            if (var5 == 31) {
               var16 = objExec.x;
               if ((objExec.wObjFlag & 16) == 0) {
                  var4 = objExec.hit[var2 + 1];
               } else {
                  var4 = -objExec.hit[var2 + 1];
               }

               iActionZoomX = var16 + (var4 << 16);
               iActionZoomY = objExec.y + (objExec.hit[var2 + 2] << 16);
               iActionZoomW = objExec.hit[var2 + 3];
               iActionZoomH = objExec.hit[var2 + 3];
               iActionZoomFrame = objExec.hit[var2 + 4];
            }

            if (var5 == 27) {
               var13 = PlayerState;
               var13[var9] |= 524288;
            }

            if (var5 == 26) {
               var13 = PlayerState;
               var13[var9] |= 2;
            }

            if (var5 == 28) {
               var13 = PlayerState;
               var13[var9] |= 262144;
            }

            if (var5 == 32) {
               var13 = PlayerState;
               var13[var9] |= 1048576;
            }

            if (var5 == 37) {
               var13 = PlayerState;
               var13[var9] |= 4194304;
            }

            if (var5 == 38) {
               var13 = PlayerState;
               var13[var9] |= 8388608;
            }

            if (var5 == 33) {
               var13 = PlayerState;
               var13[var9] |= 2097152;
            }

            label149: {
               if (var5 == 20) {
                  TCB var19 = this._TaskMake(var1, 996, 13729);
                  var19._work[0] = var9;
                  var19._work[1] = objExec.hit[var2 + 3];
                  var19._work[2] = tcbNow.obj.ano;
                  var19._work[3] = tcbNow.obj.pat;
                  var19._work[4] = 0;
                  int[] var18 = var19._work;
                  if ((objExec.wObjFlag & 16) == 0) {
                     var4 = objExec.hit[var2 + 1];
                  } else {
                     var4 = -objExec.hit[var2 + 1];
                  }

                  var18[5] = (var4 << 16) + var6;
                  var19._work[6] = (objExec.hit[var2 + 2] << 16) + var11 + var8;
                  var18 = var19._work;
                  if ((objExec.wObjFlag & 16) == 0) {
                     var4 = objExec.hit[var2 + 1];
                  } else {
                     var4 = -objExec.hit[var2 + 1];
                  }

                  var18[7] = var4 << 16;
                  var19._work[8] = objExec.hit[var2 + 2] << 16;
                  var19._work[9] = objExec.wObjFlag & 16;
                  var19._work[10] = iBackXPos;
                  var19._work[11] = iBackYPos;
                  var19.ptr = tcbNow;
               } else if (var5 == 34) {
                  this.LIFE_ADD(var1, var9, objExec.OptData[0]);
               } else if (var5 == 39) {
                  if (Life[var10] > 0) {
                     PlayerXPos[var9] = PlayerXPos[var10];
                     PlayerYPos[var9] = PlayerYPos[var10];
                  } else {
                     var17 = objExec;
                     var17.wActFlag |= 2;
                  }
               } else if (var5 == 40) {
                  if (Life[var10] > 0) {
                     var13 = PlayerXPos;
                     var5 = PlayerXPos[var9];
                     if ((objExec.wObjFlag & 16) == 0) {
                        var4 = objExec.hit[var2 + 1];
                     } else {
                        var4 = -objExec.hit[var2 + 1];
                     }

                     var13[var10] = var5 + (var4 << 16);
                     PlayerYPos[var10] = PlayerYPos[var9] + (objExec.hit[var2 + 2] << 16);
                  } else {
                     var17 = objExec;
                     var17.wActFlag |= 2;
                  }
               } else {
                  if (var5 < 3 || var5 > 5) {
                     break label149;
                  }

                  iBackShakeType = var5 - 3;
                  iBackShake = 12;
               }

               objExec.hit[var2 + 0] = -1;
            }

            ++var3;
         }
      }

   }

   public boolean CheckRightBtn(GlobalWork var1, int var2, int var3, int var4) {
      boolean var5;
      if (var2 > 410 && var2 < 480 && var3 > 0 && var3 < 40 && var4 != 0) {
         var5 = true;
      } else {
         var5 = false;
      }

      return var5;
   }

   void ChrSePlay(GlobalWork var1, int var2) {
      if (objExec != null && objExec.se >= 0) {
         if (var2 == 1) {
            ObjReq var3 = objExec;
            var3.se += this.ChrSoundCount[3];
         }

         iReqSENo = objExec.se;
         this.PushSE(var1, objExec.se);
         objExec.se = -1;
      }

   }

   void ClearCharDL(GlobalWork var1, int var2) {
      ConfigData[var2 * 100 + 30 + 2] = 0;
      ConfigData[var2 * 100 + 30 + 3] = 0;
      this._FILESave(var1);
   }

   void ClearCharDLALL(GlobalWork var1) {
      for(int var2 = 0; var2 < 90; ++var2) {
         ConfigData[var2 * 100 + 30 + 2] = 0;
         ConfigData[var2 * 100 + 30 + 3] = 0;
      }

      this._FILESave(var1);
   }

   public void ClearDLInit(GlobalWork var1) {
      if (ConfigData[1] != 0) {
         ConfigData[1] = 0;
         this._FILESave(var1);
      }

   }

   public int CmdCheck(GlobalWork var1, int var2) {
      byte var7 = 0;
      byte var8 = 0;
      int var3 = 100;
      int var4 = 200;
      int var6 = var7;
      int var5 = var8;
      if (objExec.ano >= 40) {
         var6 = var7;
         var5 = var8;
         if (objExec.ano < 89) {
            var6 = 0 + 100;
            var5 = 0 + 100;
         }
      }

      if (SynchroPowerUp[var2] == 3 || SynchroPowerUp[var2] == 5) {
         var3 = 100 / 2;
      }

      if (SynchroPowerUp[var2] == 4 || SynchroPowerUp[var2] == 5) {
         var4 = 200 / 2;
      }

      int var23 = var3;
      int var22 = var4;
      if ((iBackMode & 1 << var2) != 0) {
         var23 = var3 + 100;
         var22 = var4 + 100;
      }

      byte var19;
      if (iTimer == 0) {
         var19 = 0;
      } else {
         short var9;
         byte var10;
         short var11;
         byte var12;
         byte var13;
         short var14;
         byte var20;
         short var21;
         if ((objExec.wObjFlag & 16) == 0) {
            var10 = 8;
            var11 = 512;
            var12 = 64;
            var9 = 4096;
            var13 = 4;
            var14 = 128;
            var20 = 16;
            var21 = 1024;
         } else {
            var13 = 8;
            var14 = 512;
            var20 = 64;
            var21 = 4096;
            var10 = 4;
            var11 = 128;
            var12 = 16;
            var9 = 1024;
         }

         if (AICtrl[var2]) {
            if (DamageMove[var2] != 0) {
               var19 = 0;
            } else {
               if (objExec.ano >= 40 && objExec.ano < 89) {
                  if (CancelTime[var2] != 1 || Synchro[var2] < var6) {
                     var19 = 0;
                     return var19;
                  }

                  if (CPURand[var2] % 100 > this.pGameData.piGameData[this.pGameData.piGameDataPos[3] + this.pGameData.piGameDataXSize[3] * 2 + CPULevel[var2]]) {
                     var19 = 0;
                     return var19;
                  }
               }

               if ((PlayerKey[var2] & 131072) != 0) {
                  var19 = 15;
               } else if ((PlayerKey[var2] & 262144) != 0) {
                  var19 = 16;
               } else if ((PlayerKey[var2] & 2048) != 0) {
                  AngryOn[var2] = true;
                  var19 = 4;
               } else if ((PlayerKey[var2] & 1073741824) != 0) {
                  var19 = 23;
               } else {
                  if ((PlayerKey[var2] & '耀') != 0) {
                     if ((PlayerKey[var2] & 12) != 0) {
                        if (((PlayerKey[var2] & 8) == 0 || (objExec.wObjFlag & 16) != 0) && ((PlayerKey[var2] & 4) == 0 || (objExec.wObjFlag & 16) == 0)) {
                           var19 = 19;
                        } else {
                           var19 = 18;
                        }

                        return var19;
                     }

                     if (Synchro[var2] >= var6 && (PlayerYPos[var2] == 15728640 && (PlayerState[var2] & 32) != 0 || PlayerYPos[var2] != 15728640 && (PlayerState[var2] & 8192) != 0)) {
                        if ((PlayerYPos[var2] != 15728640 || (PlayerArtsSeal[var2] & 32) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerArtsSeal[var2] & 8192) == 0)) {
                           var19 = 1;
                           return var19;
                        }

                        var19 = 22;
                        return var19;
                     }
                  }

                  if ((PlayerKey[var2] & 256) == 0 || Synchro[var2] < var5 || (PlayerYPos[var2] != 15728640 || (PlayerState[var2] & 64) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerState[var2] & 16384) == 0)) {
                     if ((PlayerKey[var2] & 524288) == 0 || Synchro[var2] < var5 || (PlayerYPos[var2] != 15728640 || (PlayerState[var2] & 128) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerState[var2] & '耀') == 0)) {
                        if ((PlayerKey[var2] & 8192) != 0) {
                           if ((PlayerKey[var2] & 4) != 0) {
                              if (Synchro[var2] >= var6) {
                                 var19 = 6;
                                 return var19;
                              }
                           } else {
                              if ((PlayerKey[var2] & 8) == 0) {
                                 var19 = 5;
                                 return var19;
                              }

                              if (Synchro[var2] >= var6) {
                                 var19 = 7;
                                 return var19;
                              }
                           }
                        }

                        if ((PlayerKey[var2] & 65536) != 0) {
                           if ((PlayerKey[var2] & 3) != 0) {
                              var19 = 18;
                              return var19;
                           }

                           if ((PlayerKey[var2] & 8) == 0) {
                              if (Synchro[var2] >= var23 && (iBackMode & 1 << var2) == 0 && (PlayerYPos[var2] == 15728640 && (PlayerState[var2] & 256) != 0 || PlayerYPos[var2] != 15728640 && (PlayerState[var2] & 65536) != 0)) {
                                 if ((PlayerYPos[var2] != 15728640 || (PlayerArtsSeal[var2] & 256) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerArtsSeal[var2] & 65536) == 0)) {
                                    var19 = 8;
                                 } else {
                                    var19 = 22;
                                 }

                                 return var19;
                              }
                           } else if ((PlayerYPos[var2] == 15728640 && (PlayerState[var2] & 512) != 0 || PlayerYPos[var2] != 15728640 && (PlayerState[var2] & 131072) != 0) && Synchro[var2] >= var22 && (PlayerYPos[var2] == 15728640 && (PlayerState[var2] & 256) != 0 || PlayerYPos[var2] != 15728640 && (PlayerState[var2] & 65536) != 0)) {
                              if ((PlayerYPos[var2] != 15728640 || (PlayerArtsSeal[var2] & 512) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerArtsSeal[var2] & 131072) == 0)) {
                                 var19 = 9;
                                 return var19;
                              }

                              var19 = 22;
                              return var19;
                           }
                        }

                        if ((PlayerKey[var2] & 16384) != 0) {
                           if ((PlayerKey[var2] & 7170) != 0 && (PlayerYPos[var2] == 15728640 && (PlayerState[var2] & 16) != 0 || PlayerYPos[var2] != 15728640 && (PlayerState[var2] & 4096) != 0)) {
                              if ((PlayerYPos[var2] != 15728640 || (PlayerArtsSeal[var2] & 16) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerArtsSeal[var2] & 4096) == 0)) {
                                 var19 = 17;
                              } else {
                                 var19 = 22;
                              }
                           } else if ((PlayerKey[var2] & (var13 | var14)) != 0 && (PlayerYPos[var2] == 15728640 && (PlayerState[var2] & 8) != 0 || PlayerYPos[var2] != 15728640 && (PlayerState[var2] & 2048) != 0)) {
                              if ((PlayerYPos[var2] != 15728640 || (PlayerArtsSeal[var2] & 8) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerArtsSeal[var2] & 2048) == 0)) {
                                 var19 = 13;
                              } else {
                                 var19 = 22;
                              }
                           } else if ((PlayerKey[var2] & (var10 | var11)) == 0 || (PlayerYPos[var2] != 15728640 || (PlayerState[var2] & 4) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerState[var2] & 1024) == 0)) {
                              var19 = 12;
                           } else if ((PlayerYPos[var2] != 15728640 || (PlayerArtsSeal[var2] & 4) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerArtsSeal[var2] & 1024) == 0)) {
                              var19 = 11;
                           } else {
                              var19 = 22;
                           }
                        } else {
                           var19 = 0;
                        }
                     } else if ((PlayerYPos[var2] != 15728640 || (PlayerArtsSeal[var2] & 128) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerArtsSeal[var2] & '耀') == 0)) {
                        var19 = 3;
                     } else {
                        var19 = 22;
                     }
                  } else if ((PlayerYPos[var2] != 15728640 || (PlayerArtsSeal[var2] & 64) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerArtsSeal[var2] & 16384) == 0)) {
                     var19 = 2;
                  } else {
                     var19 = 22;
                  }
               }
            }
         } else {
            int var15;
            int var16;
            int var17;
            int var18;
            if (KeyBufTime[var2][0] + KeyBufTime[var2][1] + KeyBufTime[var2][2] >= 60) {
               var16 = 0;
               var15 = 0;
               var17 = 0;
               var18 = 0;
            } else {
               var16 = KeyBuf[var2][0];
               var15 = KeyBuf[var2][1];
               var17 = KeyBuf[var2][2];
               var18 = KeyBuf[var2][3];
            }

            if ((JoyTrig[var2] & 670056704) == 0) {
               if ((PlayerKey[var2] & 268435456) != 0) {
                  var19 = 18;
               } else if ((PlayerKey[var2] & 134217728) != 0) {
                  var19 = 19;
               } else {
                  if (var10 == 8) {
                     var3 = Dash[var2];
                  } else {
                     var3 = -Dash[var2];
                  }

                  if (var3 >= 2) {
                     Dash[var2] = 0;
                     var19 = 15;
                  } else if (var3 <= -2) {
                     Dash[var2] = 0;
                     var19 = 16;
                  } else {
                     var19 = 0;
                  }
               }
            } else if ((((var16 & var10) == var10 || (var16 & var11) == var11) && ((var17 & var10) == var10 || (var17 & var11) == var11) && ((var15 & var13) == var13 || (var15 & var14) == var14) || (67108864 & var16) != 0) && Synchro[var2] >= var6) {
               if ((objExec.wObjFlag & 16) == 0) {
                  var19 = 7;
               } else {
                  var19 = 6;
               }
            } else if ((((var16 & var13) == var13 || (var16 & var14) == var14) && ((var17 & var13) == var13 || (var17 & var14) == var14) && ((var15 & var10) == var10 || (var15 & var11) == var11) || (33554432 & var16) != 0) && Synchro[var2] >= var6) {
               if ((objExec.wObjFlag & 16) == 0) {
                  var19 = 6;
               } else {
                  var19 = 7;
               }
            } else if (((var16 & 2) == 2 || (var16 & 2048) == 2048 || (2097152 & var16) != 0) && (((var17 & var10) == var10 || (var17 & var11) == var11) && (var17 & 33) == 0 || ((var15 & var10) == var10 || (var15 & var11) == var11) && (var15 & 33) == 0 && ((var10 | var11) & var17) == 0 || (2097152 & var16) != 0) && (PlayerYPos[var2] == 15728640 && (PlayerState[var2] & 64) != 0 || PlayerYPos[var2] != 15728640 && (PlayerState[var2] & 16384) != 0) && Synchro[var2] >= var5) {
               this.CmdClear(var1, var2);
               if ((PlayerYPos[var2] != 15728640 || (PlayerArtsSeal[var2] & 64) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerArtsSeal[var2] & 16384) == 0)) {
                  var19 = 2;
               } else {
                  var19 = 22;
               }
            } else if ((((var16 & var10) == var10 || (var16 & var11) == var11) && (var16 & 33) == 0 && (var15 == var13 || var15 == var14) || (8388608 & var16) != 0) && (var17 == 2 || var17 == 2048 || (8388608 & var16) != 0) && Synchro[var2] >= var23 && (PlayerYPos[var2] == 15728640 && (PlayerState[var2] & 256) != 0 || PlayerYPos[var2] != 15728640 && (PlayerState[var2] & 65536) != 0)) {
               this.CmdClear(var1, var2);
               if ((PlayerYPos[var2] != 15728640 || (PlayerArtsSeal[var2] & 256) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerArtsSeal[var2] & 65536) == 0)) {
                  var19 = 8;
               } else {
                  var19 = 22;
               }
            } else if ((536870912 & var16) != 0 && !AngryOn[var2] && Angry[var2] >= 100) {
               var19 = 4;
            } else if ((1073741824 & var16) != 0) {
               var19 = 23;
            } else if ((((var16 & var10) == var10 || (var16 & var11) == var11) && (var16 & 33) == 0 && (var15 == 2 || var15 == 2048) || (1048576 & var16) != 0) && (PlayerYPos[var2] == 15728640 && (PlayerState[var2] & 32) != 0 || PlayerYPos[var2] != 15728640 && (PlayerState[var2] & 8192) != 0) && Synchro[var2] >= var6) {
               this.CmdClear(var1, var2);
               if (PlayerYPos[var2] == 15728640 && (PlayerArtsSeal[var2] & 32) != 0 || PlayerYPos[var2] != 15728640 && (PlayerArtsSeal[var2] & 8192) != 0) {
                  var19 = 22;
               } else {
                  var19 = 1;
               }
            } else if (var15 == 1073741824) {
               var19 = 23;
            } else {
               if (((var16 & var13) == var13 || (var16 & var14) == var14) && (var15 == 2 || var15 == 2048) || (20971520 & var16) != 0) {
                  if ((((var17 & var13) == var13 || (var17 & var14) == var14) && (var18 == 2 || var18 == 2048) || (16777216 & var16) != 0) && (PlayerYPos[var2] == 15728640 && (PlayerState[var2] & 512) != 0 || PlayerYPos[var2] != 15728640 && (PlayerState[var2] & 131072) != 0) && Synchro[var2] >= var22 && (PlayerYPos[var2] == 15728640 && (PlayerState[var2] & 256) != 0 || PlayerYPos[var2] != 15728640 && (PlayerState[var2] & 65536) != 0)) {
                     this.CmdClear(var1, var2);
                     if (PlayerYPos[var2] == 15728640 && (PlayerArtsSeal[var2] & 512) != 0 || PlayerYPos[var2] != 15728640 && (PlayerArtsSeal[var2] & 131072) != 0) {
                        var19 = 22;
                        return var19;
                     } else {
                        if (!AngryOn[var2]) {
                           var19 = 0;
                        } else {
                           var19 = 9;
                        }

                        return var19;
                     }
                  }

                  if ((PlayerYPos[var2] == 15728640 && (PlayerState[var2] & 128) != 0 || PlayerYPos[var2] != 15728640 && (PlayerState[var2] & '耀') != 0) && Synchro[var2] >= var5) {
                     this.CmdClear(var1, var2);
                     if ((PlayerYPos[var2] != 15728640 || (PlayerArtsSeal[var2] & 128) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerArtsSeal[var2] & '耀') == 0)) {
                        var19 = 3;
                     } else {
                        var19 = 22;
                     }

                     return var19;
                  }
               }

               this.CmdClear(var1, var2);
               if ((PlayerKey[var2] & (var13 | var14 | var20 | var21)) == 0 || (PlayerYPos[var2] != 15728640 || (PlayerState[var2] & 8) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerState[var2] & 2048) == 0)) {
                  if ((PlayerKey[var2] & 7170) != 0 && (PlayerYPos[var2] == 15728640 && (PlayerState[var2] & 16) != 0 || PlayerYPos[var2] != 15728640 && (PlayerState[var2] & 4096) != 0)) {
                     if ((PlayerYPos[var2] != 15728640 || (PlayerArtsSeal[var2] & 16) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerArtsSeal[var2] & 4096) == 0)) {
                        var19 = 17;
                     } else {
                        var19 = 22;
                     }
                  } else if ((PlayerKey[var2] & (var10 | var11 | var12 | var9)) != 0 && (PlayerYPos[var2] == 15728640 && (PlayerState[var2] & 4) != 0 || PlayerYPos[var2] != 15728640 && (PlayerState[var2] & 1024) != 0)) {
                     if ((PlayerYPos[var2] != 15728640 || (PlayerArtsSeal[var2] & 4) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerArtsSeal[var2] & 1024) == 0)) {
                        var19 = 11;
                     } else {
                        var19 = 22;
                     }
                  } else if ((JoyTrig[var2] & 16640) != 0) {
                     var19 = 12;
                  } else {
                     var19 = 0;
                  }
               } else if ((PlayerYPos[var2] != 15728640 || (PlayerArtsSeal[var2] & 8) == 0) && (PlayerYPos[var2] == 15728640 || (PlayerArtsSeal[var2] & 2048) == 0)) {
                  var19 = 13;
               } else {
                  var19 = 22;
               }
            }
         }
      }

      return var19;
   }

   public void CmdClear(GlobalWork var1, int var2) {
      for(int var3 = 0; var3 < 4; ++var3) {
         KeyBuf[var2][var3] = 0;
         KeyBufTime[var2][var3] = 0;
      }

      Dash[var2] = 0;
      Footwork[var2] = 0;
   }

   public boolean CommonNormal(GlobalWork var1, boolean var2, boolean var3, boolean var4, boolean var5, boolean var6) {
      int var10 = tcbNow._work[0];
      int var11 = 1 - var10;
      int var8 = KeyBuf[var10][0];
      int var7 = KeyBuf[var10][1];
      if (Life[var11] <= 0) {
         var2 = false;
      } else {
         var3 = var5;
         if (tcbPlayer[var11].md >= 911) {
            var3 = var5;
            if (tcbPlayer[var11].md <= 915) {
               var3 = false;
            }
         }

         int var12;
         ObjReq var14;
         if (var3) {
            var12 = this.ChrGameData[var10 + 3].piGameData[this.ChrGameData[var10 + 3].piGameDataPos[3] + this.ChrGameData[var10 + 3].piGameDataXSize[3] * 0 + 3] / 2 << 16;
            int var13 = iBackXPos;
            int var9 = iBackXPos;
            if ((PlayerXPos[var10] > var13 + var12 || (tcbPlayer[var10].obj.wObjFlag & 16) != 0) && (PlayerXPos[var10] < var9 + 31391744 - var12 || (tcbPlayer[var10].obj.wObjFlag & 16) == 0) && PlayerXPos[var10] >> 16 != PlayerXPos[var11] >> 16) {
               if (PlayerXPos[var10] > PlayerXPos[var11]) {
                  var14 = objExec;
                  var14.wObjFlag |= 16;
               } else {
                  var14 = objExec;
                  var14.wObjFlag &= -17;
               }
            }
         }

         var12 = this.CmdCheck(var1, var10);
         int[] var19 = PlayerAttackFlag;
         var19[var10] |= 1 << var12;
         byte var15;
         if (var4) {
            label634: {
               if ((var12 == 18 || var12 == 19) && tcbPlayer[var10].md != 897) {
                  this.AttackEnd(var1);
                  Dash[var10] = 0;
                  if (!AirType[var10]) {
                     PlayerYPos[var10] = 15728640;
                  }

                  var8 = objExec.acttype;
                  if (var12 == 18) {
                     var15 = 2;
                  } else {
                     var15 = 3;
                  }

                  this._SetAct(var1, var8, var15);
                  iReqSENo = 15;
                  this.PushSE(var1, 15);
                  tcbNow.md = 897;
                  tcbNow.lp = 0;
                  JoyTrig[var10] = 0;
                  this.CmdClear(var1, var10);
                  this.Game(var1, tcbNow.md);
                  var2 = true;
                  return var2;
               }

               if (var12 != 15 && var12 != 16) {
                  if (!AirType[var10]) {
                     break label634;
                  }

                  if (PlayerYPos[var10] != 15728640 && (((var8 & 2) == 2 || (var8 & 2048) == 2048) && ((var7 & 2) == 2 || (var7 & 2048) == 2048) && !AICtrl[var10] || PlayerKey[var10] == 32770 && AICtrl[var10])) {
                     tcbNow.md = 981;
                     tcbNow.lp = 0;
                     this.Game(var1, tcbNow.md);
                     var2 = true;
                     return var2;
                  }

                  if (((var8 & 1) != 1 && (var8 & 32) != 32 || (var7 & 1) != 1 && (var7 & 32) != 32 || AICtrl[var10]) && (PlayerKey[var10] != 32769 || !AICtrl[var10])) {
                     break label634;
                  }

                  tcbNow.md = 980;
                  tcbNow.lp = 0;
                  this.Game(var1, tcbNow.md);
                  var2 = true;
                  return var2;
               }

               this.AttackEnd(var1);
               Dash[var10] = 0;
               if (!AirType[var10]) {
                  PlayerYPos[var10] = 15728640;
               }

               if (PlayerYPos[var10] != 15728640) {
                  var8 = objExec.acttype;
                  if (var12 == 15) {
                     var15 = 8;
                  } else {
                     var15 = 9;
                  }

                  this._SetAct(var1, var8, var15);
               } else {
                  var8 = objExec.acttype;
                  if (var12 == 15) {
                     var15 = 6;
                  } else {
                     var15 = 7;
                  }

                  this._SetAct(var1, var8, var15);
               }

               JoyTrig[var10] = 0;
               this.CmdClear(var1, var10);
               tcbNow.md = 891;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
               var2 = true;
               return var2;
            }
         }

         if (var6) {
            if (Angry[var10] == 100) {
               for(var7 = 0; var7 < 5; ++var7) {
                  if (TouchesStatus[var7] != 0) {
                     short var16;
                     short var17;
                     if (var10 == 0) {
                        var17 = 0;
                        var16 = 90;
                     } else {
                        var17 = 390;
                        var16 = 480;
                     }

                     if (TouchesYPos[var7] < 90 && TouchesXPos[var7] >= var17 && TouchesXPos[var7] <= var16) {
                     }
                  }
               }
            }

            if (var12 == 22) {
               this._SetAct(var1, objExec.acttype, this.ChrGameData[var10 + 3].piGameData[this.ChrGameData[var10 + 3].piGameDataPos[3] + this.ChrGameData[var10 + 3].piGameDataXSize[3] * 0 + 16]);
               this._ActReq(var1);
               this.ChrSePlay(var1, var10);
               tcbNow.md = 894;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
               var2 = true;
               return var2;
            }

            if (var12 == 5 && Synchro[var10] < SynchroMax[var10]) {
               tcbNow.md = 901;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
               var2 = true;
               return var2;
            }

            if (var12 == 6) {
               SpecialType[var10] = 18;
               tcbNow.md = 880;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
               var2 = true;
               return var2;
            }

            if (var12 == 7) {
               SpecialType[var10] = 19;
               tcbNow.md = 880;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
               var2 = true;
               return var2;
            }

            if (var12 >= 1 && var12 <= 4 || var12 == 23) {
               if (PlayerXPos[var10] != PlayerXPos[var11]) {
                  if (PlayerXPos[var10] > PlayerXPos[var11]) {
                     var14 = objExec;
                     var14.wObjFlag |= 16;
                  } else {
                     var14 = objExec;
                     var14.wObjFlag &= -17;
                  }
               }

               tcbNow.md = 880;
               tcbNow.lp = 0;
               if (var12 == 1) {
                  if (PlayerYPos[var10] == 15728640) {
                     SpecialType[var10] = 0;
                  } else if (PlayerAir[var10]) {
                     SpecialType[var10] = 6;
                  } else {
                     SpecialType[var10] = 3;
                  }
               } else if (var12 == 2) {
                  if (PlayerYPos[var10] == 15728640) {
                     SpecialType[var10] = 1;
                  } else if (PlayerAir[var10]) {
                     SpecialType[var10] = 7;
                  } else {
                     SpecialType[var10] = 4;
                  }
               } else if (var12 == 3) {
                  if (PlayerYPos[var10] == 15728640) {
                     SpecialType[var10] = 2;
                  } else if (PlayerAir[var10]) {
                     SpecialType[var10] = 8;
                  } else {
                     SpecialType[var10] = 5;
                  }
               } else if (var12 == 4) {
                  if (PlayerYPos[var10] == 15728640) {
                     SpecialType[var10] = 14;
                  } else if (PlayerAir[var10]) {
                     SpecialType[var10] = 15;
                  } else {
                     SpecialType[var10] = 14;
                  }
               } else if (var12 == 23) {
                  if (PlayerYPos[var10] == 15728640) {
                     SpecialType[var10] = 16;
                  } else {
                     SpecialType[var10] = 17;
                  }
               }

               this.Game(var1, tcbNow.md);
               var2 = true;
               return var2;
            }

            if (var12 == 9) {
               if (PlayerYPos[var10] != 15728640 && !PlayerAir[var10]) {
                  SpecialType[var10] = 12;
               } else {
                  SpecialType[var10] = 11;
               }

               tcbNow.md = 923;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
               var2 = true;
               return var2;
            }

            if (var12 == 8) {
               if (PlayerYPos[var10] != 15728640 && !PlayerAir[var10]) {
                  SpecialType[var10] = 10;
               } else {
                  SpecialType[var10] = 9;
               }

               tcbNow.md = 923;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
               var2 = true;
               return var2;
            }

            if (PlayerAttack[var10] == 0) {
               if (var12 == 11 || var12 == 17 || var12 == 13) {
                  if (PlayerXPos[var10] != PlayerXPos[var11] && (PlayerAir[var10] || PlayerYPos[var10] == 15728640)) {
                     if (PlayerXPos[var10] > PlayerXPos[var11]) {
                        var14 = objExec;
                        var14.wObjFlag |= 16;
                     } else {
                        var14 = objExec;
                        var14.wObjFlag &= -17;
                     }
                  }

                  iReqSENo = 2;
                  this.PushSE(var1, 2);
                  PlayerAttack[var10] = 1;
                  PlayerHitStop[var10] = 6;
                  DamageHitBack[var10] = 0;
                  GuardHitBack[var10] = 13;
                  SpecialKind[var10] = 0;
                  SpecialType[var10] = 0;
                  PlayerSearch[var10] = false;
                  if (PlayerYPos[var10] != 15728640 && !PlayerAir[var10]) {
                     tcbNow.md = 886;
                     tcbNow.lp = 0;
                     if (var12 == 17) {
                        var15 = 38;
                     } else if (var12 == 13) {
                        var15 = 39;
                     } else {
                        var15 = 35;
                     }
                  } else {
                     tcbNow.md = 878;
                     tcbNow.lp = 0;
                     if (objExec.ano != 6 && objExec.ano != 8) {
                        if (var12 == 17) {
                           var15 = 36;
                        } else if (var12 == 13) {
                           var15 = 37;
                        } else {
                           var15 = 31;
                        }
                     } else {
                        var15 = 29;
                     }
                  }

                  this._SetAct(var1, objExec.acttype, var15);
                  this._SetObj(var1, var10 * 4 + 150);
                  this.Game(var1, tcbNow.md);
                  var2 = true;
                  return var2;
               }

               if (var12 == 12) {
                  iReqSENo = 2;
                  this.PushSE(var1, 2);
                  PlayerAttack[var10] = 1;
                  PlayerHitStop[var10] = 6;
                  DamageHitBack[var10] = 0;
                  GuardHitBack[var10] = 13;
                  SpecialKind[var10] = 0;
                  SpecialType[var10] = 0;
                  PlayerSearch[var10] = false;
                  if (objExec.ano == 8) {
                     var15 = 29;
                  } else if (objExec.ano == 6) {
                     var15 = 29;
                     tcbNow.md = 878;
                     tcbNow.lp = 0;
                  } else if (PlayerYPos[var10] != 15728640 && !PlayerAir[var10]) {
                     var15 = 34;
                     tcbNow.md = 886;
                     tcbNow.lp = 0;
                  } else {
                     if (PlayerXPos[var10] != PlayerXPos[var11]) {
                        if (PlayerXPos[var10] > PlayerXPos[var11]) {
                           var14 = objExec;
                           var14.wObjFlag |= 16;
                        } else {
                           var14 = objExec;
                           var14.wObjFlag &= -17;
                        }
                     }

                     tcbNow.md = 878;
                     tcbNow.lp = 0;
                     var15 = 30;
                  }

                  TargetXPos[var10] = PlayerXPos[var11];
                  TargetYPos[var10] = PlayerYPos[var11];
                  this._SetAct(var1, objExec.acttype, var15);
                  this._ActReq(var1);
                  this.ChrSePlay(var1, var10);
                  this._SetObj(var1, var10 * 4 + 150);
                  this.Game(var1, tcbNow.md);
                  var2 = true;
                  return var2;
               }
            }
         }

         byte var18;
         if (var2) {
            var18 = 0;
            if (PlayerYPos[var10] != 15728640 && Math.abs(objExec.iYSpeed) < 131072 && (JoyTrig[var10] == 1 || JoyTrig[var10] == 32) && objExec.ano >= 10 && objExec.ano <= 12 && AirType[var10]) {
               PlayerAir[var10] = true;
               this.AttackEnd(var1);
               tcbNow.md = 864;
               tcbNow.lp = 0;
               var2 = true;
               return var2;
            }

            if (PlayerYPos[var10] <= 15728640 - (this.ChrGameData[var10 + 3].piGameData[this.ChrGameData[var10 + 3].piGameDataPos[3] + this.ChrGameData[var10 + 3].piGameDataXSize[3] * 0 + 4] << 16) && ((JoyTrig[var10] & 1) == 1 || (JoyTrig[var10] & 32) == 32 || (JoyTrig[var10] & 16) == 16 || (JoyTrig[var10] & 64) == 64) && objExec.ano <= 12 && (objExec.ano < 16 || objExec.ano > 18) && !AirType[var10]) {
               if ((PlayerKey[var10] & 72) != 0) {
                  if ((objExec.wObjFlag & 16) != 0) {
                     var15 = 18;
                  } else {
                     var15 = 17;
                  }
               } else if ((PlayerKey[var10] & 20) != 0) {
                  if ((objExec.wObjFlag & 16) != 0) {
                     var15 = 17;
                  } else {
                     var15 = 18;
                  }
               } else {
                  var15 = 16;
               }
            } else {
               var15 = var18;
               if (tcbNow.md != 886) {
                  if ((PlayerKey[var10] & 9) != 9 && (PlayerKey[var10] & 64) == 0) {
                     if ((PlayerKey[var10] & 5) != 5 && (PlayerKey[var10] & 16) == 0) {
                        var15 = var18;
                        if ((PlayerKey[var10] & 33) != 0) {
                           var15 = 10;
                        }
                     } else if ((objExec.wObjFlag & 16) != 0) {
                        var15 = 11;
                     } else {
                        var15 = 12;
                     }
                  } else if ((objExec.wObjFlag & 16) != 0) {
                     var15 = 12;
                  } else {
                     var15 = 11;
                  }
               }
            }

            if (var15 != 0) {
               this._SetAct(var1, objExec.acttype, var15);
               this._ActReq(var1);
               this.ChrSePlay(var1, var10);
               this.AttackEnd(var1);
               PlayerSearch[var10] = false;
               Footwork[var10] = 0;
               tcbNow.md = 885;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
               var2 = true;
               return var2;
            }
         }

         var7 = objExec.ano;
         if (PlayerAttack[var11] == 0 && BulletNum[var11] == 0 || PlayerAttack[var10] != 0 || (objExec.wObjFlag & 16) == (tcbPlayer[var11].obj.wObjFlag & 16) || var7 == 2 || var7 == 3 || var7 == 6 || var7 == 82 || var7 == 83 || var7 == 8 || var7 == 7 || var7 == 9 || (PlayerState[var11] & 2) != 0 || ((PlayerKey[var10] & 1172) == 0 || (PlayerKey[var10] & 4680) != 0 || PlayerXPos[var10] > PlayerXPos[var11]) && ((PlayerKey[var10] & 4680) == 0 || (PlayerKey[var10] & 1172) != 0 || PlayerXPos[var10] < PlayerXPos[var11])) {
            var2 = false;
         } else {
            if (tcbNow.md != 908) {
               var18 = 0;
               if (this.isMission(var1) == 0) {
                  switch(iStage) {
                  case 0:
                     var15 = 2;
                     break;
                  case 1:
                  case 2:
                     var15 = var18;
                     if (iMarkVisible == 0) {
                        var15 = var18;
                        if (this.RushCheck(var1)) {
                           var15 = var18;
                           if (this.RushGoCheck(var1, var10)) {
                              var15 = 1;
                           }
                        }
                     }
                     break;
                  case 3:
                     var15 = 2;
                     break;
                  default:
                     var15 = var18;
                     if (iMarkVisible == 0) {
                        var15 = var18;
                        if (this.pGameData.piGameData[this.pGameData.piGameDataPos[3] + this.pGameData.piGameDataXSize[3] * 19 + CPULevel[1]] > (int)(this.genrand_int32(var1) % 100L)) {
                           var15 = var18;
                           if (this.RushCheck(var1)) {
                              var15 = var18;
                              if (this.RushGoCheck(var1, var10)) {
                                 var15 = 1;
                              }
                           }
                        }
                     }
                  }
               } else {
                  var15 = var18;
                  if (iPlayMode != 8) {
                     var15 = var18;
                     if (this.pGameData.piGameData[this.pGameData.piGameDataPos[3] + this.pGameData.piGameDataXSize[3] * 19 + CPULevel[1]] > (int)(this.genrand_int32(var1) % 100L)) {
                        var15 = var18;
                        if (this.RushCheck(var1)) {
                           var15 = var18;
                           if (this.RushGoCheck(var1, var10)) {
                              var15 = 1;
                           }
                        }
                     }
                  }
               }

               if (var15 == 0) {
                  tcbNow.md = 908;
                  tcbNow.lp = 0;
                  this.Game(var1, tcbNow.md);
               } else if (var15 == 1) {
                  iEventStatus |= 2;
                  PlayerKey[1] = 0;
                  tcbPlayer[0].md = 430;
                  tcbPlayer[1].md = 430;
                  iReqSENo = 9;
                  this.PushSE(var1, 9);
                  var2 = true;
                  return var2;
               }
            }

            var2 = true;
         }
      }

      return var2;
   }

   public void CopySentenceToConfigData(GlobalWork var1, int var2, int var3) {
   }

   public void CreateCamera(GlobalWork var1) {
      this.DeleteCamera(var1);
      this._TaskMake(var1, 630, 12544);
      this._TaskMake(var1, 519, 12544);
      this._TaskMake(var1, 28, 12544);
      this._TaskMake(var1, 30, 12545)._work[10] = 9;
      TCB var2 = this._TaskMake(var1, 26, 12545);
      var2._work[10] = 299;
      var2._work[11] = 0;
   }

   public boolean CreateFramebuffer(GlobalWork var1, int var2, int var3) {
      boolean var4;
      if (var2 > 0 && var3 > 0) {
         this.ReleaseFramebuffer(var1);
         this.osb = new offscreen();
         if (!this.osb.Init(var1.gl, var2, var3)) {
            this.ReleaseFramebuffer(var1);
            var4 = false;
         } else {
            var4 = true;
         }
      } else {
         var4 = false;
      }

      return var4;
   }

   public void CreateGamepad(GlobalWork var1, int var2) {
      this._TKilx(var1, 12656, 12703);
      TCB var4;
      if (iControlType[iPlayerNo] != 2) {
         var4 = this._TaskMake(var1, 37, 12660);
         var4._work[0] = 12288;
         var4._work[1] = var2;
      } else {
         TCB var3 = this._TaskMake(var1, 37, 12660);
         var3._work[0] = 12288;
         var3._work[1] = var2;
         var4 = this._TaskMake(var1, 32, 12657);
         var4._work[2] = var2;
         var4._work[3] = 1 - var2;
      }

   }

   public TCB CreatePanel(GlobalWork var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9, int var10, int var11, int var12, int var13, int var14, int var15, int var16) {
      TCB var17 = this._TaskMake(var1, 805, var2);
      var17._work[0] = var3;
      var17._work[1] = var4;
      var17._work[2] = var5;
      var17._work[3] = var6;
      var17._work[4] = var7;
      var17._work[5] = var8;
      var17._work[6] = var9;
      var17._work[7] = var10;
      var17._work[8] = var11;
      var17._work[9] = var12;
      var17._work[10] = var13;
      var17._work[11] = var14;
      var17._work[12] = var15;
      var17._work[13] = var16;
      return var17;
   }

   public TCB CreatePanelSingle(GlobalWork var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8) {
      TCB var9 = this._TaskMake(var1, 805, var2);
      var9._work[0] = var3;
      var9._work[1] = var4;
      var9._work[2] = var5;
      var9._work[3] = var6;
      var9._work[4] = var7 << 16;
      var9._work[5] = var8 << 16;
      var9._work[6] = 0;
      var9._work[7] = 0;
      var9._work[8] = 0;
      var9._work[9] = 0;
      var9._work[10] = 0;
      var9._work[11] = 0;
      var9._work[12] = 0;
      var9._work[13] = 0;
      return var9;
   }

   public void CreatePlayer(GlobalWork var1, int var2) {
      SynchroTamePer[var2] = 100;
      TCB var4 = this._TaskMake(var1, 863, var2 + 1 + 13568);
      var4._work[0] = var2;
      tcbPlayer[var2] = var4;
      this._TaskMake(var1, 936, var2 + 13696)._work[0] = var2;
      this._TaskMake(var1, 939, var2 + 13696)._work[0] = var2;
      iTCBReqNum[var2] = 0;
      BulletNum[var2] = 0;
      PlayerKey[var2] = 0;
      DamageMove[var2] = 0;
      ComboCount[var2] = 0;
      HitActNo[var2] = -1;
      DamageIndex[var2] = 0;
      DamageType[var2] = 0;
      OldLifeWait[var2] = 0;
      BulletAction[var2][0] = 0;
      OldLifeSet[var2] = false;
      ThrowDamage[var2] = false;
      SpecialType[var2] = 0;
      this.CmdClear(var1, var2);

      int var3;
      for(var3 = 0; var3 < 63; ++var3) {
         if (var3 == 62) {
            var4 = this._TaskMake(var1, 976, var2 + 13696);
         } else {
            var4 = this._TaskMake(var1, 976, var2 + 13696 + 2);
         }

         var4._work[0] = var2;
         var4._work[1] = var3;
         tcbAura[var2][var3] = var4;
         AuraAction[var2][var3] = 0;
      }

      for(var3 = 0; var3 < 30; ++var3) {
         var4 = this._TaskMake(var1, 978, var2 + 13696);
         var4._work[0] = var2;
         var4._work[1] = var3;
         BubbleAction[var2][var3] = 0;
      }

   }

   public void CreateValueObject(GlobalWork var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9, int var10) {
      TCB var11 = this._TaskMake(var1, 829, var2);
      var11._work[0] = var3 << 16;
      var11._work[1] = var4 << 16;
      var11._work[2] = var5;
      var11._work[3] = var6;
      var11._work[4] = var7 << 16;
      var11._work[5] = var8;
      var11._work[6] = var9;
      var11._work[7] = var10;
      var11._work[8] = 5;
      var11._work[9] = 0;
   }

   public void CreateValueObjectB(GlobalWork var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9, int var10, int var11, int var12) {
      TCB var13 = this._TaskMake(var1, 829, var2);
      var13._work[0] = var3 << 16;
      var13._work[1] = var4 << 16;
      var13._work[2] = var5;
      var13._work[3] = var6;
      var13._work[4] = var7 << 16;
      var13._work[5] = var8;
      var13._work[6] = var9;
      var13._work[7] = var10;
      var13._work[8] = var11;
      var13._work[9] = var12;
   }

   public void CreateWipeInOut(GlobalWork var1, int var2) {
      short var3 = 1;
      if (var2 != 1) {
         var3 = 254;
      }

      iFade = var3;
      this._TaskMake(var1, 831, 57344)._work[0] = var2;
      iFadeR = 0;
      iFadeG = 0;
      iFadeB = 0;
   }

   void DL_ClearData(GlobalWork var1) {
      Downloader.getInstance().Clear();
   }

   byte[] DL_GetData(GlobalWork var1) {
      return Downloader.getInstance().GetData();
   }

   int DL_GetError(GlobalWork var1) {
      return 0;
   }

   int DL_GetSize(GlobalWork var1) {
      return Downloader.getInstance().GetSize();
   }

   boolean DL_IsDownload(GlobalWork var1) {
      return Downloader.getInstance().isDownload();
   }

   void DL_SetAPI(GlobalWork var1, int var2) {
      Downloader.getInstance().SetAPI(0);
   }

   void DL_SetURL(GlobalWork var1, String var2) {
      Downloader.getInstance().SetURL(var2);
   }

   public boolean DamageChange(GlobalWork var1, int var2, int var3, boolean var4, boolean var5, int var6, int var7, int var8, int var9) {
      int var13 = -1;
      int var23 = this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[3] + this.ChrGameData[var3 + 3].piGameDataXSize[3] * 0 + 3] / 2 << 16;
      int var21 = iBackXPos;
      int var22 = iBackXPos;
      byte var17 = 0;
      byte var16 = 0;
      int var14 = 0;
      int var12 = 0;
      byte var15 = 1;
      byte var19 = 1;
      int var10 = DeffenceMul[var3];
      if (Life[0] <= 0 && var2 == 0 || Life[1] <= 0 && var2 == 1) {
         var4 = false;
      } else {
         if (HitActNo[var3] == -1) {
            OldLifeSet[var3] = true;
         }

         if ((PlayerState[var2] & 262144) != 0) {
            var9 = var7;
         } else {
            var9 = var7;
            if (var7 != 0) {
               var10 += AddDeffencePer[var3];
               var9 = var10;
               if (var10 < 0) {
                  var9 = 0;
               }

               var9 = AttackMul[var2] * var7 / 100 * (100 - var9) / 100;
               var7 = var9;
               if (AngryOn[var2]) {
                  var7 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[37] + this.ChrGameData[var2 + 3].piGameDataXSize[37] * 0 + 0] * var9 / 100;
               }

               var9 = var7;
               if (var7 < 2) {
                  var9 = 2;
               }
            }
         }

         if (iFocusTarget == var3) {
            iFocusTarget = -1;
         }

         var7 = var9;
         if (var6 == 92) {
            var7 = 0;
         }

         int var18 = var8 % 50;
         int var20 = var8 / 50;
         int var11 = var13;
         var9 = var7;
         byte var25;
         if (var8 >= -1) {
            label414: {
               var14 = tcbPlayer[var3].obj.ano;
               DefensiveFlag[var3] = 0;
               var10 = var7;
               if (var8 != -1) {
                  var11 = this.HitEffectActNo[var20];
                  var10 = ComboCount[var2];
                  var9 = var10;
                  if (var10 >= 2) {
                     var9 = var10;
                     if (var10 >= 15) {
                        var9 = 15;
                     }

                     var9 -= 2;
                  }

                  var12 = var9;
                  var13 = var11;
                  var10 = var7;
                  if (var9 >= 0) {
                     var12 = var9;
                     var13 = var11;
                     var10 = var7;
                     if (var7 != 0) {
                        var7 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[5] + this.pGameData.piGameDataXSize[5] * 2 + var9 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[5] + this.pGameData.piGameDataXSize[5] * 2 + var9 * 2] & 255) * var7 / 100;
                        var12 = var9;
                        var13 = var11;
                        var10 = var7;
                        if (var7 == 0) {
                           var10 = 1;
                           var13 = var11;
                           var12 = var9;
                        }
                     }
                  }
               }

               var25 = var19;
               if (var8 >= 0) {
                  var25 = var19;
                  if ((PlayerState[var2] & 2) == 0) {
                     var25 = var19;
                     if (iTimer != 0) {
                        var25 = var19;
                        if (tcbPlayer[var3].md != 876) {
                           var25 = var19;
                           if (tcbPlayer[var3].md != 877) {
                              var25 = var19;
                              if (var14 != 6) {
                                 var25 = var19;
                                 if (var14 != 8) {
                                    var25 = var19;
                                    if (var14 != 82) {
                                       var25 = var19;
                                       if (var14 != 83) {
                                          var25 = var19;
                                          if (var14 != 7) {
                                             var25 = var19;
                                             if (var14 != 9) {
                                                label423: {
                                                   if (var14 > 19 && var14 != 80 && var14 != 81 && var14 != 25) {
                                                      var25 = var19;
                                                      if (var14 != 13) {
                                                         break label423;
                                                      }
                                                   }

                                                   byte var28;
                                                   if (!AICtrl[var3] || PracticeSetting[2] != 0 && PracticeSetting[4] == 0) {
                                                      var7 = PlayerKey[var3];
                                                      var28 = 1;
                                                      if (((var7 & 1172) == 0 || PlayerXPos[var3] > PlayerXPos[var2]) && ((var7 & 4680) == 0 || PlayerXPos[var3] < PlayerXPos[var2]) && tcbPlayer[var3].md != 908) {
                                                         var25 = var28;
                                                         if (iControlType[var3] == 2) {
                                                            var25 = var28;
                                                            if (!AICtrl[var3]) {
                                                               label408: {
                                                                  if (this.isMission(var1) == 0 && iStage == 3) {
                                                                     var25 = var28;
                                                                     if (iMissionPross == 2) {
                                                                        break label408;
                                                                     }
                                                                  }

                                                                  if (tcbPlayer[var3].obj.ano != 0 && tcbPlayer[var3].obj.ano != 1) {
                                                                     var25 = var28;
                                                                     if (tcbPlayer[var3].obj.ano != 12) {
                                                                        break label408;
                                                                     }
                                                                  }

                                                                  if (tcbPlayer[var3].md != 908) {
                                                                     tcbPlayer[var3].md = 908;
                                                                  }

                                                                  var25 = 2;
                                                               }
                                                            }
                                                         }
                                                      } else {
                                                         if (this.isMission(var1) != 0 || iStage != 0) {
                                                            tcbPlayer[var3].md = 908;
                                                         }

                                                         var25 = 2;
                                                      }
                                                   } else {
                                                      label426: {
                                                         if (CPURand[var3] % 100 >= this.pGameData.piGameData[this.pGameData.piGameDataPos[3] + this.pGameData.piGameDataXSize[3] * 3 + CPULevel[var3]] && CPUGuardTime[var3] == 0) {
                                                            var25 = var19;
                                                            if (CPUGuard[var3] != 1) {
                                                               break label426;
                                                            }
                                                         }

                                                         byte var27 = 0;
                                                         PlayerKey[var3] = 0;
                                                         var25 = 2;
                                                         byte var26;
                                                         if (this.isMission(var1) == 0) {
                                                            switch(iStage) {
                                                            case 0:
                                                               var28 = 2;
                                                               var26 = 1;
                                                               break;
                                                            case 1:
                                                            case 2:
                                                               var26 = var25;
                                                               var28 = var27;
                                                               if (iMarkVisible == 0) {
                                                                  var26 = var25;
                                                                  var28 = var27;
                                                                  if (this.RushCheck(var1)) {
                                                                     var26 = var25;
                                                                     var28 = var27;
                                                                     if (this.RushGoCheck(var1, var3)) {
                                                                        var28 = 1;
                                                                        var26 = var25;
                                                                     }
                                                                  }
                                                               }
                                                               break;
                                                            case 3:
                                                               var28 = 2;
                                                               var26 = 1;
                                                               break;
                                                            default:
                                                               var26 = var25;
                                                               var28 = var27;
                                                               if (iMarkVisible == 0) {
                                                                  var26 = var25;
                                                                  var28 = var27;
                                                                  if (this.pGameData.piGameData[this.pGameData.piGameDataPos[3] + this.pGameData.piGameDataXSize[3] * 19 + CPULevel[1]] > (int)(this.genrand_int32(var1) % 100L)) {
                                                                     var26 = var25;
                                                                     var28 = var27;
                                                                     if (this.RushCheck(var1)) {
                                                                        var26 = var25;
                                                                        var28 = var27;
                                                                        if (this.RushGoCheck(var1, var3)) {
                                                                           var28 = 1;
                                                                           var26 = var25;
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         } else {
                                                            var26 = var25;
                                                            var28 = var27;
                                                            if (iPlayMode != 8) {
                                                               var26 = var25;
                                                               var28 = var27;
                                                               if (this.pGameData.piGameData[this.pGameData.piGameDataPos[3] + this.pGameData.piGameDataXSize[3] * 19 + CPULevel[1]] > (int)(this.genrand_int32(var1) % 100L)) {
                                                                  var26 = var25;
                                                                  var28 = var27;
                                                                  if (this.RushCheck(var1)) {
                                                                     var26 = var25;
                                                                     var28 = var27;
                                                                     if (this.RushGoCheck(var1, var3)) {
                                                                        var28 = 1;
                                                                        var26 = var25;
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }

                                                         if (var28 == 1) {
                                                            iEventStatus |= 2;
                                                            PlayerKey[1] = 0;
                                                            iLifeDamage[1] = 0;
                                                            tcbPlayer[0].md = 430;
                                                            tcbPlayer[1].md = 430;
                                                            iReqSENo = 9;
                                                            this.PushSE(var1, 9);
                                                            var25 = var26;
                                                         } else {
                                                            var25 = var26;
                                                            if (var28 == 0) {
                                                               CPUGuardTime[var3] = 30;
                                                               tcbPlayer[var3].md = 908;
                                                               var25 = var26;
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }

               int var31 = tcbPlayer[var3].obj.wObjFlag & 16;
               if (PlayerXPos[var3] <= var23 + var21) {
                  var14 = var12;
                  var11 = var13;
                  var15 = var25;
                  var9 = var10;
                  if (var31 == 0) {
                     break label414;
                  }
               }

               if (PlayerXPos[var3] >= 31391744 - var23 + var22) {
                  var14 = var12;
                  var11 = var13;
                  var15 = var25;
                  var9 = var10;
                  if (var31 != 0) {
                     break label414;
                  }
               }

               var14 = var12;
               var11 = var13;
               var15 = var25;
               var9 = var10;
               if (PlayerXPos[var2] != PlayerXPos[var3]) {
                  var14 = var12;
                  var11 = var13;
                  var15 = var25;
                  var9 = var10;
                  if (!ThrowDamage[var3]) {
                     ObjReq var24;
                     if (PlayerXPos[var3] < PlayerXPos[var2]) {
                        var24 = tcbPlayer[var3].obj;
                        var24.wObjFlag &= -17;
                        var9 = var10;
                        var15 = var25;
                        var11 = var13;
                        var14 = var12;
                     } else {
                        var24 = tcbPlayer[var3].obj;
                        var24.wObjFlag |= 16;
                        var14 = var12;
                        var11 = var13;
                        var15 = var25;
                        var9 = var10;
                     }
                  }
               }
            }
         }

         var7 = var9;
         int[] var33;
         if (var15 == 1) {
            if (iFocusTarget == -1 && HitFocusTarget[var2] != -1) {
               iFocusTarget = var2;
               FocusXPos[var2] = HitFocusXPos[var2];
               FocusYPos[var2] = HitFocusYPos[var2];
               FocusZoom[var2] = HitFocusZoom[var2];
            }

            var10 = var9;
            if (var8 != -1) {
               var10 = var9;
               if (Life[var3] < var9) {
                  var10 = Life[var3];
               }

               var33 = TotalDamage;
               var33[var3] += var10;
            }

            if (var3 == iPlayerNo && ConfigData[3] == 0) {
               iVibration = 10;
            }

            var7 = var10;
            if (var8 >= 0) {
               short var32;
               if (var18 >= 30) {
                  var9 = var18 - 30;
                  var32 = 877;
               } else {
                  var32 = 876;
                  var9 = var18;
               }

               ThrowDamage[var3] = false;
               DamageTime[var3] = 0;
               DamageType[var3] = var9;
               DamageIndex[var3] = 0;
               DamageOldIndex[var3] = 0;
               DamageOldType[var3] = var9;
               tcbPlayer[var3].md = var32;
               var7 = var10;
            }
         }

         DamageHitActNo[var3] = var6;
         if (SpecialType[var2] <= 12) {
            DamageHitSpecialType[var3] = SpecialType[var2];
         }

         PlayerAttack[var3] = 0;
         byte var29;
         short var30;
         if (var15 != 2) {
            if (var20 < 3) {
               DamageMove[var3] = DamageHitBack[var2];
            }

            var9 = var11;
            var29 = var16;
            if (var8 != -1) {
               var9 = var11;
               var29 = var16;
               if (var4) {
                  if (tcbPlayer[var3].md == 877) {
                     short var34 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[DamageType[var3] + 14] + DamageIndex[var3] * this.ChrGameData[var2 + 3].piGameDataXSize[DamageType[var3] + 14] + 12];
                  } else {
                     short var10000 = this.pGameData.piGameData[this.pGameData.piGameDataPos[DamageType[var3] + 10] + DamageIndex[var3] * this.pGameData.piGameDataXSize[DamageType[var3] + 10] + 12];
                  }

                  if (var6 >= 27 && var6 <= 66 && (PlayerState[var2] & 4194304) == 0) {
                     var30 = (short)(this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[5] + this.ChrGameData[var2 + 3].piGameDataXSize[5] * 0 + (var6 - 27) * 2 + 1] << 8 & '\uff00' | this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[5] + this.ChrGameData[var2 + 3].piGameDataXSize[5] * 0 + (var6 - 27) * 2]);
                     var9 = var30;
                     if (var14 >= 0) {
                        var9 = ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[5] + this.pGameData.piGameDataXSize[5] * 0 + var14 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[5] + this.pGameData.piGameDataXSize[5] * 0 + var14 * 2] & 255) * var30 / 100 + 99) / 100 * 100;
                     }

                     this.AddScore(var1, var2, var9);
                  }

                  this.LIFE_DEC(var1, var3, var7);
                  var30 = this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[1] + this.ChrGameData[var3 + 3].piGameDataXSize[1] * 0 + 2 + 0];
                  var9 = var30;
                  if (var30 != 0) {
                     var9 = this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[1] + this.ChrGameData[var3 + 3].piGameDataXSize[1] * 0 + 2 + 1] * var7 / var30;
                  }

                  this.SYNCHRO_ADD(var1, var3, var9);
                  this.ANGRY_ADD(var1, var3, 10);
                  var9 = var11;
                  var29 = var16;
                  if ((iBackMode & 1 << var2) == 0) {
                     var9 = var11;
                     var29 = var16;
                     if (SpecialType[var2] != 11) {
                        var9 = var11;
                        var29 = var16;
                        if (SpecialType[var2] != 12) {
                           var30 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[1] + this.ChrGameData[var2 + 3].piGameDataXSize[1] * 0 + 0 + 0];
                           var9 = var30;
                           if (var30 != 0) {
                              var9 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[1] + this.ChrGameData[var2 + 3].piGameDataXSize[1] * 0 + 0 + 1] * var7 / var30;
                           }

                           var7 = var9;
                           if (var6 >= 28) {
                              var7 = var9;
                              if (var6 <= 39) {
                                 var7 = SynchroAttackPer[var2] * var9 / 100;
                              }
                           }

                           this.SYNCHRO_ADD(var1, var2, var7);
                           var29 = var16;
                           var9 = var11;
                        }
                     }
                  }
               }
            }
         } else {
            if (var20 < 3) {
               DamageMove[var3] = GuardHitBack[var2];
            }

            GuardCancelTime[var3] = PlayerHitStop[var2] + 5;
            HitActNo[var3] = -1;
            var30 = this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[1] + this.ChrGameData[var3 + 3].piGameDataXSize[1] * 0 + 4 + 0];
            var9 = var30;
            if (var30 != 0) {
               var9 = this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[1] + this.ChrGameData[var3 + 3].piGameDataXSize[1] * 0 + 4 + 1] * var7 / var30;
            }

            this.SYNCHRO_ADD(var1, var3, var9);
            if ((iBackMode & 1 << var2) == 0 && SpecialType[var2] != 11 && SpecialType[var2] != 12) {
               var30 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[1] + this.ChrGameData[var2 + 3].piGameDataXSize[1] * 0 + 6 + 0];
               var9 = var30;
               if (var30 != 0) {
                  var9 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[1] + this.ChrGameData[var2 + 3].piGameDataXSize[1] * 0 + 6 + 1] * var7 / var30;
               }

               this.SYNCHRO_ADD(var1, var2, var9);
            }

            if (var6 >= 40) {
               var9 = var7;
               if (var7 != 0) {
                  var9 = var7 / 5;
                  var7 = var9;
                  if (var9 == 0) {
                     var7 = 1;
                  }

                  var7 = GuardHardness[var3] * var7 / 100;
                  var9 = var7;
                  if (var7 < 2) {
                     var9 = 2;
                  }
               }

               iLifeDamage[var3] = -var9;
               if ((iEventStatus & 2) == 0) {
                  this.LIFE_DEC(var1, var3, var9);
               }
            }

            var9 = var11;
            var29 = var16;
            if (Life[var3] > 0) {
               var25 = var17;
               if (PlayerXPos[var3] > PlayerXPos[var2]) {
                  var25 = 16;
               }

               var9 = this.GuardEffectActNo[var20];
               var29 = var25;
            }
         }

         if ((iPlayMode == 2 || this.MissionLifeCheck(var1, var3, iStage) != 0) && Life[var3] <= 0) {
            Life[var3] = 1;
         }

         this._SetObj(var1, 130 - tcbNow._work[0] * 4);
         SpecialKind[var3] = 0;
         SpecialType[var3] = 0;
         DamageWall[var3] = false;
         if (var8 == -1) {
            DamageType[var3] = 0;
            DamageIndex[var3] = 0;
            DamageTime[var3] = 0;
            DamageOldIndex[var3] = DamageIndex[var3];
            DamageOldType[var3] = DamageType[var3];
            DamageHitActNo[var3] = 0;
            tcbPlayer[var3].md = 877;
         } else if (Life[var3] <= 0) {
            ThrowDamage[var3] = false;
            DamageType[var3] = 2;
            DamageIndex[var3] = 0;
            DamageTime[var3] = 0;
            DamageOldIndex[var3] = DamageIndex[var3];
            DamageOldType[var3] = DamageType[var3];
            tcbPlayer[var3].md = 876;
         }

         if (var9 != -1) {
            TCB var35 = this._TaskMake(var1, 965, 13598);
            var35._work[0] = var9;
            var35._work[3] = iBackXPos + iHitXPos;
            var35._work[4] = iBackYPos + iHitYPos;
            var35._work[5] = var29;
            if (var9 != 0 && var9 != 1) {
               iReqSENo = 8;
               this.PushSE(var1, 8);
            } else {
               if ((PlayerState[var2] & 4194304) == 0) {
                  var33 = ComboCount;
                  int var10002 = var33[var2]++;
                  if (ComboCount[var2] > 99) {
                     ComboCount[var2] = 99;
                  }

                  if (ComboCount[var2] >= 2) {
                     this._TKilx(var1, var2 * 2 + 13808, var2 * 2 + 13808 + 1);
                     var35 = this._TaskMake(var1, 837, var2 * 2 + 13808);
                     var35._work[0] = var2;
                     var35._work[1] = 0;
                     var35 = this._TaskMake(var1, 837, var2 * 2 + 13808);
                     var35._work[0] = var2;
                     var35._work[1] = 1;
                  }
               }

               HitActNo[var3] = var6;
               iReqSENo = this.HitSound[var20];
               this.PushSE(var1, this.HitSound[var20]);
            }
         }

         var4 = true;
      }

      return var4;
   }

   public void DamageEnd(GlobalWork var1) {
      int var2 = tcbNow._work[0];
      PlayerAttack[var2] = 0;
      SpecialKind[var2] = 0;
      SpecialType[var2] = 0;
      OldLifeWait[var2] = 0;
      DamageType[var2] = 0;
      DamageIndex[var2] = 0;
      ComboCount[1 - var2] = 0;
      HitActNo[var2] = -1;
      BulletAction[var2][0] = 0;
      ThrowDamage[var2] = false;
      DamageWall[var2] = false;
      DamageHitSpecialType[var2] = 20;
      HitFocusTarget[var2] = -1;
      if (iPlayMode == 2) {
         Life[var2] = PlayerLife[var2];
         Score[1 - var2] = 0;
         iScoreClearCounter = 0;
      }

      if (this.MissionLifeCheck(var1, var2, iStage) != 0) {
         Life[var2] = PlayerLife[var2];
      }

   }

   public void DebugSetLevel(GlobalWork var1, int var2, int var3) {
      var2 = var2 * 100 + 30 + 53;
      var3 = (var3 + 1) * 1000;
      ConfigData[var2 + 0] = (byte)(var3 >> 16 & 255);
      ConfigData[var2 + 1] = (byte)(var3 >> 8 & 255);
      ConfigData[var2 + 2] = (byte)(var3 & 255);
      this._FILESave(var1);
   }

   public void DeleteCamera(GlobalWork var1) {
      this._TKilx(var1, 12544, 12568);
   }

   public void DeleteeGamepad(GlobalWork var1) {
      this._TKilx(var1, 12656, 12703);
   }

   public void Dispose(GlobalWork var1) {
      label133: {
         boolean var10001;
         int var2;
         label134: {
            try {
               this.gl = var1.gl;
               if (this.ChrGameData == null) {
                  break label134;
               }
            } catch (Exception var15) {
               var10001 = false;
               break label133;
            }

            var2 = 0;

            while(true) {
               try {
                  if (var2 >= this.ChrGameData.length) {
                     break;
                  }

                  if (this.ChrGameData[var2] != null) {
                     this.ChrGameData[var2].Dispose(var1);
                     this.ChrGameData[var2] = null;
                  }
               } catch (Exception var14) {
                  var10001 = false;
                  break label133;
               }

               ++var2;
            }
         }

         try {
            if (this.pGameData != null) {
               this.pGameData.Dispose(var1);
               this.pGameData = null;
            }
         } catch (Exception var13) {
            var10001 = false;
            break label133;
         }

         try {
            if (this.pTextData != null) {
               this.pTextData.Dispose(var1);
               this.pTextData = null;
            }
         } catch (Exception var12) {
            var10001 = false;
            break label133;
         }

         for(var2 = 0; var2 < 31; ++var2) {
            try {
               Create[var2] = -1;
               CreatedAct[var2] = -1;
               LoadFilter[var2] = 0;
            } catch (Exception var11) {
               var10001 = false;
               break label133;
            }
         }

         label101: {
            try {
               if (this.stringTexture == null) {
                  break label101;
               }

               if (this.stringTexture[0] != null) {
                  this.stringTexture[0].Dispose(var1.gl);
                  this.stringTexture[0] = null;
               }
            } catch (Exception var10) {
               var10001 = false;
               break label133;
            }

            try {
               if (this.stringTexture[1] != null) {
                  this.stringTexture[1].Dispose(var1.gl);
                  this.stringTexture[1] = null;
               }
            } catch (Exception var9) {
               var10001 = false;
               break label133;
            }
         }

         try {
            this.stringTexture = null;
         } catch (Exception var8) {
            var10001 = false;
            break label133;
         }

         for(var2 = 0; var2 < 1170; ++var2) {
            try {
               this.TCBList[var2] = null;
            } catch (Exception var7) {
               var10001 = false;
               break label133;
            }
         }

         try {
            if (this.loadingImage != null) {
               this.loadingImage.Dispose(var1.gl);
               this.loadingImage = null;
            }
         } catch (Exception var6) {
            var10001 = false;
            break label133;
         }

         try {
            this.SortTable = null;
            this.ObjStock = null;
            this.controller = null;
         } catch (Exception var5) {
            var10001 = false;
         }
      }

      try {
         if (this.osb != null) {
            this.osb.Dispose(var1.gl);
            this.osb = null;
            this.osbOK = true;
         }
      } catch (Exception var4) {
      }

   }

   public void Draw(GlobalWork var1) {
      if (!bDrawSkip && !var1.bResume) {
         this.gl = var1.gl;
         if (this.osb != null) {
            this.osb.bind(this.gl);
            this.gl.glMatrixMode(5889);
            this.gl.glViewport(0, 0, var1.iFrameScalWidth, var1.iFrameScalHeight);
            this.gl.glLoadIdentity();
            this.gl.glOrthof((float)(-(var1.iScreenScalWidth / 2)), (float)(var1.iScreenScalWidth / 2), (float)(-(var1.iScreenScalHeight / 2)), (float)(var1.iScreenScalHeight / 2), -100.0F, 100.0F);
            this.gl.glMatrixMode(5888);
            Graphics2D.getInstance().clear(var1.gl);

            try {
               this.DrawExec(var1);
               Graphics2D.getInstance().flash(var1.gl);
            } catch (Exception var4) {
            }

            this.osb.bindClear(this.gl);
            this.gl.glMatrixMode(5889);
            this.gl.glViewport(0, 0, var1.iScreenBaseWidth, var1.iScreenBaseHeight);
            this.gl.glLoadIdentity();
            this.gl.glOrthof((float)(-(var1.iScreenScalWidth / 2)), (float)(var1.iScreenScalWidth / 2), (float)(-(var1.iScreenScalHeight / 2)), (float)(var1.iScreenScalHeight / 2), -100.0F, 100.0F);
            this.gl.glMatrixMode(5888);
            Graphics2D.getInstance().clear(var1.gl);
            this.osb.draw(this.gl, var1.iScreenDrawOffsetX - var1.iScreenOffsetX, var1.iScreenDrawOffsetY, var1.iScreenScalWidth, var1.iScreenScalHeight);
            Graphics2D.getInstance().flash(var1.gl);
         } else {
            Graphics2D.getInstance().clear(var1.gl);

            try {
               this.DrawExec(var1);
               Graphics2D.getInstance().flash(var1.gl);
            } catch (Exception var3) {
            }
         }
      } else {
         Graphics2D.getInstance().clear(var1.gl);
      }

   }

   public void DrawExec(GlobalWork var1) {
      int var3;
      int var4;
      if (bDrawLoading) {
         if (this.loadingImage == null) {
            this.loadingImage = new AndroidGLTexture();
         }

         if (this.loadingImage.GetImage() == 0) {
            try {
               byte[] var18 = Utility.readDataRaw(var1.context, "kitou.png");
               this.loadingImage.loadTexture(var1.gl, var18, 0, var18.length, true);
            } catch (Exception var19) {
               return;
            }
         }

         iDrawLoadingOffsetCount = 0;
         float var2 = 1.5F * (float)iDrawLoadingOffset;
         __coord[0] = 0.0F;
         __coord[1] = var2;
         __coord[2] = 0.0F;
         __coord[3] = var2 + 1.5F;
         __coord[4] = 0.0F + 1.0F;
         __coord[5] = var2 + 1.5F;
         __coord[8] = 0.0F + 1.0F;
         __coord[9] = var2;
         var3 = var1.iScreenDrawOffsetX - 75;
         var4 = var1.iScreenDrawOffsetY + 0;
         __vertex[0] = var3;
         __vertex[1] = -var4;
         __vertex[2] = var3;
         __vertex[3] = -(var4 + 480);
         __vertex[4] = var3 + 640;
         __vertex[5] = -(var4 + 480);
         __vertex[8] = var3 + 640;
         __vertex[9] = -var4;
         Graphics2D.getInstance().drawMode(var1.gl, 3);
         Graphics2D.getInstance().setColor(var1.gl, 255, 255, 255, 255);
         Graphics2D.getInstance().drawTexture(var1.gl, this.loadingImage.GetImage(), __vertex, __coord);
         Graphics2D.getInstance().clearMatrix(var1.gl);
         Graphics2D.getInstance().drawMode(var1.gl, 0);
      } else {
         if (this.stringTexture[0] != null) {
            this.stringTexture[0].flash(var1.gl);
         }

         if (this.stringTexture[1] != null) {
            this.stringTexture[1].flash(var1.gl);
         }

         byte var20 = 0;
         var3 = 0;
         ObjReq var22 = this.pObjReqBuffer;
         int var8;
         int var21;
         if (bTaskSkip) {
            var4 = 0;

            while(true) {
               var8 = var3;
               if (var4 >= this.iObjNum) {
                  break;
               }

               var21 = var3;
               if (var22.prio >= 24576) {
                  this.SortTable[var3] = var22;
                  var21 = var3 + 1;
               }

               var22 = var22.next;
               ++var4;
               var3 = var21;
            }
         } else {
            byte var5 = 0;
            var3 = var20;
            var4 = var5;

            while(true) {
               var8 = var3;
               if (var4 >= this.iObjNum) {
                  break;
               }

               var21 = var3;
               if (var22.prio != -1) {
                  this.SortTable[var3] = var22;
                  var21 = var3 + 1;
               }

               var22 = var22.next;
               ++var4;
               var3 = var21;
            }
         }

         int var6;
         int var7;
         for(var3 = 0; var3 < var8 - 1; ++var3) {
            var21 = this.SortTable[var3].prio - this.SortTable[var3].iActPrio;

            for(var4 = var3 + 1; var4 < var8; var21 = var6) {
               label169: {
                  var7 = this.SortTable[var4].prio - this.SortTable[var4].iActPrio;
                  if (var7 >= var21) {
                     var6 = var21;
                     if (var7 != var21) {
                        break label169;
                     }

                     var6 = var21;
                     if (this.SortTable[var4].iTaskPrio > this.SortTable[var3].iTaskPrio) {
                        break label169;
                     }
                  }

                  var22 = this.SortTable[var3];
                  this.SortTable[var3] = this.SortTable[var4];
                  this.SortTable[var4] = var22;
                  var6 = var7;
               }

               ++var4;
            }
         }

         for(int var9 = 0; var9 < var8; ++var9) {
            var22 = this.SortTable[var9];
            var22.wObjFlag &= -5;
            var22.wObjFlag |= 64;
            if (var22.parent != null) {
               if ((var22.parent.wObjFlag & 1) != 0 || (var22.wObjFlag & 1) != 0) {
                  continue;
               }
            } else if ((var22.wObjFlag & 1) != 0) {
               continue;
            }

            int var10;
            int var11;
            int var12;
            int var13;
            int var14;
            if ((var22.acttype & 1044480) != 0) {
               if (var22.x >> 16 < 480 && var22.y >> 16 < 320) {
                  var7 = var22.pal;
                  var21 = var22.pal;
                  var10 = var22.pal;
                  var3 = var22.pal;
                  if ((var22.acttype & '耀') == 0) {
                     if ((var22.acttype & 262144) != 0) {
                        if (this.imageTexture != null) {
                           var3 = var22.x;
                           var21 = var1.iScreenDrawOffsetX;
                           var7 = var22.y;
                           var4 = var1.iScreenDrawOffsetY;
                           var6 = this.imageTexture.GetImage();
                           if (var6 != 0) {
                              Graphics2D.getInstance().drawMode(var1.gl, 0);
                              Graphics2D.getInstance().drawTexture(var1.gl, var6, var3 + var21, var7 + var4, var22.Work[2], var22.Work[3], (float)var22.Work[0] / (float)this.imageTexture.GetWidth(), (float)var22.Work[1] / (float)this.imageTexture.GetHeight(), (float)var22.Work[2] / (float)this.imageTexture.GetWidth(), (float)var22.Work[3] / (float)this.imageTexture.GetHeight());
                           }
                        }
                     } else if ((var22.acttype & 131072) != 0) {
                        var21 = var22.Work[4];
                        var7 = this.stringTexture[var21].GetImage();
                        if (var7 != 0) {
                           var3 = var22.x;
                           var6 = var1.iScreenDrawOffsetX;
                           var4 = var22.y;
                           var10 = var1.iScreenDrawOffsetY;
                           if (var22.iGlobalAlpha == 255) {
                              Graphics2D.getInstance().drawMode(var1.gl, 3);
                           } else {
                              Graphics2D.getInstance().drawMode(var1.gl, 0);
                           }

                           Graphics2D.getInstance().setColor(var1.gl, 255, 255, 255, 255);
                           Graphics2D.getInstance().setColorGl(var1.gl, 255, 255, 255, var22.iGlobalAlpha);
                           Graphics2D.getInstance().drawTexture(var1.gl, var7, var3 + var6, var4 + var10, var22.Work[2], var22.Work[3], (float)var22.Work[0] / (float)this.stringTexture[var21].GetWidth(), (float)var22.Work[1] / (float)this.stringTexture[var21].GetHeight(), (float)var22.Work[2] / (float)this.stringTexture[var21].GetWidth(), (float)var22.Work[3] / (float)this.stringTexture[var21].GetHeight());
                           Graphics2D.getInstance().setColorGl(var1.gl, 255, 255, 255, 255);
                        }
                     } else if ((var22.acttype & 8192) == 0) {
                        if ((var22.acttype & 65536) != 0) {
                           Graphics2D.getInstance().clearMatrix(var1.gl);
                           if (var22.Work[6] != 0) {
                              Graphics2D.getInstance().setMatrix(var1.gl, (int)(var1.fScreenGameScale * (float)var22.Work[3]), (int)(var1.fScreenGameScale * (float)var22.Work[4]), (int)(var1.fScreenGameScale * (float)var22.Work[5]), var22.Work[0], var22.Work[1], var22.Work[2]);
                           }
                        } else {
                           var13 = var22.x;
                           var6 = var1.iScreenDrawOffsetX;
                           var11 = var22.y;
                           var4 = var1.iScreenDrawOffsetY;
                           var12 = var22.ox;
                           var14 = var22.oy;
                           Graphics2D.getInstance().drawMode(var1.gl, 0);
                           Graphics2D.getInstance().setColor(var1.gl, (var21 & 16711680) >> 16, (var10 & '\uff00') >> 8, var3 & 255, 255 - ((var7 & -16777216) >> 24));
                           if ((var22.acttype & 4096) != 0) {
                              Graphics2D.getInstance().drawFillRect(var1.gl, (var13 >> 16) + var6, (var11 >> 16) + var4, var12 >> 16, var14 >> 16);
                           }
                        }
                     }
                  }
               }
            } else {
               int var16 = (var22.x >> 16) + var1.iScreenDrawOffsetX;
               int var17 = (var22.y >> 16) + var1.iScreenDrawOffsetY;
               if (var22.img == -1) {
                  if (var16 >= 0 && var16 >= 480) {
                  }
               } else if (var22.apt == 0) {
                  if (var16 >= 0 && var16 >= 480) {
                  }
               } else {
                  var4 = var22.wActFlag & 48;
                  if (var22.parent != null) {
                     var3 = var4;
                     if ((var22.parent.wObjFlag & 16) != 0) {
                        var3 = var4 ^ 16;
                     }

                     var4 = var3;
                     if ((var22.parent.wObjFlag & 32) != 0) {
                        var4 = var3 ^ 32;
                     }
                  } else {
                     var4 = var4 ^ var22.wObjFlag & 16 ^ var22.wObjFlag & 32;
                  }

                  var7 = var22.ox;
                  var10 = var22.bx;
                  var21 = var22.oy;
                  int var15 = var22.by;
                  var6 = var22.iXZoom;
                  var3 = var22.iYZoom;
                  if (var22.parent != null) {
                     iDrawXZoom = var6;
                     iDrawYZoom = var3;
                     iDrawAlpha = var22.parent.iAlpha;
                     iDrawObjFlag = var22.parent.wObjFlag;
                     iDrawXZoom = iDrawXZoom * var22.parent.iXZoomObj / 100;
                     iDrawYZoom = iDrawYZoom * var22.parent.iYZoomObj / 100;
                     var3 = var22.parent.iXZoomObj * var7 / 100;
                     var6 = var22.parent.iYZoomObj * var21 / 100;
                     var22.iGlobalAlpha = var22.parent.iGlobalAlpha;
                  } else {
                     iDrawXZoom = var6;
                     iDrawYZoom = var3;
                     iDrawAlpha = var22.iAlpha;
                     iDrawObjFlag = var22.wObjFlag;
                     iDrawXZoom = iDrawXZoom * var22.iXZoomObj / 100;
                     iDrawYZoom = iDrawYZoom * var22.iYZoomObj / 100;
                     var3 = var22.iXZoomObj * var7 / 100;
                     var6 = var22.iYZoomObj * var21 / 100;
                  }

                  var13 = var3;
                  var14 = var6;
                  var12 = var10;
                  var11 = var15;
                  if ((var22.wObjFlag & 2) == 0) {
                     var7 = var3;
                     var21 = var10;
                     if ((var4 & 16) != 0) {
                        var7 = -var3;
                        var21 = -var10;
                     }

                     var13 = var7;
                     var14 = var6;
                     var12 = var21;
                     var11 = var15;
                     if ((var4 & 32) != 0) {
                        var14 = -var6;
                        var11 = -var15;
                        var12 = var21;
                        var13 = var7;
                     }
                  }

                  if ((var22.wObjFlag & 2) != 0) {
                     if (var22.iSpriteFlag != 0) {
                        this.DrawSprite(var1, var22, var16, var17, var4, iDrawXZoom, iDrawXZoom);
                     }
                  } else {
                     bDrawPiece = false;
                     if (var22.iSpriteFlag != 0) {
                        this.DrawSprite(var1, var22, var16, var17, var4, iDrawXZoom, iDrawXZoom);
                     } else {
                        this.DrawImage(var1, var22, var16, var17, var4, var13, var14, var12, var11, var4, iDrawXZoom, iDrawYZoom);
                     }

                     if (!bDrawPiece) {
                     }
                  }
               }
            }
         }

         Graphics2D.getInstance().clearMatrix(var1.gl);
         Graphics2D.getInstance().drawMode(var1.gl, 0);
         if (iFade != 0) {
            Graphics2D.getInstance().setColor(var1.gl, iFadeR, iFadeG, iFadeB, iFade);
            Graphics2D.getInstance().drawFillRect(var1.gl, var1.iScreenDrawOffsetX - var1.iScreenOffsetX, var1.iScreenDrawOffsetY, var1.iScreenScalWidth, var1.iScreenScalHeight);
         }

         Graphics2D.getInstance().iFlashCount = 0;
      }

   }

   void DrawSprite(GlobalWork var1, ObjReq var2, int var3, int var4, int var5, int var6, int var7) {
      if (var2.iSpriteStatus[2] > 0) {
         var5 = var2.acttype & -1044481;
         if (iBackXSize == 0 && (var2.wObjFlag & 2) != 0) {
            var7 = var2.img;
            short var15 = (short)((this.ChrGameData[var5].getData(0)[1] & 255 & 255) << 8 | this.ChrGameData[var5].getData(0)[0] & 255 & 255);
            short var16 = (short)((this.ChrGameData[var5].getData(0)[var7 * 2 + 5] & 255 & 255) << 8 | this.ChrGameData[var5].getData(0)[var7 * 2 + 4] & 255 & 255);
            iBackXSize = (this.ChrGameData[var5].getData(0)[var16 * 4 + 4 + var15 * 2 + 4] & 255) * 32;
         }

         SpriteData var14 = this.ChrGameData[var5].getSprite();
         if (var14 != null) {
            byte[] var13 = var14.getData();
            var7 = 0;
            int var8 = 0;
            var5 = var3;
            int var9;
            if ((var2.wObjFlag & 2) != 0) {
               var5 = var1.iScreenDrawOffsetX - var1.iScreenOffsetX - 632;
               var9 = var1.iScreenScalWidth;
               var6 = var5;
               if (var2.Work[3] > 0) {
                  var6 = var5;
                  if (var2.Work[3] != 100) {
                     var6 = var5 * var2.Work[3];
                  }
               }

               var7 = var6;
               var8 = var9;
               var5 = var3;
               if (var3 > -300) {
                  var5 = var3 - iBackXSize;
                  var8 = var9;
                  var7 = var6;
               }
            }

            for(; var5 < var1.iScreenScalWidth; var5 += iBackXSize) {
               if ((var2.wObjFlag & 2) == 0 || var5 >= var7 && var5 <= var8) {
                  var3 = var2.iSpriteStatus[20];

                  for(var6 = 0; var6 < var2.iSpriteStatus[3]; ++var6) {
                     int var11 = var13[var3 + 34] & 255;
                     if (var11 == 0) {
                        var3 += var2.iSpriteStatus[21];
                     } else if ((short)(var13[var3 + 0] & 255 | (var13[var3 + 0 + 1] & 255) << 8) < 0) {
                        var3 += var2.iSpriteStatus[21];
                     } else {
                        int var12 = var14.getImage((short)(var13[var3 + 0] & 255 | (var13[var3 + 0 + 1] & 255) << 8));
                        int var10 = var14.getImageWidth((short)(var13[var3 + 0] & 255 | (var13[var3 + 0 + 1] & 255) << 8));
                        var9 = var14.getImageHeight((short)(var13[var3 + 0] & 255 | (var13[var3 + 0 + 1] & 255) << 8));
                        if (var12 != 0 && var10 > 0 && var9 > 0) {
                           Graphics2D.getInstance().setColorGl(var1.gl, 255, 255, 255, var11);
                           switch(var13[var3 + 35] & 255) {
                           case 0:
                              if (var11 == 255) {
                                 Graphics2D.getInstance().drawMode(var1.gl, 3);
                              } else {
                                 Graphics2D.getInstance().drawMode(var1.gl, 0);
                              }
                              break;
                           case 1:
                              Graphics2D.getInstance().drawMode(var1.gl, 1);
                              break;
                           case 2:
                              Graphics2D.getInstance().drawMode(var1.gl, 2);
                           }

                           __vertex[0] = (short)(var13[var3 + 2] & 255 | (var13[var3 + 2 + 1] & 255) << 8);
                           __vertex[1] = (short)(var13[var3 + 4] & 255 | (var13[var3 + 4 + 1] & 255) << 8);
                           __vertex[2] = (short)(var13[var3 + 6] & 255 | (var13[var3 + 6 + 1] & 255) << 8);
                           __vertex[3] = (short)(var13[var3 + 8] & 255 | (var13[var3 + 8 + 1] & 255) << 8);
                           __vertex[4] = (short)(var13[var3 + 10] & 255 | (var13[var3 + 10 + 1] & 255) << 8);
                           __vertex[5] = (short)(var13[var3 + 12] & 255 | (var13[var3 + 12 + 1] & 255) << 8);
                           __vertex[8] = (short)(var13[var3 + 14] & 255 | (var13[var3 + 14 + 1] & 255) << 8);
                           __vertex[9] = (short)(var13[var3 + 16] & 255 | (var13[var3 + 16 + 1] & 255) << 8);
                           __coord[0] = (float)((short)(var13[var3 + 18] & 255 | (var13[var3 + 18 + 1] & 255) << 8)) / (float)var10;
                           __coord[1] = (float)((short)(var13[var3 + 20] & 255 | (var13[var3 + 20 + 1] & 255) << 8)) / (float)var9;
                           __coord[2] = (float)((short)(var13[var3 + 22] & 255 | (var13[var3 + 22 + 1] & 255) << 8)) / (float)var10;
                           __coord[3] = (float)((short)(var13[var3 + 24] & 255 | (var13[var3 + 24 + 1] & 255) << 8)) / (float)var9;
                           __coord[4] = (float)((short)(var13[var3 + 26] & 255 | (var13[var3 + 26 + 1] & 255) << 8)) / (float)var10;
                           __coord[5] = (float)((short)(var13[var3 + 28] & 255 | (var13[var3 + 28 + 1] & 255) << 8)) / (float)var9;
                           __coord[6] = __coord[0];
                           __coord[7] = __coord[1];
                           __coord[8] = (float)((short)(var13[var3 + 30] & 255 | (var13[var3 + 30 + 1] & 255) << 8)) / (float)var10;
                           __coord[9] = (float)((short)(var13[var3 + 32] & 255 | (var13[var3 + 32 + 1] & 255) << 8)) / (float)var9;
                           __coord[10] = __coord[4];
                           __coord[11] = __coord[5];
                           __vertex[0] += var5;
                           __vertex[1] = -(__vertex[1] + var4);
                           __vertex[2] += var5;
                           __vertex[3] = -(__vertex[3] + var4);
                           __vertex[4] += var5;
                           __vertex[5] = -(__vertex[5] + var4);
                           __vertex[8] += var5;
                           __vertex[9] = -(__vertex[9] + var4);
                           Graphics2D.getInstance().drawTexture(var1.gl, var12, __vertex, __coord);
                           var3 += var2.iSpriteStatus[21];
                        } else {
                           var3 += var2.iSpriteStatus[21];
                        }
                     }
                  }

                  if ((var2.wObjFlag & 2) == 0) {
                     break;
                  }
               }
            }
         }
      }

   }

   public void DrawText(GlobalWork var1, int var2, int var3, int var4, String var5, int var6, int var7, int var8, int var9, int var10, int var11, int var12) {
      RectF var14 = this.stringTexture[var2].drawString(var5, var8, var9, var10, var11, 255);
      if (var14 != null) {
         iStringXpos = (int)var14.left + (int)var14.width();
         TCB var13 = this._TaskMake(var1, 34, var3);
         var13._work[0] = var4;
         var13._work[1] = var6;
         var13._work[2] = var7;
         var13._work[3] = (int)var14.left;
         var13._work[4] = (int)var14.top;
         var13._work[5] = (int)var14.width();
         var13._work[6] = (int)var14.height();
         var13._work[7] = var12;
         var13._work[8] = var2;
      }

   }

   public void DrawTextClear(GlobalWork var1, int var2) {
      this.stringTexture[var2].clear();
   }

   int EventDamage(GlobalWork var1, int var2, int var3, int var4) {
      short var5 = (short)(this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[35] + var2 * 2 * this.ChrGameData[var3 + 3].piGameDataXSize[35] + 0 + 1] << 8 & '\uff00' | this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[35] + var2 * 2 * this.ChrGameData[var3 + 3].piGameDataXSize[35] + 0]);
      var4 = AttackMul[var3] * var5 / 100 * (100 - DeffenceMul[var4]) / 100;
      var2 = var4;
      if (AngryOn[var3]) {
         var2 = this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[37] + this.ChrGameData[var3 + 3].piGameDataXSize[37] * 0 + 0] * var4 / 100;
      }

      return var2;
   }

   boolean ExtremeCheck(GlobalWork var1, int var2, int var3) {
      boolean var4;
      if (var2 == 0) {
         if (Synchro[var3] >= 100 && (tcbPlayer[var3].obj.ano == 1 || tcbPlayer[var3].obj.ano == 2 || tcbPlayer[var3].obj.ano == 3 || tcbPlayer[var3].obj.ano == 5 || tcbPlayer[var3].obj.ano == 6 || tcbPlayer[var3].obj.ano == 7 || tcbPlayer[var3].obj.ano == 8 || tcbPlayer[var3].obj.ano == 9 || tcbPlayer[var3].obj.ano == 10 || tcbPlayer[var3].obj.ano == 11 || tcbPlayer[var3].obj.ano == 12 || tcbPlayer[var3].obj.ano == 0)) {
            var4 = true;
            return var4;
         }
      } else if (Synchro[var3] >= 200 && (tcbPlayer[var3].obj.ano == 1 || tcbPlayer[var3].obj.ano == 2 || tcbPlayer[var3].obj.ano == 3 || tcbPlayer[var3].obj.ano == 5 || tcbPlayer[var3].obj.ano == 6 || tcbPlayer[var3].obj.ano == 7 || tcbPlayer[var3].obj.ano == 8 || tcbPlayer[var3].obj.ano == 9 || tcbPlayer[var3].obj.ano == 10 || tcbPlayer[var3].obj.ano == 11 || tcbPlayer[var3].obj.ano == 12 || tcbPlayer[var3].obj.ano == 0)) {
         var4 = true;
         return var4;
      }

      var4 = false;
      return var4;
   }

   public boolean FILEInit(GlobalWork var1) {
      this._FILELoad(var1);
      return true;
   }

   void GDTString(GlobalWork var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9) {
      this.SetString(var1, 0, 0, var2, 0, var3, var4, var5, var6, var7, var8, var9, 0);
   }
   
  public static int MD;

    public void Game(GlobalWork var1, int var2) {
        MD = var2;
      if (var2 >= 675 && var2 <= 730) {
         this.Game1(var1, var2);
      } else if (var2 >= 731 && var2 <= 795) {
         this.Game2(var1, var2);
      } else if (var2 >= 1 && var2 <= 24) {
         this.Game17(var1, var2);
      } else if (var2 >= 25 && var2 <= 42) {
         this.Game8(var1, var2);
      } else if (var2 >= 796 && var2 <= 844) {
         this.Game4(var1, var2);
      } else if (var2 >= 862 && var2 <= 895) {
         this.Game5(var1, var2);
      } else if (var2 >= 896 && var2 <= 942) {
         this.Game6(var1, var2);
      } else if (var2 >= 943 && var2 <= 997) {
         this.Game7(var1, var2);
      } else if (var2 >= 998 && var2 <= 1080) {
         this.Game3(var1, var2);
      } else if (var2 >= 1081 && var2 <= 1122) {
         this.Game16(var1, var2);
      } else if (var2 >= 43 && var2 <= 121) {
         this.Game9(var1, var2);
      } else if (var2 >= 427 && var2 <= 628) {
         this.Game10(var1, var2);
      } else if (var2 >= 845 && var2 <= 861) {
         this.Game11(var1, var2);
      } else if (var2 >= 184 && var2 <= 292) {
         this.Game12(var1, var2);
      } else if (var2 >= 122 && var2 <= 183) {
         this.Game13(var1, var2);
      } else if (var2 >= 293 && var2 <= 426) {
         this.Game14(var1, var2);
      } else if (var2 >= 629 && var2 <= 674) {
         this.Game15(var1, var2);
      }

   }

   public void Game1(GlobalWork var1, int var2) {
      int var3;
      int var4;
      int var5;
      int[] var8;
      int[] var9;
      int var10002;
      switch(var2) {
      case 0:
      case 675:
      case 681:
      default:
         break;
      case 676:
         if (iPlayMode == 8) {
            if (bBackKeyPush && iBackKeyType == 1) {
               this._TKilx(var1, 8192, 65535);
               iBackKeyType = 0;
               tcbNow.md = 677;
               tcbNow.lp = 0;
               bDrawLoading = false;
               bPause = false;
               bBackKeyPush = false;
            }
         } else if (!bDrawLoading && bBackKeyPush && iBackKeyType == 1) {
            bPause = true;
         }

         if (bPause) {
            iReqSENo = 16;
            this.PushSE(var1, 16);
            tcbNow.md = 846;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 677:
         this._TLoop(var1, 10, 678);
         break;
      case 678:
         bBTSend = false;
         bBTDataSetOK = false;
         iBTReadDataIndex = 0;
         iBTReadDataBufIndex = 0;
         BluetoothManajer.getInstance().reset();
         BluetoothManajer.getInstance().dispose();
         tcbNow.md = 679;
         tcbNow.lp = 0;
         break;
      case 679:
         this.BTDispose(var1);
         tcbNow.md = 680;
         tcbNow.lp = 0;
         break;
      case 680:
         iBTErrMess = 2;
         this._TaskMake(var1, 792, 8192);
         iPlayMode = 6;
         tcbNow.md = 676;
         tcbNow.lp = 0;
         break;
      case 682:
         bSaveSD = false;
         ConfigDataInit = false;
         this.FILEInit(var1);
         iPlayMovieReq = 0;

         for(var2 = 0; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         this._TaskMake(var1, 676, 4096);
         tcbNow.md = 683;
         tcbNow.lp = 0;
         break;
      case 683:
         iNetworkResult = 1;
         InitMtiKey[0] = lNowTime & 255L;
         InitMtiKey[1] = lNowTime >> 8 & 255L;
         InitMtiKey[2] = lNowTime >> 16 & 255L;
         InitMtiKey[3] = lNowTime >> 24 & 255L;
         PracticeSetting[0] = 0;
         PracticeSetting[1] = 0;
         PracticeSetting[4] = 0;
         PracticeSetting[2] = 0;
         PracticeSetting[3] = 0;
         AddLevel[0] = 0;
         AddLevel[1] = 0;
         this.init_by_array(var1, 4);
         bExitAsk = false;
         iPlayBGMNo = -1;
         bDebug = true;
         iEventStatus = 0;
         iChrSelectMode = 0;
         bBTSend = false;
         iBTSkipCount = 0;
         iJoyWorkCount = 0;
         iStageBGM = 0;

         for(var2 = 0; var2 < 6; ++var2) {
            PracticeSetting[var2] = 0;
         }

         PracticeSetting[2] = 1;
         if (ConfigDataInit) {
            ConfigData[12527] = 0;
            ConfigData[12528] = 0;
            ConfigData[12530] = 0;
            ConfigData[12531] = 0;
            ConfigData[12532] = 0;
            ConfigData[4] = 2;
            ConfigData[2] = 50;
            ConfigData[3] = 50;
            ConfigData[12440] = (byte)((int)(this.genrand_int32(var1) % 100L));
            ConfigData[12441] = (byte)((int)(this.genrand_int32(var1) % 100L));
            ConfigData[12442] = (byte)((int)(this.genrand_int32(var1) % 100L));

            for(var2 = 0; var2 < 7; ++var2) {
               var3 = this.DefaultScore[var2 << 1];
               var5 = this.DefaultScore[(var2 << 1) + 1];
               var4 = var2 * 6 + 11820;
               ConfigData[var4 + 0] = (byte)(var5 >> 16);
               ConfigData[var4 + 1] = (byte)(var5 >> 8);
               ConfigData[var4 + 2] = (byte)(var5 & 255);
               ConfigData[var4 + 3] = 1;
               ConfigData[var4 + 4] = (byte)(7 - var2);
               ConfigData[var4 + 5] = (byte)var3;
            }

            this.InitCard(var1);
            this.InitTicket(var1);

            for(var2 = 0; var2 < 90; ++var2) {
               var3 = var2 * 100 + 30 + 53;
               ConfigData[var3 + 0] = (byte)(1000 >> 16 & 255);
               ConfigData[var3 + 1] = (byte)(1000 >> 8 & 255);
               ConfigData[var3 + 2] = (byte)(1000 & 255);
               ConfigData[var2 * 100 + 30 + 85] = 0;
               ConfigData[var2 * 100 + 30 + 2] = 0;
               var3 = var2 * 100 + 30 + 1;
               if (this.CheckDefaultCharctor(var1, var2)) {
                  ConfigData[var3] = 1;
               } else {
                  ConfigData[var3] = 0;
               }

               ConfigData[var2 * 100 + 30 + 3] = 0;
            }

            for(var2 = 0; var2 < this.pGameData.piGameDataYSize[163]; ++var2) {
               var3 = var2 * 100 + 30 + 53;
               var4 = this.pGameData.piGameData[this.pGameData.piGameDataPos[163] + this.pGameData.piGameDataXSize[163] * var2 + 0] * 1000;
               ConfigData[var3 + 0] = (byte)(var4 >> 16 & 255);
               ConfigData[var3 + 1] = (byte)(var4 >> 8 & 255);
               ConfigData[var3 + 2] = (byte)(var4 & 255);
               PlayerType[0] = var2;
               this.AddExp(var1, 0, this.pGameData.piGameData[this.pGameData.piGameDataPos[163] + this.pGameData.piGameDataXSize[163] * var2 + 1]);
               this.SetCardNo(var1, var2, 0, this.pGameData.piGameData[this.pGameData.piGameDataPos[163] + this.pGameData.piGameDataXSize[163] * var2 + 2]);
               this.SetCardNo(var1, var2, 1, this.pGameData.piGameData[this.pGameData.piGameDataPos[163] + this.pGameData.piGameDataXSize[163] * var2 + 3]);
               this.SetCardNo(var1, var2, 2, this.pGameData.piGameData[this.pGameData.piGameDataPos[163] + this.pGameData.piGameDataXSize[163] * var2 + 4]);
               this.SetCardNo(var1, var2, 3, this.pGameData.piGameData[this.pGameData.piGameDataPos[163] + this.pGameData.piGameDataXSize[163] * var2 + 5]);
               this.SetCardNo(var1, var2, 4, this.pGameData.piGameData[this.pGameData.piGameDataPos[163] + this.pGameData.piGameDataXSize[163] * var2 + 6]);
               this.SetCardNo(var1, var2, 5, this.pGameData.piGameData[this.pGameData.piGameDataPos[163] + this.pGameData.piGameDataXSize[163] * var2 + 7]);
               this.SetCardNo(var1, var2, 6, this.pGameData.piGameData[this.pGameData.piGameDataPos[163] + this.pGameData.piGameDataXSize[163] * var2 + 8]);
               this.SetCardNo(var1, var2, 7, this.pGameData.piGameData[this.pGameData.piGameDataPos[163] + this.pGameData.piGameDataXSize[163] * var2 + 9]);
            }

            for(var2 = 0; var2 < this.pGameData.piGameDataYSize[164]; ++var2) {
               for(var3 = 0; var3 < 7; ++var3) {
                  if (this.pGameData.piGameData[this.pGameData.piGameDataPos[164] + this.pGameData.piGameDataXSize[164] * var2 + var3] != 0) {
                     this.AddBall(var1, var3, 1);
                     if (this.CheckBallLine(var1)) {
                        this.AddBallLine(var1);
                     }
                  }
               }
            }
         }

         this.SetDefaultOpen(var1);
         this.BuyAppFree(var1);
         iMissionClear = ConfigData[12527];
         tcbNow.md = 684;
         tcbNow.lp = 0;
         break;
      case 684:
         iPlayMode = 6;
         iSystemFix = 0;
         this._TKilx(var1, 8193, 65535);
         this._FILESave(var1);
         this.InitGameData(var1);
         tcbNow.md = 685;
         tcbNow.lp = 0;
         break;
      case 685:
         this._TKilx(var1, 8193, 65535);
         iControlType[iPlayerNo] = 2;
         iRangeBulletGuard = this.pGameData.piGameData[this.pGameData.piGameDataPos[2] + this.pGameData.piGameDataXSize[2] * 0 + 0];
         iDistNear = this.pGameData.piGameData[this.pGameData.piGameDataPos[2] + this.pGameData.piGameDataXSize[2] * 1 + 0];
         iDistMiddle = this.pGameData.piGameData[this.pGameData.piGameDataPos[2] + this.pGameData.piGameDataXSize[2] * 2 + 0];
         iDistNearAir = this.pGameData.piGameData[this.pGameData.piGameDataPos[2] + this.pGameData.piGameDataXSize[2] * 1 + 1];
         iDistMiddleAir = this.pGameData.piGameData[this.pGameData.piGameDataPos[2] + this.pGameData.piGameDataXSize[2] * 2 + 1];
         iPlayerNo = 0;
         PlayerKey[0] = 0;
         PlayerKey[1] = 0;
         iFade = 0;
         bBlackOut = false;
         iBackMode = 0;
         iBackKeyType = 0;
         iPlayBGMNo = -1;
         tcbNow._work[0] = 0;
         tcbNow.md = 686;
         tcbNow.lp = 0;
         break;
      case 686:
         for(var2 = 1; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         LoadData[5] = 2;
         this.SetLoad(var1, true);
         tcbNow.md = 687;
         tcbNow.lp = 0;
         tcbNow._work[10] = 0;
         break;
      case 687:
         this._TKilx(var1, 24576, 24576);
         tcbEffect[1] = this.CreatePanelSingle(var1, 24576, 5, tcbNow._work[10], 12288, 0, 0, 0);
         tcbNow.md = 688;
         tcbNow.lp = 0;
         break;
      case 688:
         if ((tcbNow._work[10] == 0 || tcbNow._work[10] == 2) && (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0]) || TouchesXPos[0] > 0 && TouchesStatus[0] != 0)) {
            tcbNow.md = 689;
            tcbNow.lp = 0;
         }

         if ((tcbEffect[1].obj.wActFlag & 2) != 0) {
            tcbNow.md = 689;
            tcbNow.lp = 0;
         }
         break;
      case 689:
         if (tcbNow._work[10] == 4) {
            this._TKilx(var1, 24576, 24576);
            tcbNow.md = 690;
            tcbNow.lp = 0;
         } else {
            var9 = tcbNow._work;
            var10002 = var9[10]++;
            tcbNow.md = 687;
            tcbNow.lp = 0;
         }
         break;
      case 690:
         bClrBack = true;
         iClrR = 0;
         iClrG = 0;
         iClrB = 0;
         iSystemFix = -1;
         iPlayMode = 0;
         PlayerType[0] = -1;
         PlayerType[1] = -1;
         ActionPalette[3] = 0;
         ActionPalette[4] = 0;
         ActionPalette[1] = 0;
         iPlayBGMNo = -1;

         for(var2 = 1; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         LoadData[5] = 2;
         this.SetLoad(var1, true);
         iControlType[0] = ConfigData[4];
         tcbNow.md = 54;
         tcbNow.lp = 0;
         iControlType[2] = iControlType[0];
         break;
      case 691:
         wSystemFlag = 0;
         TCB var10 = this._TaskMake(var1, 808, 24576);
         var10._work[0] = 6;
         var10._work[1] = 12288;
         tcbNow.md = 692;
         tcbNow.lp = 0;
         break;
      case 692:
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 693;
            tcbNow.lp = 0;
         } else if (wSystemFlag > 2) {
            bTaskRepeat = true;
            tcbNow.md = 693;
            tcbNow.lp = 0;
         }
         break;
      case 693:
         this._TKilx(var1, 8193, 65535);

         for(var2 = 1; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         LoadData[1] = 0;
         LoadData[5] = 2;
         this.SetLoad(var1, true);
         this.GdtBGM(var1, 47);
         tcbEffect[3] = this._TaskMake(var1, 39, 24576);
         tcbEffect[3]._work[0] = 5;
         tcbEffect[3]._work[1] = 0;
         tcbEffect[3]._work[2] = 12288;
         tcbEffect[3]._work[3] = 0;
         tcbEffect[3]._work[4] = 0;
         tcbEffect[3]._work[5] = 0;
         tcbEffect[3]._work[6] = 1;
         tcbNow.md = 694;
         tcbNow.lp = 0;
         bDrawLoading = false;
         break;
      case 694:
         if (!this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0]) && (TouchesXPos[0] <= 0 || TouchesStatus[0] == 0)) {
            if (tcbEffect[3].obj.iSpriteStatus[18] != 0) {
               this._TKilx(var1, 24576, 24576);
               tcbEffect[3] = this._TaskMake(var1, 39, 24576);
               tcbEffect[3]._work[0] = 5;
               tcbEffect[3]._work[1] = 0;
               tcbEffect[3]._work[2] = 12288;
               tcbEffect[3]._work[3] = 1;
               tcbEffect[3]._work[4] = 0;
               tcbEffect[3]._work[5] = 0;
               tcbEffect[3]._work[6] = 1;
               tcbNow.md = 695;
               tcbNow.lp = 0;
            }
         } else {
            tcbNow.md = 697;
            tcbNow.lp = 0;
         }
         break;
      case 695:
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0]) || TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            tcbNow.md = 697;
            tcbNow.lp = 0;
         } else if (tcbEffect[3].obj.iSpriteStatus[18] != 0) {
            this._TKilx(var1, 24576, 24576);
            tcbEffect[3] = this._TaskMake(var1, 39, 24576);
            tcbEffect[3]._work[0] = 1;
            tcbEffect[3]._work[1] = 0;
            tcbEffect[3]._work[2] = 12288;
            tcbEffect[3]._work[3] = 0;
            tcbEffect[3]._work[4] = 0;
            tcbEffect[3]._work[5] = 0;
            tcbEffect[3]._work[6] = 1;
            tcbNow.md = 696;
            tcbNow.lp = 0;
         }
         break;
      case 696:
         if (!this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0]) && (TouchesXPos[0] <= 0 || TouchesStatus[0] == 0)) {
            if (tcbEffect[3].obj.iSpriteStatus[18] != 0) {
               tcbNow.md = 697;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
            }
         } else {
            tcbNow.md = 697;
            tcbNow.lp = 0;
         }
         break;
      case 697:
         this._TKilx(var1, 24576, 24576);
         tcbEffect[3] = this._TaskMake(var1, 39, 24576);
         tcbEffect[3]._work[0] = 1;
         tcbEffect[3]._work[1] = 0;
         tcbEffect[3]._work[2] = 12288;
         tcbEffect[3]._work[3] = 1;
         tcbEffect[3]._work[4] = 0;
         tcbEffect[3]._work[5] = 0;
         tcbEffect[3]._work[6] = 1;
         this.GdtBGM(var1, 1);
         tcbNow.md = 698;
         tcbNow.lp = 0;
         break;
      case 698:
         this._TLoop(var1, 10, 699);
         break;
      case 699:
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            tcbNow.md = 703;
            tcbNow.lp = 0;
         } else if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            iReqSENo = 7;
            this.PushSE(var1, 7);
            tcbNow.md = 700;
            tcbNow.lp = 0;
         }
         break;
      case 700:
         tcbEffect[3] = this._TaskMake(var1, 39, 24577);
         tcbEffect[3]._work[0] = 1;
         tcbEffect[3]._work[1] = 0;
         tcbEffect[3]._work[2] = 12288;
         tcbEffect[3]._work[3] = 2;
         tcbEffect[3]._work[4] = 0;
         tcbEffect[3]._work[5] = 0;
         tcbEffect[3]._work[6] = 1;
         tcbNow.md = 701;
         tcbNow.lp = 0;
         break;
      case 701:
         if (tcbEffect[3].obj.iSpriteStatus[18] != 0) {
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 702;
            tcbNow.lp = 0;
         }
         break;
      case 702:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 260;
            tcbNow.lp = 0;
         }
         break;
      case 703:
         tcbNow._work[14] = -1;
         this._TKilx(var1, 24676, 24676 + 20);
         this.TextGDTString(var1, 0, iLanguage, 1, 24676 + 20, 12338 + 85, 62, 108, 16);
         this.TextGDTString(var1, 0, iLanguage, 11, 24676 + 20, 12338 + 85, 98, 236, 16);
         this.TextGDTString(var1, 0, iLanguage, 12, 24676 + 20, 12338 + 85, 340, 236, 16);
         this.CreatePanelSingle(var1, 24676, 0, 274, 12338 + 3, 0, 0, 0);
         tcbNow.md = 704;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 704:
         var4 = tcbNow._work[14];
         if (this.CheckBack(var1, 10000, 10000, TouchesStatus[0])) {
            tcbNow._work[14] = 0;
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow.md = 705;
            tcbNow.lp = 0;
         } else {
            short var12 = 306;

            for(var2 = 0; var2 < 2; ++var2) {
               if (TouchesXPos[0] > var12 && TouchesXPos[0] < var12 + 120 && TouchesYPos[0] > 220 && TouchesYPos[0] < 220 + 50 && TouchesStatus[0] != 0) {
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  tcbNow._work[14] = var2;
                  tcbNow.md = 705;
                  tcbNow.lp = 0;
                  break;
               }

               var12 = 60;
            }
         }

         if (var4 != tcbNow._work[14]) {
            this._TKilx(var1, 24676, 24676);
            this.CreatePanelSingle(var1, 24676, 0, tcbNow._work[14] + 255, 12338 + 3, 0, 0, 0);
         }
         break;
      case 705:
         this._TLoop(var1, 45, 706);
         break;
      case 706:
         if (tcbNow._work[14] == 0) {
            this._TKilx(var1, 24676, 24676 + 20);
            tcbNow.md = 699;
            tcbNow.lp = 0;
         } else {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 707;
            tcbNow.lp = 0;
         }
         break;
      case 707:
         tcbNow.md = 708;
         tcbNow.lp = 0;
         break;
      case 708:
         this._TLoop(var1, 3, 709);
         break;
      case 709:
         this._TKilx(var1, 4096, 65535);
         var1.bThreadActive = false;
         break;
      case 710:
         this._SetAct(var1, 5, 0);
         this._ActReq(var1);
         this._SetObj(var1, -1);
         tcbNow.md = 711;
         tcbNow.lp = 0;
         break;
      case 711:
         var2 = tcbNow._work[0];
         if ((iEventStatus & 1795) == 0 && Life[0] > 0 && Life[1] > 0) {
            if (TouchesStatus[var2] == 1) {
               tcbNow._work[1] = 1;
               this._SetAct(var1, 5, 0);
               this._ActReq(var1);
               this._SetAct(var1, 5, 110);
               this._ActReq(var1);
               this._SetObj(var1, 16384);
               this._SetXY(var1, TouchesXPos[var2] << 16, TouchesYPos[var2] << 16);
            }

            if (tcbNow._work[1] != 0) {
               this._ActReq(var1);
               if ((objExec.wActFlag & 2) != 0) {
                  tcbNow._work[1] = 0;
                  this._SetAct(var1, 5, 0);
                  this._ActReq(var1);
                  this._SetObj(var1, -1);
               }
            }
         } else {
            this._SetObj(var1, -1);
         }
         break;
      case 712:
         bDrawLoading = true;
         tcbNow.md = 713;
         tcbNow.lp = 0;
         break;
      case 713:
         int var6 = iPlayerNo;
         var5 = 1 - iPlayerNo;
         bClrBack = true;
         iClrR = 0;
         iClrG = 0;
         iClrB = 0;
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);

            for(var2 = 0; var2 < 16; ++var2) {
               LoadData[var2 + 6] = -1;
            }

            LoadData[3] = -1;
            LoadData[4] = -1;
            iJoyBufCount = 0;
            iTouchesCommandCount = 0;
            iBackKeyType = 1;
            this.SetLoad(var1, true);
            LoadData[3] = PlayerType[0];
            LoadData[4] = PlayerType[1];
            LoadData[5] = 0;
            LoadData[27] = PlayerType[0];
            LoadData[28] = PlayerType[1];
            PlayerAttackFlag[0] = 0;
            PlayerAttackFlag[1] = 0;
            PlayerEventFlag[0] = 0;
            PlayerEventFlag[1] = 0;
            MaxComboCount[0] = 0;
            MaxComboCount[1] = 0;
            RoundLose = 0;
            StageWin = 0;
            TotalTime = 0;
            byte var11;
            byte var14;
            if (var6 == 0) {
               var14 = 6;
               var11 = 14;
            } else {
               var14 = 14;
               var11 = 6;
            }

            iStagePoint = this.GetStagePoint(var1, iStage);

            for(var4 = 0; var4 < 8; ++var4) {
               if (PlayerCardCount[var6] > var4) {
                  LoadData[var14 + var4] = PlayerCard[var6][var4] + 255;
               }

               if (PlayerCardCount[var5] > var4) {
                  LoadData[var11 + var4] = PlayerCard[var5][var4] + 255;
               }
            }

            this.SetLoad(var1, true);
            tcbNow.md = 714;
            tcbNow.lp = 0;
         }
         break;
      case 714:
                var2 = iPlayerNo;
                var2 = 1 - iPlayerNo;
                if (LoadingProcess(var1)) {
                    if (iPlayMode == 8) {
                        iBackNo = this.ChrGameData[4].piGameData[(this.ChrGameData[4].piGameDataPos[39] + (this.ChrGameData[4].piGameDataXSize[39] * 0)) + 0];
                    } else {
                        iBackNo = this.ChrGameData[var2 + 3].piGameData[(this.ChrGameData[var2 + 3].piGameDataPos[39] + (this.ChrGameData[var2 + 3].piGameDataXSize[39] * 0)) + 0];
                    }
                    LoadData[1] = iBackNo + 1;
                    LoadData[2] = LoadData[1];
                    SetLoad(var1, true);
                    tcbNow.md = 715;
                    tcbNow.lp = 0;
                    return;
                }
                return;
      case 715:
         this._TLoop(var1, 16, 716);
         break;
      case 716:
         var2 = iPlayerNo;
         bClrBack = true;
         iClrR = 0;
         iClrG = 0;
         iClrB = 0;
         this._TKilx(var1, 8193, 65535);
         bBackVisible = true;
         iMissionPross = 0;
         iMissionJoyFillter = 0;
         iZoomBase = 100;
         iBackXSize = 0;
         iScoreClearCounter = 0;
         bFlipWait = false;
         PerfectNum[0] = 0;
         PerfectNum[1] = 0;

         for(var2 = 0; var2 <= 1; ++var2) {
            if (iPlayMode == 0) {
               bStartAction[var2] = false;
            } else {
               bStartAction[var2] = true;
            }

            iTCBReqNum[var2] = 0;
         }

         iSystemFix = 14;
         if (iPlayMode == 0 && iStage == iStageMax) {
            this.GdtBGM(var1, 19);
         } else {
            this.GdtBGM(var1, iStageBGM + 55);
            iStageBGM = (iStageBGM + 1) % 41;
         }

         tcbNow.md = 717;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 717:
         if (iPlayMode == 8) {
            this.BTDataSet(var1, 6);
         }

         tcbNow.md = 718;
         tcbNow.lp = 0;
         break;
      case 718:
         bBlackOut = false;
         if (iPlayMode == 2) {
            CPULevel[1] = PracticeSetting[3];

            for(var2 = 0; var2 <= 1; ++var2) {
               Score[var2] = 0;
            }
         }

         if (iPlayMode != 1 || iStage == 0) {
            PlayerLife[0] = this.GetHP(var1, 0);
         }

         PlayerLife[1] = this.GetHP(var1, 1);
         if (this.pGameData.piGameData[this.pGameData.piGameDataPos[166] + this.pGameData.piGameDataXSize[166] * 1 + 0] != 0) {
            PlayerLife[1] = 1;
         }

         iTimer = 60;

         for(var2 = 0; var2 <= 1; ++var2) {
            SynchroMax[var2] = this.GetSynchro(var1, var2);
            var8 = SynchroMax;
            var8[var2] += this.GetCardSynchroStock(var1, var2);
            Life[var2] = PlayerLife[var2];
            if (iRound == 0) {
               Angry[var2] = 0;
               AngryOn[var2] = false;
            }

            AngryLoop[var2] = false;
            AngrySubTime[var2] = 6;
            if (PracticeSetting[1] != 0 || this.GetCardAngry(var1, var2) != 0) {
               Angry[var2] = 100;
               AngryOn[var2] = true;
               AngryLoop[var2] = true;
            }
         }

         if (iRound == 0) {
            iRushType = 0;
            StageTime[0] = 0;
            StageTime[1] = 0;
            TotalDamage[0] = 0;
            TotalDamage[1] = 0;
            Synchro[0] = this.GetCardSynchro(var1, 0);
            Synchro[1] = this.GetCardSynchro(var1, 1);
            if (SynchroMax[0] < Synchro[0]) {
               Synchro[0] = SynchroMax[0];
            }

            if (SynchroMax[1] < Synchro[1]) {
               Synchro[1] = SynchroMax[1];
            }

            PlayerNameType[0] = 27;
            PlayerNameType[1] = 28;
         }

         for(var2 = 0; var2 <= 1; ++var2) {
            AttackMul[var2] = this.GetAttack(var1, var2);
            var8 = AttackMul;
            var8[var2] += this.GetCardAttack(var1, var2);
            DeffenceMul[var2] = this.GetDeffence(var1, var2);
            var8 = DeffenceMul;
            var8[var2] += this.GetCardDeffence(var1, var2);
            ComboCount[var2] = 0;
            PlayerState[var2] = 0;
            PlayerKey[var2] = 0;
            DamageWall[var2] = false;
            CPUGuard[var2] = 0;
            HitFocusTarget[var2] = -1;
            Exp[var2] = this.GetExp(var1, PlayerType[var2]);
            PlayerAir[var2] = false;
            boolean[] var15 = AirType;
            boolean var7;
            if (this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 6] == 0) {
               var7 = false;
            } else {
               var7 = true;
            }

            var15[var2] = var7;
            PlayerSearch[var2] = false;
            PlayerYLimit[var2] = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 4] + 0;
            ScrollCheckOff[var2] = false;
            ScreenEdgeOff[var2] = false;
            PlayerAttack[var2] = 0;
            CancelTime[var2] = 0;
            AICtrl[var2] = false;
            this.CreatePlayer(var1, var2);
         }

         var8 = PlayerState;
         var8[0] |= 262140;
         var8 = PlayerState;
         var8[1] |= 262140;
         iMarkVisible = 0;
         this.CreateCamera(var1);
         iSmokeEffectNumber = 0;
         bScrollLock = false;
         iBaseXPos = 31457280;
         iBackYPos = 0;
         iBackMode = 0;
         iBackShake = 0;
         iBackShakeType = 0;
         iBackXAdd = 0;
         iBackXOffset = 0;
         iBackYOffset = 0;
         iBackXScroll = 0;
         iBackXSize = 0;
         bGameStart = false;
         bEffectFullScreen = false;
         iFocusTarget = -1;
         bForceWall = false;
         iScrollTarget = -1;
         if (iPlayMode == 0 && iRound == 0) {
            iBackYScroll = -168;
         } else {
            iBackYScroll = 0;
         }

         var4 = iPlayerNo;
         var2 = 1 - var4;
         if (PlayerType[var4] == PlayerType[var2]) {
            iMarkVisible = 0;
            this._TaskMake(var1, 938, var2 + 13696)._work[0] = var2;
         }

         this.CreateWipeInOut(var1, 2);
         this._TaskMake(var1, 797, 14080);
         this._TaskMake(var1, 19, 13745);
         this._TaskMake(var1, 2, 16128);

         for(var2 = 0; var2 < 3; ++var2) {
            for(var3 = 0; var3 < 2; ++var3) {
               JoyTrigBuf[var3][var2] = 0;
               JoyBuf[var3][var2] = 0;
               JoyTrigWork[var3][var2] = 0;
               JoyWork[var3][var2] = 0;
               JoyTrig[var3] = 0;
               Joy[var3] = 0;
            }
         }

         iMarkVisible = 1;
         this.CreateGamepad(var1, var4);
         bDrawSkip = false;
         bAIStart[0] = false;
         bAIStart[1] = false;
         bDrawLoading = false;
         if (iPlayMode == 8) {
            tcbNow.md = 719;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 720;
            tcbNow.lp = 0;
         }
         break;
      case 719:
         if (iPlayMode == 8) {
            this.BTDataSet(var1, 6);
         }

         tcbNow.md = 720;
         tcbNow.lp = 0;
         break;
      case 720:
         if (iBackXSize != 0) {
            if (iPlayMode == 8) {
               bDrawLoading = true;
            }

            iBackXPos = iBackXSize * 4 << 16;
            PlayerXPos[0] = iBackXPos + 7864320;
            PlayerXPos[1] = iBackXPos + 23592960;
            PlayerOldXPos[0] = PlayerXPos[0];
            PlayerOldXPos[1] = PlayerXPos[1];
            if (iPlayMode == 0 && iRound == 0) {
               bStartAction[0] = true;
               tcbNow.md = 743;
               tcbNow.lp = 0;
            } else if (iFade == 255 || iFade == 0) {
               bDrawLoading = false;
               tcbNow.md = 721;
               tcbNow.lp = 0;
            }
         }
         break;
      case 721:
         var3 = iPlayerNo;
         var4 = 1 - var3;

         for(var2 = 0; var2 <= 1; ++var2) {
            CPURand[var2] = 0;
            JoyTrig[var2] = 0;
            PlayerKey[var2] = 0;
         }

         bAIStart[0] = false;
         bAIStart[1] = false;
         bGameStart = true;
         TCB var13 = this._TaskMake(var1, 946, var3 + 13056);
         var13._work[0] = var3;
         var13._work[1] = var4;
         var13._work[2] = 0;
         var13._work[3] = 0;
         if (iPlayMode != 3 && iPlayMode != 8) {
            var13 = this._TaskMake(var1, 951, 13185);
            AICtrl[1] = true;
         } else {
            var13 = this._TaskMake(var1, 946, var4 + 13056);
         }

         var13._work[0] = var4;
         var13._work[1] = var3;
         var13._work[2] = 0;
         var13._work[3] = 0;
         if (iControlType[iPlayerNo] == 2) {
            for(var2 = 0; var2 < 1; this._TaskMake(var1, 710, 13056)._work[0] = var2++) {
            }
         }

         iExtCount = 40;
         this._TaskMake(var1, 935, 13728);
         tcbNow.md = 722;
         tcbNow.lp = 0;
         break;
      case 722:
         if (iPlayMode != 0 && iPlayMode != 8 && iPlayMode != 5) {
            tcbNow.md = 724;
            tcbNow.lp = 0;
         } else {
            if (this.isMission(var1) == 0 && iStage <= 3 && iPlayMode != 8) {
               switch(iStage) {
               case 0:
                  this.CreatePanelSingle(var1, 20480, 5, 164, 400, 0, 0, 0);
                  break;
               case 1:
                  this.CreatePanelSingle(var1, 20480, 5, 165, 400, 0, 0, 0);
                  break;
               case 2:
                  this.CreatePanelSingle(var1, 20480, 5, 166, 400, 0, 0, 0);
                  break;
               case 3:
                  this.CreatePanelSingle(var1, 20480, 5, 167, 400, 0, 0, 0);
               }
            } else {
               switch(iRound) {
               case 0:
                  this.CreatePanelSingle(var1, 20480, 5, 160, 400, 0, 0, 0);
                  break;
               case 1:
                  this.CreatePanelSingle(var1, 20480, 5, 161, 400, 0, 0, 0);
                  break;
               default:
                  this.CreatePanelSingle(var1, 20480, 5, 162, 400, 0, 0, 0);
                  this.CreatePanelSingle(var1, 20480, 5, 180, 400, 0, 0, 0);
               }
            }

            tcbNow.md = 723;
            tcbNow.lp = 0;
         }
         break;
      case 723:
         this._TLoop(var1, 79, 724);
         break;
      case 724:
         this._TFlag(var1, 20481, 20481, 772);
         this._TFlag(var1, 20482, 20482, 770);
         if (iTimer != 60) {
            tcbNow.md = 726;
            tcbNow.lp = 0;
         } else {
            this.CreatePanelSingle(var1, 20480, 5, 181, 400, 0, 0, 0);
            tcbNow.md = 725;
            tcbNow.lp = 0;
         }
         break;
      case 725:
         this._TLoop(var1, 70, 726);
         break;
      case 726:
         this.CreatePanelSingle(var1, 20480, 5, 230, 400, 0, 0, 0);
         tcbNow.md = 727;
         tcbNow.lp = 0;
         break;
      case 727:
         this._TLoop(var1, 60, 728);
         break;
      case 728:
         this._TKilx(var1, 20480, 20482);
         tcbNow._work[0] = 0;
         bAIStart[0] = true;
         bAIStart[1] = true;
         iMarkVisible = 0;
         tcbNow.md = 729;
         tcbNow.lp = 0;
         break;
      case 729:
         iExtOn = 1;
         if (iPlayMode == 2) {
            var9 = tcbNow._work;
            var10002 = var9[1]++;
         } else {
            iLifeDamage[0] = 0;
            iLifeDamage[1] = 0;
            if (this.MissionClearCheck(var1, 0, iStage) != 0) {
               iMarkVisible = 1;
               PlayerKey[0] = 0;
               PlayerKey[1] = 0;
               this._TKilx(var1, 13056, 13056);
               this._TKilx(var1, 13184, 13185);
               tcbNow.md = 735;
               tcbNow.lp = 0;
            } else if ((Life[0] <= 0 || Life[1] <= 0) && (PlayerState[0] & 33554432) == 0 && (PlayerState[1] & 33554432) == 0) {
               bTaskNext = true;
               tcbNow.md = 735;
               tcbNow.lp = 0;
               iMarkVisible = 1;
            } else if (iTimer > 0 && !bFlipWait && tcbPlayer[0].md != 925 && tcbPlayer[1].md != 925) {
               if ((iEventStatus & 1793) == 0 && (this.isMission(var1) != 0 || this.isMission(var1) == 0 && iStage > 3 || iPlayMode == 8)) {
                  var8 = tcbNow._work;
                  var10002 = var8[0]++;
                  var8 = tcbNow._work;
                  var10002 = var8[1]++;
                  if (tcbNow._work[0] >= 100) {
                     --iTimer;
                     tcbNow._work[0] = 0;
                  }
               }

               if (iTimer == 0) {
                  iMarkVisible = 1;
                  this.CreatePanelSingle(var1, 20480, 5, 236, 400, 0, 0, 0);
                  this.CreatePanelSingle(var1, 20480, 5, 245, 400, 0, 0, 0);
                  PlayerKey[0] = 0;
                  PlayerKey[1] = 0;
                  this._TKilx(var1, 13056, 13056);
                  this._TKilx(var1, 13184, 13185);
                  tcbNow.md = 732;
                  tcbNow.lp = 0;
               }
            }
         }
      }

   }

   public void Game10(GlobalWork var1, int var2) {
      int var3;
      int var4;
      int var5;
      int var6;
      int var7;
      int var8;
      int var9;
      int[] var11;
      int[] var12;
      ObjReq var13;
      byte var14;
      byte var15;
      TCB var16;
      short var17;
      int var10002;
      byte var18;
      ObjReq var21;
      short var22;
      switch(var2) {
      case 0:
      case 427:
      case 430:
      case 445:
      case 455:
      default:
         break;
      case 428:
         var2 = tcbNow._work[0];
         this._ActReq(var1);
         this.ChrSePlay(var1, var2);
         break;
      case 429:
         var13 = objExec;
         var13.wObjFlag |= 1;
         break;
      case 431:
         this.PlayerTail(var1);
         var13 = objExec;
         var13.wObjFlag |= 1;
         break;
      case 432:
         var2 = tcbNow._work[0];
         this._SetObjFlag(var1, tcbNow.obj, 1, false);
         if (iPushTarget == 0) {
            iCameraLock = 0;
         } else {
            iCameraLock = 1;
         }

         var3 = objExec.prio;
         _cameraPrio = 3;
         this._TKilx(var1, 13632, 13633);
         this._TKilx(var1, 13588, 13589);
         var16 = this._TaskMake(var1, 974, iPushTarget + 13632);
         var16._work[0] = iPushTarget;
         var16._work[1] = tcbPlayer[iPushTarget].obj.wObjFlag & 16;
         var16 = this._TaskMake(var1, 965, iPushTarget + 13588);
         var16._work[0] = 4;
         var16._work[3] = PlayerXPos[iPushTarget];
         var16._work[4] = PlayerYPos[iPushTarget];
         var16._work[5] = 0;
         this._SetAct(var1, objExec.acttype, 260);
         this._SetObj(var1, var3);
         this._ActReq(var1);
         this.ChrSePlay(var1, var2);
         tcbNow.md = 434;
         tcbNow.lp = 0;
         break;
      case 433:
         var2 = tcbNow._work[0];
         this._SetObjFlag(var1, tcbNow.obj, 1, false);
         if (iPushTarget == 0) {
            iCameraLock = 0;
         } else {
            iCameraLock = 1;
         }

         var2 = objExec.prio;
         _cameraPrio = 3;
         this._TKilx(var1, 13632, 13633);
         this._TKilx(var1, 13588, 13589);
         var16 = this._TaskMake(var1, 974, iPushTarget + 13632);
         var16._work[0] = iPushTarget;
         var16._work[1] = tcbPlayer[iPushTarget].obj.wObjFlag & 16;
         var16 = this._TaskMake(var1, 965, iPushTarget + 13588);
         var16._work[0] = 4;
         var16._work[3] = PlayerXPos[iPushTarget];
         var16._work[4] = PlayerYPos[iPushTarget];
         var16._work[5] = 0;
         this._SetAct(var1, objExec.acttype, 260);
         this._SetObj(var1, var2);
         this._ActReq(var1);
         tcbNow.md = 434;
         tcbNow.lp = 0;
         break;
      case 434:
         _cameraPrio = 3;
         this._TLoop(var1, 120, 435);
         break;
      case 435:
         _cameraPrio = 3;
         this._TKilx(var1, 13632, 13633);
         tcbNow.md = 436;
         tcbNow.lp = 0;
         break;
      case 436:
         var2 = tcbNow._work[0];
         _cameraPrio = 0;
         iCameraLock = -1;
         this._ActReq(var1);
         this.ChrSePlay(var1, var2);
         this.PlayerTail(var1);
         break;
      case 437:
         var2 = tcbNow._work[0];
         this._SetAct(var1, objExec.acttype, 260);
         this._ActReq(var1);
         this.ChrSePlay(var1, var2);
         iCameraLock = -1;
         tcbNow.md = 438;
         tcbNow.lp = 0;
         break;
      case 438:
         var2 = tcbNow._work[0];
         this._ActReq(var1);
         this.ChrSePlay(var1, var2);
         break;
      case 439:
         this._SetObjFlag(var1, tcbNow.obj, 1, false);
         this._SetAct(var1, objExec.acttype, 262);
         this.PlayerTail(var1);
         tcbNow.md = 440;
         tcbNow.lp = 0;
         break;
      case 440:
         this.PlayerTail(var1);
         if ((objExec.wActFlag & 2) != 0) {
            tcbNow.md = 864;
            tcbNow.lp = 0;
         }
         break;
      case 441:
         this._SetObjFlag(var1, tcbNow.obj, 1, false);
         tcbNow.md = 869;
         tcbNow.lp = 0;
         break;
      case 442:
         var2 = tcbNow._work[0];
         tcbNow.md = 443;
         tcbNow.lp = 0;
         break;
      case 443:
         var2 = tcbNow._work[0];
         ThrowDamage[var2] = false;
         DamageType[var2] = 16;
         DamageIndex[var2] = 0;
         DamageTime[var2] = 0;
         DamageOldIndex[var2] = DamageIndex[var2];
         DamageOldType[var2] = DamageType[var2];
         tcbNow.md = 876;
         tcbNow.lp = 0;
         break;
      case 444:
         var2 = tcbNow._work[0];
         this.PlayerTail(var1);
         boolean var10;
         if (!PlayerAir[var2]) {
            var10 = true;
         } else {
            var10 = false;
         }

         this.CommonNormal(var1, var10, true, true, true, true);
         tcbNow.md = 445;
         tcbNow.lp = 0;
         break;
      case 446:
         this.PlayerTail(var1);
         break;
      case 447:
         var2 = tcbNow._work[0];
         this._SetAct(var1, objExec.acttype, 1);
         this._ActReq(var1);
         iCameraLock = -1;
         this.CmdClear(var1, var2);
         this._SetObjFlag(var1, tcbNow.obj, 1, false);
         this.PlayerTail(var1);
         PlayerAir[var2] = false;
         PlayerYPos[var2] = 0;
         PlayerOldXPos[var2] = PlayerXPos[var2];
         tcbNow.md = 864;
         tcbNow.lp = 0;
         break;
      case 448:
         var2 = tcbNow._work[0];
         this.PlayerTail(var1);
         if (PlayerYPos[var2] >= 15728640) {
            PlayerYPos[var2] = 15728640;
            this.CmdClear(var1, var2);
            PlayerAir[var2] = AirType[var2];
            tcbNow.md = 864;
            tcbNow.lp = 0;
         }
         break;
      case 449:
         var3 = tcbNow._work[0];
         var2 = objExec.prio;
         this._SetAct(var1, objExec.acttype, 335);
         this._SetObj(var1, var2);
         this._ActReq(var1);
         this.ChrSePlay(var1, var3);
         tcbNow.md = 450;
         tcbNow.lp = 0;
         break;
      case 450:
         var2 = tcbNow._work[0];
         this._ActReq(var1);
         this.ChrSePlay(var1, var2);
         break;
      case 451:
         this._SetAct(var1, 1, 0);
         this._SetObj(var1, tcbNow._work[1]);
         this.SpriteSet(objExec, tcbNow._work[2]);
         this._ActReq(var1);
         tcbNow._work[10] = 0;
         objExec.x = tcbNow._work[3] << 16;
         objExec.y = tcbNow._work[4] << 16;
         tcbNow.md = 452;
         tcbNow.lp = 0;
         break;
      case 452:
         this.SpriteRun(objExec);
         if (iEventBackScroll) {
            tcbNow._work[10] = (tcbNow._work[5] + tcbNow._work[10]) % 512;
            if (tcbNow._work[0] == 0) {
               objExec.x = tcbNow._work[3] + tcbNow._work[10] << 16;
            } else {
               objExec.x = tcbNow._work[3] - tcbNow._work[10] << 16;
            }

            objExec.y = tcbNow._work[4] << 16;
         }
         break;
      case 453:
         iTimingStatus = 0;
         this._SetAct(var1, 5, 311);
         this._SetObj(var1, tcbNow._work[1]);
         this._ActReq(var1);
         objExec.x = tcbNow._work[2] << 16;
         objExec.y = tcbNow._work[3] << 16;
         tcbNow.md = 454;
         tcbNow.lp = 0;
         break;
      case 454:
         if (TouchesXPos[0] != 0 && TouchesYPos[0] > 80) {
            tcbNow.md = 455;
            tcbNow.lp = 0;
            iReqSENo = 16;
            this.PushSE(var1, 16);
            if (objExec.time > 0 && objExec.time < 8) {
               iTimingStatus = 1;
            } else {
               iTimingStatus = 2;
            }
         } else {
            this._ActReq(var1);
         }
         break;
      case 456:
         this._TKilx(var1, 12625, 12644);
         iEventBackScroll = true;
         iMarkVisible = 1;
         bBackVisible = false;
         tcbPlayer[0].md = 429;
         tcbPlayer[1].md = 429;
         short var23;
         if (tcbNow._work[0] == 0) {
            var2 = var1.iScreenScalWidth - 512 - var1.iScreenOffsetX;
            var23 = -512;
         } else {
            var23 = 512;
            var2 = -var1.iScreenOffsetX;
         }

         var16 = this._TaskMake(var1, 451, 12625);
         var16._work[0] = tcbNow._work[0];
         var16._work[1] = 201;
         var16._work[2] = this.ChrGameData[1].piGameData[this.ChrGameData[1].piGameDataPos[2] + this.ChrGameData[1].piGameDataXSize[2] * 0 + 0];
         var16._work[3] = var2;
         var16._work[4] = tcbNow._work[3];
         var16._work[5] = 24;
         var16 = this._TaskMake(var1, 451, 12625);
         var16._work[0] = tcbNow._work[0];
         var16._work[1] = 201;
         var16._work[2] = this.ChrGameData[1].piGameData[this.ChrGameData[1].piGameDataPos[2] + this.ChrGameData[1].piGameDataXSize[2] * 0 + 0];
         var16._work[3] = var2 + var23;
         var16._work[4] = tcbNow._work[3];
         var16._work[5] = 24;
         var16 = this._TaskMake(var1, 451, 12625);
         var16._work[0] = tcbNow._work[0];
         var16._work[1] = 201;
         var16._work[2] = this.ChrGameData[1].piGameData[this.ChrGameData[1].piGameDataPos[2] + this.ChrGameData[1].piGameDataXSize[2] * 0 + 0];
         var16._work[3] = var23 * 2 + var2;
         var16._work[4] = tcbNow._work[3];
         var16._work[5] = 24;
         var16 = this._TaskMake(var1, 451, 12625);
         var16._work[0] = tcbNow._work[0];
         var16._work[1] = 200;
         var16._work[2] = this.ChrGameData[1].piGameData[this.ChrGameData[1].piGameDataPos[2] + this.ChrGameData[1].piGameDataXSize[2] * 0 + 1];
         var16._work[3] = var2;
         var16._work[4] = 0;
         var16._work[5] = 12;
         var16 = this._TaskMake(var1, 451, 12625);
         var16._work[0] = tcbNow._work[0];
         var16._work[1] = 200;
         var16._work[2] = this.ChrGameData[1].piGameData[this.ChrGameData[1].piGameDataPos[2] + this.ChrGameData[1].piGameDataXSize[2] * 0 + 1];
         var16._work[3] = var2 + var23;
         var16._work[4] = 0;
         var16._work[5] = 12;
         var16 = this._TaskMake(var1, 451, 12625);
         var16._work[0] = tcbNow._work[0];
         var16._work[1] = 200;
         var16._work[2] = this.ChrGameData[1].piGameData[this.ChrGameData[1].piGameDataPos[2] + this.ChrGameData[1].piGameDataXSize[2] * 0 + 1];
         var16._work[3] = var23 * 2 + var2;
         var16._work[4] = 0;
         var16._work[5] = 12;
         this.CreatePanelSingle(var1, 12634, 5, 67, 201, 16, 480, 0);
         tcbPlayer[0].md = 430;
         tcbPlayer[1].md = 430;
         iEventStatus &= -769;
         if (tcbNow._work[0] == 0) {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12629, tcbNow._work[2] + 3, 296, 206, 0, 240, 220);
            tcbEffect[1]._work[20] = tcbNow._work[2] + 1;
         } else {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12629, tcbNow._work[2] + 3, 296, 206, 16, 240, 220);
            tcbEffect[1]._work[20] = tcbNow._work[2] + 1;
         }

         if (1000 > 500 && tcbNow._work[20] > 0 && Life[tcbNow._work[2]] > 0) {
            if (iPlayMode == 8) {
               if (tcbNow._work[1] == iPlayerNo) {
                  this.CreatePanelSingle(var1, 12626, 5, 301, 210, 0, 0, 160);
                  this.CreatePanelSingle(var1, 12627, 5, 310, 207, 0, 240, 160);
               }
            } else {
               if (tcbNow._work[2] == 0) {
                  this.CreatePanelSingle(var1, 12626, 5, 302, 210, 0, 0, 160);
               } else {
                  this.CreatePanelSingle(var1, 12626, 5, 301, 210, 0, 0, 160);
               }

               this.CreatePanelSingle(var1, 12627, 5, 310, 207, 0, 240, 160);
            }

            tcbNow.md = 458;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 457;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 457:
         if (tcbNow._work[21] >= 4) {
            tcbNow.md = 492;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         } else {
            this._TLoop(var1, 60, 481);
         }
         break;
      case 458:
         this._TLoop(var1, 30, 459);
         break;
      case 459:
         this._TKilx(var1, 12626, 12626);
         iTimingStatus = 0;
         if (iPlayMode == 8) {
            bEventValue[0][2] = 0;
            bEventValue[1][2] = 0;
            if (tcbNow._work[1] == iPlayerNo) {
               var16 = this._TaskMake(var1, 453, 12626);
               var16._work[1] = 206;
               var16._work[2] = 240;
               var16._work[3] = 160;
               var16._work[4] = tcbNow._work[1];
               this._TaskMake(var1, 666, 12636)._work[0] = 5;
               var16 = this._TaskMake(var1, 646, 12636);
               var16._work[2] = 300;
               var16._work[3] = 260;
               this.CreatePanelSingle(var1, 12636, 5, 319, 12340, 0, 240, 270);
               this.CreatePanelSingle(var1, 12628, 5, 313, 208, 0, 240, 160);
            } else {
               iPushTimer = 1;
            }
         } else {
            var16 = this._TaskMake(var1, 453, 12626);
            var16._work[1] = 206;
            var16._work[2] = 240;
            var16._work[3] = 160;
            var16._work[4] = iPlayerNo;
            this._TaskMake(var1, 666, 12636)._work[0] = 5;
            var16 = this._TaskMake(var1, 646, 12636);
            var16._work[2] = 300;
            var16._work[3] = 260;
            this.CreatePanelSingle(var1, 12636, 5, 319, 12340, 0, 240, 270);
            this.CreatePanelSingle(var1, 12628, 5, 313, 208, 0, 240, 160);
         }

         tcbNow.md = 460;
         tcbNow.lp = 0;
         break;
      case 460:
         var2 = iPlayerNo;
         if (iPlayMode == 8) {
            if (tcbNow._work[1] == iPlayerNo) {
               if (iTimingStatus != 0 || iPushTimer == 0) {
                  if (iTimingStatus == 0) {
                     iTimingStatus = 2;
                  }

                  tcbNow.md = 463;
                  tcbNow.lp = 0;
               }
            } else {
               bEventValue[1 - var2][2] = 0;
               iTimingStatus = 0;
               tcbNow.md = 464;
               tcbNow.lp = 0;
            }
         } else if (iTimingStatus != 0 || iPushTimer == 0) {
            tcbNow.md = 461;
            tcbNow.lp = 0;
         }
         break;
      case 461:
         this._TLoop(var1, 5, 462);
         break;
      case 462:
         if (iTimingStatus == 1) {
            this._TKilx(var1, 12636, 12637);
            tcbNow.md = 471;
            tcbNow.lp = 0;
            iReqSENo = 9;
            this.PushSE(var1, 9);
            var12 = tcbNow._work;
            var10002 = var12[20]--;
         } else if (iTimingStatus == 2 || iPushTimer == 0) {
            this._TKilx(var1, 12636, 12637);
            iReqSENo = 17;
            this.PushSE(var1, 17);
            tcbNow.md = 468;
            tcbNow.lp = 0;
            var12 = tcbNow._work;
            var10002 = var12[20]--;
         }
         break;
      case 463:
         bEventValueBuf[2] = (byte)(iTimingStatus & 255);
         tcbNow.md = 465;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 464:
         var2 = iPlayerNo;
         iTimingStatus = bEventValue[1 - var2][2];
         if (iTimingStatus != 0) {
            tcbNow.md = 465;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 465:
         var2 = iPlayerNo;
         if (iTimingStatus == 1) {
            this._TKilx(var1, 12636, 12637);
            var11 = tcbNow._work;
            var10002 = var11[20]--;
            tcbNow.md = 466;
            tcbNow.lp = 0;
         } else if (iTimingStatus == 2) {
            this._TKilx(var1, 12636, 12637);
            var11 = tcbNow._work;
            var10002 = var11[20]--;
            tcbNow.md = 467;
            tcbNow.lp = 0;
         }

         this.Game(var1, tcbNow.md);
         break;
      case 466:
         var2 = iPlayerNo;
         bEventValueBuf[0] = 2;
         if (bEventValue[var2][0] == 2 && bEventValue[1 - var2][0] == 2) {
            iReqSENo = 9;
            this.PushSE(var1, 9);
            tcbNow.md = 471;
            tcbNow.lp = 0;
         }
         break;
      case 467:
         var2 = iPlayerNo;
         bEventValueBuf[0] = 2;
         if (bEventValue[var2][0] == 2 && bEventValue[1 - var2][0] == 2) {
            iReqSENo = 17;
            this.PushSE(var1, 17);
            tcbNow.md = 468;
            tcbNow.lp = 0;
         }
         break;
      case 468:
         this._TKilx(var1, 12628, 12628);
         this.CreatePanelSingle(var1, 12628, 5, 315, 207, 0, 240, 160);
         tcbNow.md = 469;
         tcbNow.lp = 0;
         break;
      case 469:
         this._TLoop(var1, 40, 470);
         break;
      case 470:
         this._TKilx(var1, 12626, 12628);
         if (iPlayMode == 8) {
            this._TLoop(var1, 20, 509);
         } else if (tcbNow._work[2] == iPlayerNo) {
            this._TLoop(var1, 20, 475);
         } else {
            this._TLoop(var1, 20, 509);
         }
         break;
      case 471:
         this._TKilx(var1, 12628, 12628);
         this.CreatePanelSingle(var1, 12628, 5, 314, 207, 0, 240, 160);
         tcbNow.md = 472;
         tcbNow.lp = 0;
         break;
      case 472:
         this._TLoop(var1, 40, 473);
         break;
      case 473:
         this._TKilx(var1, 12626, 12628);
         tcbNow.md = 474;
         tcbNow.lp = 0;
         break;
      case 474:
         if (iPlayMode == 8) {
            this._TLoop(var1, 20, 475);
         } else if (tcbNow._work[2] == iPlayerNo) {
            this._TLoop(var1, 20, 509);
         } else {
            this._TLoop(var1, 20, 475);
         }
         break;
      case 475:
         if (tcbNow._work[0] == 0) {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12628, tcbNow._work[1] + 3, 299, 204, 16, 480, 220);
            tcbEffect[2] = this.CreatePanelSingle(var1, 12628, tcbNow._work[1] + 3, 309, 205, 16, 2240, 220);
            tcbEffect[1]._work[20] = tcbNow._work[1] + 1;
            tcbEffect[2]._work[20] = tcbNow._work[1] + 1;
         } else {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12628, tcbNow._work[1] + 3, 299, 204, 0, 0, 220);
            tcbEffect[2] = this.CreatePanelSingle(var1, 12628, tcbNow._work[1] + 3, 309, 205, 0, -1240, 220);
            tcbEffect[1]._work[20] = tcbNow._work[1] + 1;
            tcbEffect[2]._work[20] = tcbNow._work[1] + 1;
         }

         tcbNow.md = 476;
         tcbNow.lp = 0;
         break;
      case 476:
         if (tcbNow._work[0] == 0) {
            tcbEffect[2].obj.x = tcbEffect[1].obj.x - 3276800;
         } else {
            tcbEffect[2].obj.x = tcbEffect[1].obj.x + 3276800;
         }

         tcbEffect[2].obj.y = tcbEffect[1].obj.y - 3276800;
         if ((tcbEffect[1].obj.wActFlag & 2) != 0) {
            tcbNow.md = 477;
            tcbNow.lp = 0;
         }
         break;
      case 477:
         var2 = iPlayerNo;
         var2 = iPlayerNo;
         var2 = tcbEffect[1].obj.x >> 16;
         var3 = tcbEffect[1].obj.y >> 16;
         short var19 = (short)(this.ChrGameData[tcbNow._work[1] + 3].piGameData[this.ChrGameData[tcbNow._work[1] + 3].piGameDataPos[35] + (tcbNow._work[21] + 2) * 2 * this.ChrGameData[tcbNow._work[1] + 3].piGameDataXSize[35] + 2 + 1] << 8 & '\uff00' | this.ChrGameData[tcbNow._work[1] + 3].piGameData[this.ChrGameData[tcbNow._work[1] + 3].piGameDataPos[35] + (tcbNow._work[21] + 2) * 2 * this.ChrGameData[tcbNow._work[1] + 3].piGameDataXSize[35] + 2]);
         this.Voice(var1, 0, tcbNow._work[1], tcbNow._work[21] + 3);
         var11 = tcbNow._work;
         var10002 = var11[21]++;
         this._TKilx(var1, 12628, 12628);
         if (tcbNow._work[0] == 0) {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12628, tcbNow._work[1] + 3, var19, 204, 0, var2, var3);
            tcbEffect[1]._work[20] = 0;
         } else {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12628, tcbNow._work[1] + 3, var19, 204, 16, var2, var3);
            tcbEffect[1]._work[20] = 0;
         }

         this._TFlag(var1, 12628, 12628, 32768);
         tcbNow._work[23] = 0;
         tcbNow.md = 478;
         tcbNow.lp = 0;
         break;
      case 478:
         var5 = tcbEffect[1].obj.x >> 16;
         var6 = tcbEffect[1].obj.y >> 16;
         if (tcbNow._work[22] > 0) {
            var12 = tcbNow._work;
            var10002 = var12[22]--;
         } else {
            EventHitStop = 0;

            for(var2 = 0; var2 < tcbEffect[1].obj.iHitNum; ++var2) {
               if (tcbEffect[1].obj.hit[var2 * 5 + 0] == 2) {
                  var4 = tcbEffect[1].obj.hit[var2 * 5 + 1];
                  var7 = tcbEffect[1].obj.hit[var2 * 5 + 2];
                  var3 = var4;
                  if ((tcbEffect[1].obj.wObjFlag & 16) != 0) {
                     var3 = var4 * -1;
                  }

                  if (tcbEffect[1].obj.OptData[1] == 50) {
                     this.CreatePanelSingle(var1, 12628, 5, 0, 205, 0, var5 + var3, var6 + var7);
                  } else if (tcbEffect[1].obj.OptData[1] == 100) {
                     this.CreatePanelSingle(var1, 12628, 5, 1, 205, 0, var5 + var3, var6 + var7);
                  }

                  tcbEffect[1].obj.hit[var2 * 5 + 0] = -1;
                  EventHitStop = 1;
                  tcbNow._work[22] = 6;
                  iEventBackScroll = false;
                  this._TKilx(var1, 12634, 12634);
                  iCameraLock = 5;
                  this._TKilx(var1, 12629, 12629);
                  if (tcbNow._work[0] == 0) {
                     this.CreatePanelSingle(var1, 12629, tcbNow._work[2] + 3, 333, 206, 16, 240, 220)._work[20] = tcbNow._work[2] + 1;
                  } else {
                     this.CreatePanelSingle(var1, 12629, tcbNow._work[2] + 3, 333, 206, 0, 240, 220)._work[20] = tcbNow._work[2] + 1;
                  }
               }
            }

            if ((tcbEffect[1].obj.wActFlag & 2) != 0) {
               this.LIFE_DEC(var1, tcbNow._work[2], this.EventDamage(var1, 2, tcbNow._work[1], tcbNow._work[2]));
               this.AddScore(var1, tcbNow._work[1], (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[150] + this.pGameData.piGameDataXSize[150] * 2 + 0 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[150] + this.pGameData.piGameDataXSize[150] * 2 + 0] & 255));
               tcbNow._work[10] = 0;
               tcbNow.md = 479;
               tcbNow.lp = 0;
               this._TKilx(var1, 12629, 12629);
               if (tcbNow._work[0] == 0) {
                  tcbEffect[0] = this.CreatePanelSingle(var1, 12629, tcbNow._work[2] + 3, 296, 206, 16, 240, 220);
                  tcbEffect[0]._work[20] = tcbNow._work[2] + 1;
               } else {
                  tcbEffect[0] = this.CreatePanelSingle(var1, 12629, tcbNow._work[2] + 3, 296, 206, 0, 240, 220);
                  tcbEffect[0]._work[20] = tcbNow._work[2] + 1;
               }
            }
         }
         break;
      case 479:
         if (tcbNow._work[10] == 10) {
         }

         if (tcbNow._work[0] == 0) {
            var21 = tcbEffect[0].obj;
            var21.x += 1966080;
         } else {
            var21 = tcbEffect[0].obj;
            var21.x -= 1966080;
         }

         var11 = tcbNow._work;
         var10002 = var11[10]++;
         this._TLoop(var1, 20, 480);
         break;
      case 480:
         iCameraLock = -1;
         tcbNow.md = 456;
         tcbNow.lp = 0;
         var12 = tcbNow._work;
         var12[0] ^= 1;
         break;
      case 481:
         tcbNow._work[10] = 0;
         tcbNow.md = 482;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 482:
         this._TKilx(var1, 12628, 12628);
         if (tcbNow._work[0] == 0) {
            this.CreatePanelSingle(var1, 12628, 2, 40, 207, 0, tcbNow._work[10] - 200, 280);
         } else {
            this.CreatePanelSingle(var1, 12628, 2, 40, 207, 0, 680 - tcbNow._work[10], 280);
         }

         var12 = tcbNow._work;
         var12[10] += 30;
         if (tcbNow._work[10] >= 300) {
            tcbNow._work[10] = 300;
            tcbNow.md = 483;
            tcbNow.lp = 0;
         }
         break;
      case 483:
         iEventBackScroll = false;
         this._TKilx(var1, 12628, 12628);
         if (tcbNow._work[0] == 0) {
            this.CreatePanelSingle(var1, 12628, 2, 41, 207, 0, tcbNow._work[10] - 200, 280);
         } else {
            this.CreatePanelSingle(var1, 12628, 2, 42, 207, 0, 680 - tcbNow._work[10], 280);
         }

         iReqSENo = 6;
         this.PushSE(var1, 6);
         tcbNow.md = 484;
         tcbNow.lp = 0;
         break;
      case 484:
         if (tcbNow._work[0] == 0) {
            var21 = tcbEffect[1].obj;
            var21.x -= 1966080;
         } else {
            var21 = tcbEffect[1].obj;
            var21.x += 1966080;
         }

         this._TLoop(var1, 40, 485);
         break;
      case 485:
         this._TKilx(var1, 12625, 12644);
         bBackVisible = true;
         iBackXPos = iBackXSize * 4 << 16;
         iBackYPos = 0;
         iBackMode = 0;
         iBackShake = 0;
         iBackShakeType = 0;
         iBackXAdd = 0;
         iBackXOffset = 0;
         iBackYOffset = 0;
         iBackXScroll = 0;
         if (tcbNow._work[0] == 0) {
            PlayerXPos[tcbNow._work[2]] = iBackXPos + 26214400;
            PlayerOldXPos[tcbNow._work[2]] = PlayerXPos[tcbNow._work[2]];
            PlayerYPos[tcbNow._work[2]] = 9175040;
            PlayerXPos[tcbNow._work[1]] = iBackXPos + 58982400;
            PlayerOldXPos[tcbNow._work[1]] = PlayerXPos[tcbNow._work[1]];
            PlayerYPos[tcbNow._work[1]] = 15728640;
            this.CreatePanelSingle(var1, 12625, 2, 92, 207, 16, 480, 160);
         } else {
            PlayerXPos[tcbNow._work[2]] = iBackXPos + 655360;
            PlayerOldXPos[tcbNow._work[2]] = PlayerXPos[tcbNow._work[2]];
            PlayerYPos[tcbNow._work[2]] = 9175040;
            PlayerXPos[tcbNow._work[1]] = iBackXPos + 0;
            PlayerOldXPos[tcbNow._work[1]] = PlayerXPos[tcbNow._work[1]];
            PlayerYPos[tcbNow._work[1]] = 15728640;
            this.CreatePanelSingle(var1, 12625, 2, 12, 207, 0, 0, 160);
         }

         tcbPlayer[tcbNow._work[1]].md = 444;
         tcbPlayer[tcbNow._work[2]].md = 444;
         this._SetObjFlag(var1, tcbPlayer[tcbNow._work[1]].obj, 1, true);
         tcbNow.md = 486;
         tcbNow.lp = 0;
         break;
      case 486:
         this._SetObjFlag(var1, tcbPlayer[tcbNow._work[1]].obj, 1, true);
         this._TLoop(var1, 2, 487);
         break;
      case 487:
         this._SetObjFlag(var1, tcbPlayer[tcbNow._work[2]].obj, 1, false);
         this._SetObjFlag(var1, tcbPlayer[tcbNow._work[1]].obj, 1, true);
         tcbPlayer[tcbNow._work[2]].md = 442;
         if (tcbNow._work[0] == 0) {
            this._SetObjFlag(var1, tcbPlayer[tcbNow._work[2]].obj, 16, false);
            this._SetObjFlag(var1, tcbPlayer[tcbNow._work[1]].obj, 16, true);
         } else {
            this._SetObjFlag(var1, tcbPlayer[tcbNow._work[1]].obj, 16, false);
            this._SetObjFlag(var1, tcbPlayer[tcbNow._work[2]].obj, 16, true);
         }

         tcbNow.md = 489;
         tcbNow.lp = 0;
         break;
      case 488:
         this._SetObjFlag(var1, tcbPlayer[tcbNow._work[1]].obj, 1, true);
         this._TLoop(var1, 60, 489);
         break;
      case 489:
         if (tcbNow._work[0] == 0) {
            PlayerWarpXPos[tcbNow._work[1]] = PlayerXPos[tcbNow._work[2]] + 3932160;
         } else {
            PlayerWarpXPos[tcbNow._work[1]] = PlayerXPos[tcbNow._work[2]] - 3932160;
         }

         PlayerWarpYPos[tcbNow._work[1]] = 15728640;
         PlayerAir[tcbNow._work[1]] = false;
         this._SetObjFlag(var1, tcbPlayer[tcbNow._work[1]].obj, 1, true);
         tcbPlayer[tcbNow._work[1]].md = 869;
         tcbNow.md = 490;
         tcbNow.lp = 0;
         break;
      case 490:
         this._TLoop(var1, 12, 491);
         break;
      case 491:
         this._TKilx(var1, 12624, 12644);
         _cameraPrio = 0;
         iCameraLock = -1;
         iMarkVisible = 0;
         iEventStatus = 0;
         this._TKill(var1);
         break;
      case 492:
         this._TKilx(var1, 12625, 12644);
         this.CreatePanelSingle(var1, 12625, 5, 143, 200, 0, 0, 0);
         var11 = PlayerEventFlag;
         var2 = tcbNow._work[1];
         var11[var2] |= 2048;
         if (tcbNow._work[0] == 0) {
            tcbEffect[tcbNow._work[1]] = this.CreatePanelSingle(var1, 12626, tcbNow._work[1] + 3, 320, 201, 16, 200, 220);
            this.CreatePanelSingle(var1, 12626, tcbNow._work[1] + 3, 321, 201, 16, 200, 220);
            var16 = this._TaskMake(var1, 974, 12626);
            var16._work[0] = tcbNow._work[1];
            var16._work[1] = 16;
         } else {
            tcbEffect[tcbNow._work[1]] = this.CreatePanelSingle(var1, 12626, tcbNow._work[1] + 3, 320, 201, 0, 280, 220);
            this.CreatePanelSingle(var1, 12626, tcbNow._work[1] + 3, 321, 201, 0, 280, 220);
            var16 = this._TaskMake(var1, 974, 12626);
            var16._work[0] = tcbNow._work[1];
            var16._work[1] = 0;
         }

         iCameraLock = 5;
         this.Voice(var1, 0, tcbNow._work[1], 2);
         tcbNow.md = 493;
         tcbNow.lp = 0;
         break;
      case 493:
         if ((tcbEffect[tcbNow._work[1]].obj.wActFlag & 2) != 0) {
            tcbNow.md = 494;
            tcbNow.lp = 0;
            iCameraLock = 4;
         }
         break;
      case 494:
         this._TKilx(var1, 12626, 12644);
         if (tcbNow._work[0] == 0) {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12626, tcbNow._work[1] + 3, 322, 207, 16, 240, 160);
            tcbEffect[1]._work[20] = tcbNow._work[1] + 1;
            this.CreatePanelSingle(var1, 12627, tcbNow._work[2] + 3, 296, 206, 0, 240, 220);
         } else {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12626, tcbNow._work[1] + 3, 322, 207, 0, 240, 160);
            tcbEffect[1]._work[20] = tcbNow._work[1] + 1;
            this.CreatePanelSingle(var1, 12627, tcbNow._work[2] + 3, 296, 206, 16, 240, 220);
         }

         tcbNow._work[23] = 0;
         tcbNow.md = 495;
         tcbNow.lp = 0;
         break;
      case 495:
         var6 = tcbEffect[1].obj.x >> 16;
         var5 = tcbEffect[1].obj.y >> 16;
         if (tcbNow._work[22] > 0) {
            var12 = tcbNow._work;
            var10002 = var12[22]--;
         } else {
            for(var2 = 0; var2 < tcbEffect[1].obj.iHitNum; ++var2) {
               if (tcbEffect[1].obj.hit[var2 * 5 + 0] == 2) {
                  var4 = tcbEffect[1].obj.hit[var2 * 5 + 1];
                  var7 = tcbEffect[1].obj.hit[var2 * 5 + 2];
                  var3 = var4;
                  if ((tcbEffect[1].obj.wObjFlag & 16) != 0) {
                     var3 = var4 * -1;
                  }

                  if (tcbEffect[1].obj.OptData[1] == 50) {
                     this.CreatePanelSingle(var1, 12628, 5, 0, 205, 0, var6 + var3, var5 + var7);
                  } else if (tcbEffect[1].obj.OptData[1] == 100) {
                     this.CreatePanelSingle(var1, 12628, 5, 1, 205, 0, var6 + var3, var5 + var7);
                  }

                  tcbEffect[1].obj.hit[var2 * 5 + 0] = -1;
                  tcbNow._work[22] = 6;
                  if (tcbNow._work[23] == 0) {
                     tcbNow._work[23] = 1;
                     this.LIFE_DEC(var1, tcbNow._work[2], this.EventDamage(var1, 6, tcbNow._work[1], tcbNow._work[2]));
                  }

                  this._TKilx(var1, 12627, 12627);
                  if (tcbNow._work[0] == 0) {
                     this.CreatePanelSingle(var1, 12627, tcbNow._work[2] + 3, 333, 206, 0, 240, 220)._work[20] = tcbNow._work[2] + 1;
                  } else {
                     this.CreatePanelSingle(var1, 12627, tcbNow._work[2] + 3, 333, 206, 16, 240, 220)._work[20] = tcbNow._work[2] + 1;
                  }
               }
            }

            if ((tcbEffect[1].obj.wActFlag & 2) != 0) {
               tcbNow.md = 496;
               tcbNow.lp = 0;
            }
         }
         break;
      case 496:
         this.CreateWipeInOut(var1, 1);
         iFadeR = 255;
         iFadeG = 255;
         iFadeB = 255;
         if (this.ChrGameData[tcbNow._work[1] + 0 + 3].piGameData[this.ChrGameData[tcbNow._work[1] + 0 + 3].piGameDataPos[34] + this.ChrGameData[tcbNow._work[1] + 0 + 3].piGameDataXSize[34] * 1 + 0] != 0) {
            tcbNow.md = 500;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 497;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 497:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 12625, 12627);
            this.CreatePanelSingle(var1, 12625, 5, 147, 201, 0, 0, 0);
            tcbEffect[1] = this.CreatePanelSingle(var1, 12625, tcbNow._work[1] + 3, 280, 202, 0, 0, 0);
            tcbEffect[1]._work[20] = tcbNow._work[1] + 1;
            this.CreateWipeInOut(var1, 2);
            iFadeR = 255;
            iFadeG = 255;
            iFadeB = 255;
            tcbNow.md = 498;
            tcbNow.lp = 0;
         }
         break;
      case 498:
         this._TLoop(var1, 90, 499);
         break;
      case 499:
         this.CreateWipeInOut(var1, 1);
         iFadeR = 255;
         iFadeG = 255;
         iFadeB = 255;
         tcbNow.md = 501;
         tcbNow.lp = 0;
         break;
      case 500:
         if (iFade == 255 || iFade == 0) {
            tcbNow.md = 502;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 501:
         iFade = 254;
         tcbNow.md = 502;
         tcbNow.lp = 0;
         break;
      case 502:
         bBackVisible = true;
         this._TKilx(var1, 12625, 12644);
         iBackXPos = iBackXSize * 4 << 16;
         iBackYPos = 0;
         iBackMode = 0;
         iBackShake = 0;
         iBackShakeType = 0;
         iBackXAdd = 0;
         iBackXOffset = 0;
         iBackYOffset = 0;
         iBackXScroll = 0;
         if (tcbNow._work[0] == 0) {
            PlayerXPos[tcbNow._work[2]] = iBackXPos + 26214400;
            PlayerOldXPos[tcbNow._work[2]] = PlayerXPos[tcbNow._work[2]];
            PlayerYPos[tcbNow._work[2]] = 9175040;
            PlayerXPos[tcbNow._work[1]] = iBackXPos + 58982400;
            PlayerOldXPos[tcbNow._work[1]] = PlayerXPos[tcbNow._work[1]];
            PlayerYPos[tcbNow._work[1]] = 15728640;
            this.CreatePanelSingle(var1, 12625, 2, 92, 207, 16, 480, 160);
         } else {
            PlayerXPos[tcbNow._work[2]] = iBackXPos + 655360;
            PlayerOldXPos[tcbNow._work[2]] = PlayerXPos[tcbNow._work[2]];
            PlayerYPos[tcbNow._work[2]] = 9175040;
            PlayerXPos[tcbNow._work[1]] = iBackXPos - 13107200;
            PlayerOldXPos[tcbNow._work[1]] = PlayerXPos[tcbNow._work[1]];
            PlayerYPos[tcbNow._work[1]] = 15728640;
            this.CreatePanelSingle(var1, 12625, 2, 12, 207, 0, 0, 160);
         }

         tcbPlayer[tcbNow._work[1]].md = 444;
         tcbPlayer[tcbNow._work[2]].md = 444;
         this.AddScore(var1, tcbNow._work[1], (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[150] + this.pGameData.piGameDataXSize[150] * 4 + 0 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[150] + this.pGameData.piGameDataXSize[150] * 4 + 0] & 255));
         iFade = 254;
         this.CreateWipeInOut(var1, 2);
         iFadeR = 255;
         iFadeG = 255;
         iFadeB = 255;
         tcbNow.md = 503;
         tcbNow.lp = 0;
         break;
      case 503:
         var21 = tcbPlayer[tcbNow._work[1]].obj;
         var21.wObjFlag |= 1;
         this._TLoop(var1, 2, 504);
         break;
      case 504:
         this._SetObjFlag(var1, tcbPlayer[tcbNow._work[2]].obj, 1, false);
         tcbPlayer[tcbNow._work[2]].md = 442;
         iReqSENo = 6;
         this.PushSE(var1, 6);
         tcbNow.md = 505;
         tcbNow.lp = 0;
         break;
      case 505:
         var21 = tcbPlayer[tcbNow._work[1]].obj;
         var21.wObjFlag |= 1;
         if (iFade == 255 || iFade == 0) {
            this._TLoop(var1, 8, 506);
         }
         break;
      case 506:
         if (tcbNow._work[0] == 0) {
            PlayerWarpXPos[tcbNow._work[1]] = iBackXPos + 19660800;
         } else {
            PlayerWarpXPos[tcbNow._work[1]] = iBackXPos + 11796480;
         }

         iFade = 0;
         iFadeR = 0;
         iFadeG = 0;
         iFadeB = 0;
         PlayerWarpYPos[tcbNow._work[1]] = 15728640;
         PlayerAir[tcbNow._work[1]] = false;
         tcbPlayer[tcbNow._work[1]].md = 869;
         var13 = tcbPlayer[tcbNow._work[1]].obj;
         var13.wObjFlag |= 1;
         tcbNow.md = 507;
         tcbNow.lp = 0;
         break;
      case 507:
         var21 = tcbPlayer[tcbNow._work[1]].obj;
         var21.wObjFlag |= 1;
         this._TLoop(var1, 12, 508);
         break;
      case 508:
         this._TKilx(var1, 12624, 12644);
         this._SetObjFlag(var1, tcbPlayer[tcbNow._work[1]].obj, 1, false);
         _cameraPrio = 0;
         iCameraLock = -1;
         PlayerAir[tcbNow._work[1]] = false;
         iMarkVisible = 0;
         iEventStatus = 0;
         this._TKill(var1);
         break;
      case 509:
         this._TKilx(var1, 12629, 12629);
         if (tcbNow._work[0] == 0) {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12629, tcbNow._work[2] + 3, 303, 204, 0, 240, 220);
            tcbEffect[1]._work[20] = tcbNow._work[2] + 1;
            this.CreatePanelSingle(var1, 12629, 2, 91, 205, 0, 240, 220);
            tcbEffect[2] = this.CreatePanelSingle(var1, 12628, 2, 40, 204, 0, -200, 280);
         } else {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12629, tcbNow._work[2] + 3, 303, 204, 16, 240, 220);
            this.CreatePanelSingle(var1, 12629, 2, 94, 205, 16, 240, 220);
            tcbEffect[2] = this.CreatePanelSingle(var1, 12628, 2, 40, 204, 0, 680, 280);
         }

         tcbNow.md = 510;
         tcbNow.lp = 0;
         break;
      case 510:
         if (tcbNow._work[0] == 0) {
            var21 = tcbEffect[2].obj;
            var21.x += 2424832;
         } else {
            var21 = tcbEffect[2].obj;
            var21.x -= 2424832;
         }

         this._TLoop(var1, 8, 511);
         break;
      case 511:
         iEventBackScroll = false;
         this._TKilx(var1, 12634, 12634);
         this.Voice(var1, 0, tcbNow._work[2], 7);
         tcbNow.md = 512;
         tcbNow.lp = 0;
         break;
      case 512:
         this._TLoop(var1, 10, 513);
         break;
      case 513:
         var2 = tcbEffect[1].obj.x >> 16;
         this._TKilx(var1, 12629, 12629);
         if (tcbNow._work[0] == 0) {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12629, tcbNow._work[2] + 3, 305, 204, 0, var2, 220);
            tcbEffect[1]._work[20] = tcbNow._work[2] + 1;
            this.CreatePanelSingle(var1, 12629, 2, 19, 207, 0, var2, 220);
         } else {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12629, tcbNow._work[2] + 3, 305, 204, 16, var2, 220);
            tcbEffect[1]._work[20] = tcbNow._work[2] + 1;
            this.CreatePanelSingle(var1, 12629, 2, 99, 207, 16, var2, 220);
         }

         tcbNow.md = 514;
         tcbNow.lp = 0;
         break;
      case 514:
         this._TLoop(var1, 25, 515);
         break;
      case 515:
         iBackXPos = iBackXSize * 4 << 16;
         iBackYPos = 0;
         iBackMode = 0;
         iBackShake = 0;
         iBackShakeType = 0;
         iBackXAdd = 0;
         iBackXOffset = 0;
         iBackYOffset = 0;
         iBackXScroll = 0;
         if (tcbNow._work[0] == 0) {
            PlayerXPos[tcbNow._work[2]] = iBackXPos - 9830400;
            PlayerOldXPos[tcbNow._work[2]] = PlayerXPos[tcbNow._work[2]];
            PlayerXPos[tcbNow._work[1]] = iBackXPos + 19660800;
            PlayerOldXPos[tcbNow._work[1]] = PlayerXPos[tcbNow._work[1]];
         } else {
            PlayerXPos[tcbNow._work[2]] = iBackXPos + 19660800;
            PlayerOldXPos[tcbNow._work[2]] = PlayerXPos[tcbNow._work[2]];
            PlayerXPos[tcbNow._work[1]] = iBackXPos - 9830400;
            PlayerOldXPos[tcbNow._work[1]] = PlayerXPos[tcbNow._work[1]];
         }

         PlayerYPos[tcbNow._work[1]] = 15728640;
         PlayerYPos[tcbNow._work[2]] = 15728640;
         PlayerAir[tcbNow._work[1]] = false;
         PlayerAir[tcbNow._work[2]] = false;
         tcbPlayer[tcbNow._work[1]].md = 444;
         tcbPlayer[tcbNow._work[2]].md = 444;
         tcbNow.md = 516;
         tcbNow.lp = 0;
         break;
      case 516:
         var13 = tcbPlayer[tcbNow._work[1]].obj;
         var13.wObjFlag |= 1;
         var13 = tcbPlayer[tcbNow._work[2]].obj;
         var13.wObjFlag |= 1;
         if (tcbNow._work[0] == 0) {
            PlayerWarpXPos[tcbNow._work[1]] = iBackXPos + 19660800;
            PlayerWarpXPos[tcbNow._work[2]] = iBackXPos + 9830400;
         } else {
            PlayerWarpXPos[tcbNow._work[1]] = iBackXPos + 9830400;
            PlayerWarpXPos[tcbNow._work[2]] = iBackXPos + 19660800;
         }

         PlayerWarpYPos[tcbNow._work[1]] = 15728640;
         PlayerWarpYPos[tcbNow._work[2]] = 15728640;
         tcbPlayer[tcbNow._work[1]].md = 869;
         tcbPlayer[tcbNow._work[2]].md = 869;
         tcbNow.md = 517;
         tcbNow.lp = 0;
         break;
      case 517:
         this._TLoop(var1, 10, 518);
         break;
      case 518:
         _cameraPrio = 0;
         iCameraLock = -1;
         bBackVisible = true;
         this._TKilx(var1, 12624, 12644);
         iMarkVisible = 0;
         iEventStatus = 0;
         this._SetObjFlag(var1, tcbPlayer[tcbNow._work[1]].obj, 1, false);
         this._SetObjFlag(var1, tcbPlayer[tcbNow._work[2]].obj, 1, false);
         this._TKill(var1);
         break;
      case 519:
         var3 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         if ((iEventStatus & 1) == 0 || (iEventStatus & 512) != 0) {
            if ((iEventStatus & 1280) != 0) {
               iEventStatus &= -513;
            } else if (tcbPlayer[0].obj != null && tcbPlayer[1].obj != null) {
               if (this.RushCheck(var1) && iTimer > 0) {
                  if ((iEventStatus & 512) != 0 || (iEventStatus & 2) != 0) {
                     this._TKilx(var1, 12624, 12644);
                     this._TKilx(var1, 13632, 13689);
                     this.CmdClear(var1, 0);
                     this.CmdClear(var1, 1);
                     if (tcbPlayer[var3].obj.x < tcbPlayer[var2].obj.x) {
                        tcbNow._work[10] = var3;
                        tcbNow._work[11] = var2;
                     } else {
                        tcbNow._work[10] = var2;
                        tcbNow._work[11] = var3;
                     }

                     tcbNow._work[13] = var3;
                     tcbNow._work[14] = var2;
                     iMarkVisible = 1;
                     this.CreatePanelSingle(var1, 12624, 2, 11, 204, tcbPlayer[var3].obj.wObjFlag & 16, tcbPlayer[var3].obj.x >> 16, tcbPlayer[var3].obj.y >> 16);
                     this.CreatePanelSingle(var1, 12624, 2, 11, 204, tcbPlayer[var2].obj.wObjFlag & 16, tcbPlayer[var2].obj.x >> 16, tcbPlayer[var2].obj.y >> 16);
                     if ((iEventStatus & 2) != 0) {
                        tcbPlayer[var3].md = 430;
                        tcbPlayer[var2].md = 449;
                        this.CreatePanelSingle(var1, 12624, 5, 3, 204, 0, (tcbPlayer[var3].obj.x + tcbPlayer[var2].obj.x) / 2 >> 16, (tcbPlayer[var3].obj.y + tcbPlayer[var2].obj.y) / 2 >> 16);
                     } else {
                        tcbPlayer[var3].md = 430;
                        tcbPlayer[var2].md = 430;
                     }

                     if (PlayerCardCount[var3] <= 0 && PlayerCardCount[var2] <= 0) {
                        tcbNow.md = 520;
                        tcbNow.lp = 0;
                     } else if (this.isMission(var1) == 0 && (iStage == 1 || iStage == 2) && iPlayMode != 8) {
                        if (iStage == 1) {
                           tcbNow.md = 520;
                           tcbNow.lp = 0;
                        } else if (iStage == 2) {
                           tcbNow.md = 551;
                           tcbNow.lp = 0;
                        }
                     } else {
                        if (iRushType == 0) {
                           tcbNow.md = 520;
                           tcbNow.lp = 0;
                        } else {
                           tcbNow.md = 551;
                           tcbNow.lp = 0;
                        }

                        iRushType ^= 1;
                     }

                     iEventStatus &= -3;
                  }
               } else {
                  iEventStatus &= -514;
               }
            }
         }
         break;
      case 520:
         this.CreatePanelSingle(var1, 12624, 5, 9, 200, 0, 0, 0);
         tcbNow.md = 521;
         tcbNow.lp = 0;
         break;
      case 521:
         this._TLoop(var1, 40, 522);
         break;
      case 522:
         var3 = iPlayerNo;
         var2 = iPlayerNo;
         tcbPlayer[var3].md = 429;
         tcbPlayer[1 - var2].md = 429;
         tcbNow.md = 524;
         tcbNow.lp = 0;
         break;
      case 523:
         this._TLoop(var1, 30, 524);
         break;
      case 524:
         var2 = iPlayerNo;
         var2 = iPlayerNo;
         this._TKilx(var1, 12624, 12644);
         this._TKilx(var1, 13632, 13689);
         bBackVisible = false;
         _cameraPrio = 2;
         this.CreatePanelSingle(var1, 12624, 5, 290, 200, 0, 0, 0);
         this.CreatePanelSingle(var1, 12626, 5, 276, 12288, 0, 0, 150);
         this.CreatePanelSingle(var1, 12626, 5, 277, 12288, 0, 0, 200);
         iCameraLock = 3;
         tcbEffect[0] = this.CreatePanelSingle(var1, 12627, tcbNow._work[10] + 3, 90, 205, 0, 200, 420);
         tcbEffect[0]._work[20] = tcbNow._work[10] + 1;
         tcbEffect[1] = this.CreatePanelSingle(var1, 12628, tcbNow._work[11] + 3, 91, 205, 16, 280, 420);
         tcbEffect[1]._work[20] = tcbNow._work[11] + 1;
         tcbEffect[2] = this.CreatePanelSingle(var1, 12625, 5, 300, 206, 0, 240, 400);
         tcbNow._work[0] = 0;
         tcbNow.md = 525;
         tcbNow.lp = 0;
         break;
      case 525:
         if (tcbNow._work[0] >= 100) {
            this._TKilx(var1, 12626, 12626);
            iPushCounter[0] = 0;
            iPushCounter[1] = 0;
            if (iPlayMode == 8) {
               tcbNow.md = 526;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 527;
               tcbNow.lp = 0;
            }
         } else {
            var12 = tcbNow._work;
            var10002 = var12[0]++;
            tcbEffect[0].obj.y -= 131072;
            tcbEffect[1].obj.y -= 131072;
            tcbEffect[2].obj.y -= 131072;
         }
         break;
      case 526:
         var2 = iPlayerNo;
         var3 = iPlayerNo;
         bEventValueBuf[0] = 2;
         if (bEventValue[var2][0] == 2 && bEventValue[1 - var3][0] == 2) {
            tcbNow.md = 527;
            tcbNow.lp = 0;
         }
         break;
      case 527:
         var2 = iPlayerNo;
         var2 = iPlayerNo;
         var16 = this._TaskMake(var1, 616, 13632);
         var16._work[2] = -20;
         var16._work[3] = 80;
         var16._work[4] = tcbNow._work[10];
         bEventValueBuf[0] = 0;
         if (iPlayMode != 8) {
            this._TaskMake(var1, 618, 13632);
         }

         var16 = this._TaskMake(var1, 620, 13634);
         var16._work[0] = 0;
         var16._work[1] = iPlayerNo;
         this._TaskMake(var1, 666, 12628)._work[0] = 6;
         var16 = this._TaskMake(var1, 646, 12632);
         var16._work[2] = 240;
         var16._work[3] = 260;
         this.CreatePanelSingle(var1, 13652, 5, 319, 12340, 0, 180, 270);
         tcbNow.md = 528;
         tcbNow.lp = 0;
         break;
      case 528:
         var3 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         if (iPlayMode == 8) {
            bEventValueBuf[2] = (byte)iPushCounter[var3];
            if (bEventValue[var2][2] != 0) {
               iPushCounter[var2] = bEventValue[var2][2];
            }
         }

         if (iPushTimer == 0) {
            this._TKilx(var1, 13632, 13689);
            this._TKilx(var1, 12632, 12632);
            this.CreateValueObjectB(var1, 12626, -20, 80, iPushCounter[0], 3, 28, 280, 12296, 0, 5, 0);
            this.CreatePanelSingle(var1, 12626, 5, 259, 12338, 0, 70, 80);
            this.CreateValueObjectB(var1, 12626, 336, 80, iPushCounter[1], 3, 28, 280, 12296, 0, 5, 0);
            this.CreatePanelSingle(var1, 12626, 5, 259, 12338, 0, 426, 80);
            if (iPlayMode == 8) {
               tcbNow.md = 529;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 531;
               tcbNow.lp = 0;
            }
         }
         break;
      case 529:
         var3 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         bEventValueBuf[2] = (byte)iPushCounter[var3];
         if (bEventValue[var2][2] != 0) {
            iPushCounter[var2] = bEventValue[var2][2];
         }

         this._TLoop(var1, 3, 530);
         break;
      case 530:
         var2 = iPlayerNo;
         var3 = iPlayerNo;
         bEventValueBuf[0] = 2;
         if (bEventValue[var2][0] == 2 && bEventValue[1 - var3][0] == 2) {
            tcbNow.md = 531;
            tcbNow.lp = 0;
         }
         break;
      case 531:
         var3 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         if (iPushCounter[var3] == iPushCounter[var2]) {
            this._TKilx(var1, 12632, 12644);
            tcbNow.md = 590;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         } else {
            if (iPushCounter[var3] > iPushCounter[var2]) {
               tcbNow._work[13] = var3;
               tcbNow._work[14] = var2;
               var11 = PlayerEventFlag;
               var11[var3] |= 512;
               var11 = PlayerEventFlag;
               var11[var2] |= 2;
            } else {
               tcbNow._work[13] = var2;
               tcbNow._work[14] = var3;
               var11 = PlayerEventFlag;
               var11[var2] |= 512;
               var11 = PlayerEventFlag;
               var11[var3] |= 2;
            }

            this._TKilx(var1, 12632, 12644);
            if (tcbNow._work[13] == iPlayerNo) {
               this.CreatePanelSingle(var1, 12626, 5, 272, 12338, 0, 220, 160);
            }

            tcbNow.md = 532;
            tcbNow.lp = 0;
         }
         break;
      case 532:
         this._TLoop(var1, 90, 533);
         break;
      case 533:
         var2 = tcbNow._work[13];
         var4 = tcbNow._work[14];
         var3 = Life[var4];
         var4 = this.EventDamage(var1, 1, var2, var4);
         this._TKilx(var1, 12625, 12625);
         if (tcbNow._work[10] == var2) {
            this._TKilx(var1, 12627, 12627);
         } else {
            this._TKilx(var1, 12628, 12628);
         }

         if (this.GetCardAddAtack(var1, var2) > 0 && var3 - var4 > 0) {
            tcbNow.md = 544;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 534;
            tcbNow.lp = 0;
         }

         this.Game(var1, tcbNow.md);
         break;
      case 534:
         var3 = tcbNow._work[13];
         var2 = tcbNow._work[14];
         if (tcbNow._work[10] == var3) {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12627, var3 + 3, 282, 205, 0, 200, 220);
            tcbEffect[1]._work[20] = tcbNow._work[13] + 1;
         } else {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12628, var3 + 3, 282, 205, 16, 280, 220);
            tcbEffect[1]._work[20] = tcbNow._work[13] + 1;
         }

         tcbNow._work[22] = 0;
         tcbNow.md = 535;
         tcbNow.lp = 0;
         break;
      case 535:
         var5 = tcbNow._work[13];
         var7 = tcbNow._work[14];
         var6 = tcbEffect[1].obj.x >> 16;
         var8 = tcbEffect[1].obj.y >> 16;
         if (tcbNow._work[22] > 0) {
            var12 = tcbNow._work;
            var10002 = var12[22]--;
         } else {
            EventHitStop = 0;

            for(var2 = 0; var2 < tcbEffect[1].obj.iHitNum; ++var2) {
               if (tcbEffect[1].obj.hit[var2 * 5 + 0] == 2) {
                  var4 = tcbEffect[1].obj.hit[var2 * 5 + 1];
                  var9 = tcbEffect[1].obj.hit[var2 * 5 + 2];
                  var3 = var4;
                  if ((tcbEffect[1].obj.wObjFlag & 16) != 0) {
                     var3 = var4 * -1;
                  }

                  if (tcbEffect[1].obj.OptData[1] == 50) {
                     this.CreatePanelSingle(var1, 12629, 5, 0, 205, 0, var6 + var3, var8 + var9);
                  } else if (tcbEffect[1].obj.OptData[1] == 100) {
                     this.CreatePanelSingle(var1, 12629, 5, 1, 205, 0, var6 + var3, var8 + var9);
                  }

                  tcbEffect[1].obj.hit[var2 * 5 + 0] = -1;
                  EventHitStop = 1;
                  tcbNow._work[22] = 6;
                  iEventBackScroll = false;
                  this._TKilx(var1, 12634, 12634);
                  iCameraLock = 5;
                  if (tcbNow._work[10] == var5) {
                     var17 = 12628;
                  } else {
                     var17 = 12627;
                  }

                  this._TKilx(var1, var17, var17);
                  if (tcbNow._work[0] == 0) {
                     this.CreatePanelSingle(var1, var17, var7 + 3, 333, 206, 16, 240, 220)._work[20] = tcbNow._work[2] + 1;
                  } else {
                     this.CreatePanelSingle(var1, var17, var7 + 3, 333, 206, 0, 240, 220)._work[20] = tcbNow._work[2] + 1;
                  }
               }
            }

            if ((tcbEffect[1].obj.wActFlag & 2) != 0) {
               tcbNow.md = 536;
               tcbNow.lp = 0;
            }
         }
         break;
      case 536:
         var3 = tcbNow._work[13];
         var4 = tcbNow._work[14];
         if (tcbNow._work[10] == var3) {
            var22 = 12628;
         } else {
            var22 = 12627;
         }

         this._TKilx(var1, var22, var22);
         this._TKilx(var1, 12629, 12629);
         if (tcbNow._work[10] == var3) {
            this.CreatePanelSingle(var1, var22, var4 + 3, 286, 205, 16, 280, 220)._work[20] = tcbNow._work[14] + 1;
         } else {
            this.CreatePanelSingle(var1, var22, var4 + 3, 286, 205, 0, 200, 220)._work[20] = tcbNow._work[14] + 1;
         }

         tcbNow.md = 537;
         tcbNow.lp = 0;
         break;
      case 537:
         this._TLoop(var1, 50, 538);
         break;
      case 538:
         var3 = tcbNow._work[13];
         var2 = tcbNow._work[14];
         iCameraLock = 4;
         PlayerAir[var2] = true;
         PlayerYPos[var2] = 0;
         this.LIFE_DEC(var1, var2, this.EventDamage(var1, 1, var3, var2));
         this.AddScore(var1, var3, (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[150] + this.pGameData.piGameDataXSize[150] * 0 + 0 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[150] + this.pGameData.piGameDataXSize[150] * 0 + 0] & 255));
         ThrowDamage[var2] = false;
         DamageType[var2] = 7;
         DamageIndex[var2] = 1;
         DamageTime[var2] = 0;
         DamageOldIndex[var2] = DamageIndex[var2];
         DamageOldType[var2] = DamageType[var2];
         tcbPlayer[var2].md = 876;
         bBackVisible = true;
         this._TKilx(var1, 12624, 12644);
         tcbNow.md = 539;
         tcbNow.lp = 0;
         break;
      case 539:
         this._TLoop(var1, 10, 540);
         break;
      case 540:
         var3 = tcbNow._work[13];
         var2 = tcbNow._work[14];
         iBackShakeType = 2;
         iBackShake = 12;
         this.CreatePanelSingle(var1, 12627, 2, 100, 205, 0, tcbPlayer[var2].obj.x >> 16, 320);
         tcbPlayer[var3].md = 447;
         tcbNow.md = 541;
         tcbNow.lp = 0;
         break;
      case 541:
         this._TLoop(var1, 20, 542);
         break;
      case 542:
         tcbNow.md = 543;
         tcbNow.lp = 0;
         break;
      case 543:
         var2 = tcbNow._work[13];
         var2 = tcbNow._work[14];
         iMarkVisible = 0;
         _cameraPrio = 0;
         iEventStatus = 0;
         tcbNow.md = 519;
         tcbNow.lp = 0;
         break;
      case 544:
         var3 = tcbNow._work[13];
         var2 = tcbNow._work[14];
         if (tcbNow._work[10] == var3) {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12627, var3 + 3, 283, 205, 0, 200, 220);
            tcbEffect[1]._work[20] = var3 + 1;
         } else {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12628, var3 + 3, 283, 205, 16, 280, 220);
            tcbEffect[1]._work[20] = var3 + 1;
         }

         tcbNow.md = 545;
         tcbNow.lp = 0;
         break;
      case 545:
         var6 = tcbNow._work[13];
         var8 = tcbNow._work[14];
         var5 = tcbEffect[1].obj.x >> 16;
         var7 = tcbEffect[1].obj.y >> 16;
         if (tcbNow._work[22] > 0) {
            var12 = tcbNow._work;
            var10002 = var12[22]--;
         } else {
            for(var2 = 0; var2 < tcbEffect[1].obj.iHitNum; ++var2) {
               if (tcbEffect[1].obj.hit[var2 * 5 + 0] == 2) {
                  var4 = tcbEffect[1].obj.hit[var2 * 5 + 1];
                  var9 = tcbEffect[1].obj.hit[var2 * 5 + 2];
                  var3 = var4;
                  if ((tcbEffect[1].obj.wObjFlag & 16) != 0) {
                     var3 = var4 * -1;
                  }

                  if (tcbEffect[1].obj.OptData[1] == 50) {
                     this.CreatePanelSingle(var1, 12629, 5, 0, 206, tcbEffect[1].obj.wObjFlag & 16, var5 + var3, var7 + var9);
                  } else if (tcbEffect[1].obj.OptData[1] == 100) {
                     this.CreatePanelSingle(var1, 12629, 5, 1, 206, tcbEffect[1].obj.wObjFlag & 16, var5 + var3, var7 + var9);
                  }

                  tcbEffect[1].obj.hit[var2 * 5 + 0] = -1;
                  tcbNow._work[22] = 6;
                  if (tcbNow._work[10] == var6) {
                     var17 = 12628;
                  } else {
                     var17 = 12627;
                  }

                  this._TKilx(var1, var17, var17);
                  if (tcbNow._work[10] == var6) {
                     this.CreatePanelSingle(var1, var17, var8 + 3, 333, 206, 16, 280, 220)._work[20] = tcbNow._work[14] + 1;
                  } else {
                     this.CreatePanelSingle(var1, var17, var8 + 3, 333, 206, 0, 200, 220)._work[20] = tcbNow._work[14] + 1;
                  }
               }
            }

            if ((tcbEffect[1].obj.wActFlag & 2) != 0) {
               tcbNow.md = 546;
               tcbNow.lp = 0;
            }
         }
         break;
      case 546:
         var3 = tcbNow._work[13];
         var4 = tcbNow._work[14];
         if (tcbNow._work[10] == var3) {
            var22 = 12628;
         } else {
            var22 = 12627;
         }

         this._TKilx(var1, var22, var22);
         if (tcbNow._work[10] == var3) {
            tcbEffect[1] = this.CreatePanelSingle(var1, var22, var4 + 3, 307, 205, 16, 280, 220);
            tcbEffect[1]._work[20] = tcbNow._work[14] + 1;
         } else {
            tcbEffect[1] = this.CreatePanelSingle(var1, var22, var4 + 3, 307, 205, 0, 200, 220);
            tcbEffect[1]._work[20] = tcbNow._work[14] + 1;
         }

         this.LIFE_DEC(var1, var4, this.EventDamage(var1, 1, var3, var4));
         this.AddScore(var1, var3, (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[150] + this.pGameData.piGameDataXSize[150] * 0 + 0 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[150] + this.pGameData.piGameDataXSize[150] * 0 + 0] & 255));
         tcbNow.md = 547;
         tcbNow.lp = 0;
         break;
      case 547:
         this._TLoop(var1, 20, 548);
         break;
      case 548:
         var3 = tcbNow._work[13];
         var2 = tcbNow._work[14];
         iCameraLock = 4;
         iEventStatus &= -513;
         iEventStatus |= 1024;
         this._TKilx(var1, 12624, 12644);
         var16 = this._TaskMake(var1, 456, 12624);
         if (tcbNow._work[10] == var3) {
            var16._work[0] = 1;
         } else {
            var16._work[0] = 0;
         }

         var16._work[1] = var3;
         var16._work[2] = var2;
         var16._work[3] = 150;
         var16._work[20] = this.GetCardAddAtack(var1, var3);
         var16._work[21] = 0;
         _cameraPrio = 0;
         tcbNow.md = 519;
         tcbNow.lp = 0;
         break;
      case 549:
         tcbNow._work[10] = -1;
         tcbNow._work[4] = 0;
         tcbNow.md = 550;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 550:
         var2 = tcbNow.prio + 1;
         var3 = tcbNow._work[1];
         if (tcbNow._work[10] != iPushCounter[var3]) {
            if (iPushCounter[var3] - tcbNow._work[10] < 2000) {
               var11 = tcbNow._work;
               var11[10] += 141;
            } else {
               var11 = tcbNow._work;
               var11[10] += 1411;
            }

            if (tcbNow._work[10] > iPushCounter[var3]) {
               tcbNow._work[10] = iPushCounter[var3];
            }

            this._TKilx(var1, var2, var2);
            this.CreateValueObjectB(var1, var2, tcbNow._work[2], tcbNow._work[3], tcbNow._work[10], 6, 36, 320, 320, 0, 5, 1);
         }

         if (tcbNow._work[4] != 0) {
            tcbNow._work[4] = 0;
            tcbNow._work[10] = iPushCounter[var3];
            this._TKilx(var1, var2, var2);
            this.CreateValueObjectB(var1, var2, tcbNow._work[2], tcbNow._work[3], tcbNow._work[10], 6, 36, 320, 320, 0, 5, 1);
            this.CreateValueObjectB(var1, var2, tcbNow._work[2], tcbNow._work[3], tcbNow._work[10], 6, 36, 370, 320 + 1, 0, 5, 1);
         }
         break;
      case 551:
         this._TLoop(var1, 40, 552);
         break;
      case 552:
         var3 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         tcbPlayer[var3].md = 429;
         tcbPlayer[var2].md = 429;
         if (tcbPlayer[var3].obj.x < tcbPlayer[var2].obj.x) {
            tcbNow._work[10] = 0;
            tcbNow._work[11] = 1;
         } else {
            tcbNow._work[10] = 1;
            tcbNow._work[11] = 0;
         }

         tcbNow.md = 553;
         tcbNow.lp = 0;
         break;
      case 553:
         var2 = iPlayerNo;
         var3 = iPlayerNo;
         this._TKilx(var1, 12624, 12655);
         this._TKilx(var1, 13632, 13689);
         bBackVisible = false;
         iCameraLock = 6;
         _cameraPrio = 2;
         this.CreatePanelSingle(var1, 12624, 5, 144, 200, 0, 0, 0);
         this.CreatePanelSingle(var1, 12626, 5, 360, 430, 0, 0, 150);
         this.CreatePanelSingle(var1, 12626, 5, 361, 430, 0, 0, 200);
         iPushCounter[0] = this.GetAttackSelect(var1, 0);
         var11 = iPushCounter;
         var11[0] += this.GetDeffenceSelect(var1, 0);
         iPushCounter[1] = this.GetAttackSelect(var1, 1);
         var11 = iPushCounter;
         var11[1] += this.GetDeffenceSelect(var1, 1);
         tcbEffect[3] = this._TaskMake(var1, 549, 12639);
         tcbEffect[3]._work[1] = var2;
         tcbEffect[4] = this._TaskMake(var1, 549, 12641);
         tcbEffect[4]._work[1] = 1 - var3;
         iReqSENo = 18;
         this.PushSE(var1, 18);
         tcbNow._work[18] = 6;
         tcbNow._work[19] = 14;
         if (tcbNow._work[10] == 0) {
            tcbEffect[3]._work[2] = 4;
            tcbEffect[3]._work[3] = 216;
            tcbEffect[4]._work[2] = 256;
            tcbEffect[4]._work[3] = 216;
            if (var2 == 0) {
               this.CreatePanelSingle(var1, 12633, 3, 78, 428, 0, -120, 40);
               this.CreatePanelSingle(var1, 12633, 4, 79, 428, 16, 360, 40);
            } else {
               this.CreatePanelSingle(var1, 12633, 3, 79, 428, 16, 360, 40);
               this.CreatePanelSingle(var1, 12633, 4, 78, 428, 0, -120, 40);
            }
         } else {
            tcbEffect[3]._work[2] = 256;
            tcbEffect[3]._work[3] = 216;
            tcbEffect[4]._work[2] = 4;
            tcbEffect[4]._work[3] = 216;
            if (var2 == 0) {
               this.CreatePanelSingle(var1, 12633, 3, 79, 428, 16, 360, 40);
               this.CreatePanelSingle(var1, 12633, 4, 78, 428, 0, -120, 40);
            } else {
               this.CreatePanelSingle(var1, 12633, 3, 78, 428, 0, -120, 40);
               this.CreatePanelSingle(var1, 12633, 4, 79, 428, 16, 360, 40);
            }
         }

         this.Voice(var1, 0, 0, 9);
         this.CreatePanelSingle(var1, 12644, 5, 364, 310, 0, 0, 0);
         tcbNow._work[0] = 0;
         tcbNow.md = 554;
         tcbNow.lp = 0;
         break;
      case 554:
         this._TLoop(var1, 40, 555);
         break;
      case 555:
         this.Voice(var1, 0, 1, 9);
         tcbNow.md = 556;
         tcbNow.lp = 0;
         break;
      case 556:
         if (tcbNow._work[0] >= 100) {
            tcbNow._work[22] = 0;
            this._TKilx(var1, 12626, 12626);
            if (iPlayMode == 8) {
               tcbNow.md = 557;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 558;
               tcbNow.lp = 0;
            }
         } else {
            var12 = tcbNow._work;
            var10002 = var12[0]++;
         }
         break;
      case 557:
         bEventValueBuf[0] = 2;
         if (bEventValue[0][0] == 2 && bEventValue[1][0] == 2) {
            tcbNow.md = 558;
            tcbNow.lp = 0;
         }
         break;
      case 558:
         var2 = iPlayerNo;
         var2 = iPlayerNo;
         if (iPushCounter[0] >= iPushCounter[1]) {
            tcbEffect[3]._work[4] = 1;
         }

         if (iPushCounter[0] <= iPushCounter[1]) {
            tcbEffect[4]._work[4] = 1;
         }

         tcbNow.md = 559;
         tcbNow.lp = 0;
         break;
      case 559:
         var2 = iPlayerNo;
         var2 = iPlayerNo;
         tcbNow._work[22] = 0;
         tcbNow._work[21] = 220;
         tcbNow.md = 560;
         tcbNow.lp = 0;
         break;
      case 560:
         var2 = iPlayerNo;
         var2 = iPlayerNo;
         var11 = tcbNow._work;
         var11[21] -= 20;
         if (tcbNow._work[21] <= 0) {
            tcbNow._work[21] = 0;

            for(var2 = 0; var2 < PlayerCardCount[0]; ++var2) {
               var11 = iPushCounter;
               var11[0] += this.GetCardBattlePoint(var1, 0, var2);
            }

            for(var2 = 0; var2 < PlayerCardCount[1]; ++var2) {
               var11 = iPushCounter;
               var11[1] += this.GetCardBattlePoint(var1, 1, var2);
            }

            iReqSENo = 18;
            this.PushSE(var1, 18);
            tcbNow.md = 562;
            tcbNow.lp = 0;
         }

         this._TKilx(var1, 12633, 12633);

         for(var2 = 0; var2 <= 1; ++var2) {
            for(var3 = 0; var3 < PlayerCardCount[var2]; ++var3) {
               var4 = PlayerCard[var2][var3];
               var4 = PlayerCardLevel[var2][var3];
               if (tcbPlayer[var2].obj.x < tcbPlayer[1 - var2].obj.x) {
                  var5 = this.CardBattleCardPos[var3 >> 1];
                  this.CreatePanelSingle(var1, 12633, tcbNow._work[var2 + 18] + var3, 11 + var4, 301, 0, var5 - tcbNow._work[21], (var3 & 1) * 80 + 116);
               } else {
                  var5 = this.CardBattleCardPos[(var3 >> 1) + 4];
                  this.CreatePanelSingle(var1, 12633, tcbNow._work[var2 + 18] + var3, 11 + var4, 301, 0, var5 + tcbNow._work[21], (var3 & 1) * 80 + 116);
               }
            }
         }

         return;
      case 562:
         this._TLoop(var1, 60, 563);
         break;
      case 563:
         var2 = iPlayerNo;
         var2 = iPlayerNo;
         if (iPushCounter[0] >= iPushCounter[1]) {
            tcbEffect[3]._work[4] = 1;
         }

         if (iPushCounter[0] <= iPushCounter[1]) {
            tcbEffect[4]._work[4] = 1;
         }

         tcbNow.md = 564;
         tcbNow.lp = 0;
         break;
      case 564:
         if (PlayerCardFormationCount[0] <= 0 && PlayerCardFormationCount[1] <= 0) {
            tcbNow.md = 569;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 565;
            tcbNow.lp = 0;
            iReqSENo = 14;
            this.PushSE(var1, 14);
         }
         break;
      case 565:
         var2 = iPlayerNo;
         var3 = iPlayerNo;
         tcbNow._work[22] = 0;
         if (PlayerCardFormationCount[var2] > 0) {
            if (tcbNow._work[10] == 0) {
               this.CreatePanelSingle(var1, 12638, 5, 365, 310, 0, 120, 150);
            } else {
               this.CreatePanelSingle(var1, 12638, 5, 365, 310, 0, 360, 150);
            }
         }

         if (PlayerCardFormationCount[1 - var3] > 0) {
            if (tcbNow._work[11] == 0) {
               this.CreatePanelSingle(var1, 12638, 5, 365, 310, 0, 120, 150);
            } else {
               this.CreatePanelSingle(var1, 12638, 5, 365, 310, 0, 360, 150);
            }
         }

         tcbNow.md = 566;
         tcbNow.lp = 0;
         break;
      case 566:
         this._TLoop(var1, 90, 567);
         break;
      case 567:
         int[][] var20 = new int[2][8];
         if (tcbNow._work[22] >= PlayerCardFormationCount[0] && tcbNow._work[22] >= PlayerCardFormationCount[1]) {
            this._TKilx(var1, 12634, 12634);
            this._TKilx(var1, 12638, 12638);
            tcbNow.md = 569;
            tcbNow.lp = 0;
         } else {
            for(var2 = 0; var2 < 8; ++var2) {
               var20[0][var2] = 0;
               var20[1][var2] = 0;
            }

            this._TKilx(var1, 12633, 12634);
            this.DrawTextClear(var1, 0);

            for(var2 = 0; var2 <= 1; ++var2) {
               var3 = tcbNow._work[22];
               if (var3 < PlayerCardFormationCount[var2]) {
                  var5 = PlayerCardFormation[var2][var3];
                  if (this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + this.pGameData.piGameDataXSize[50] * var5 + 1] == 0) {
                     for(var3 = 0; var3 < PlayerCardCount[var2]; ++var3) {
                        var6 = PlayerCard[var2][var3];
                        var4 = PlayerCardLevel[var2][var3];
                        if ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var6 + 170] + this.pGameData.piGameDataXSize[var6 + 170] * 44 + var4 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var6 + 170] + this.pGameData.piGameDataXSize[var6 + 170] * 44 + var4 * 2] & 255) == 0 && this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + this.pGameData.piGameDataXSize[50] * var5 + 2] > 0) {
                           var20[var2][var3] = 1;
                        } else if ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var6 + 170] + this.pGameData.piGameDataXSize[var6 + 170] * 44 + var4 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var6 + 170] + this.pGameData.piGameDataXSize[var6 + 170] * 44 + var4 * 2] & 255) == 1 && this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + this.pGameData.piGameDataXSize[50] * var5 + 3] > 0) {
                           var20[var2][var3] = 1;
                        } else if ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var6 + 170] + this.pGameData.piGameDataXSize[var6 + 170] * 44 + var4 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var6 + 170] + this.pGameData.piGameDataXSize[var6 + 170] * 44 + var4 * 2] & 255) == 2 && this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + this.pGameData.piGameDataXSize[50] * var5 + 4] > 0) {
                           var20[var2][var3] = 1;
                        }
                     }
                  } else {
                     for(var3 = 0; var3 < PlayerCardCount[var2]; ++var3) {
                        for(var4 = 0; var4 < 8; ++var4) {
                           if (this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + this.pGameData.piGameDataXSize[50] * var5 + 5 + var4] == PlayerCard[var2][var3]) {
                              var20[var2][var3] = 1;
                              break;
                           }
                        }
                     }
                  }
               }

               for(var3 = 0; var3 < PlayerCardCount[var2]; ++var3) {
                  var4 = PlayerCard[var2][var3];
                  var4 = PlayerCardLevel[var2][var3];
                  if (tcbPlayer[var2].obj.x < tcbPlayer[1 - var2].obj.x) {
                     var5 = this.CardBattleCardPos[var3 >> 1];
                     if (var20[var2][var3] == 0) {
                        this.CreatePanelSingle(var1, 12633, tcbNow._work[var2 + 18] + var3, var4 + 11, 301, 0, var5, (var3 & 1) * 80 + 116);
                     } else {
                        this.CreatePanelSingle(var1, 12633, tcbNow._work[var2 + 18] + var3, var4 + 22, 301, 0, var5, (var3 & 1) * 80 + 116);
                     }
                  } else {
                     var5 = this.CardBattleCardPos[(var3 >> 1) + 4];
                     if (var20[var2][var3] == 0) {
                        this.CreatePanelSingle(var1, 12633, tcbNow._work[var2 + 18] + var3, var4 + 11, 301, 0, var5, (var3 & 1) * 80 + 116);
                     } else {
                        this.CreatePanelSingle(var1, 12633, tcbNow._work[var2 + 18] + var3, var4 + 22, 301, 0, var5, (var3 & 1) * 80 + 116);
                     }
                  }
               }

               if (PlayerCardFormationCount[var2] > tcbNow._work[22]) {
                  if (tcbNow._work[var2 + 10] == 0) {
                     this.GDTString(var1, 0, this.GameData_TextPage[iLanguage * 3 + 0], PlayerCardFormation[var2][tcbNow._work[22]], 12634, 330, 40, 276, 16);
                  } else {
                     this.GDTString(var1, 0, this.GameData_TextPage[iLanguage * 3 + 0], PlayerCardFormation[var2][tcbNow._work[22]], 12634, 330, 298, 276, 16);
                  }
               }
            }

            var11 = iPushCounter;
            var11[0] += this.GetCardBattlePointFm(var1, 0, tcbNow._work[22]);
            var11 = iPushCounter;
            var11[1] += this.GetCardBattlePointFm(var1, 1, tcbNow._work[22]);
            iReqSENo = 18;
            this.PushSE(var1, 18);
            var12 = tcbNow._work;
            var10002 = var12[22]++;
            tcbNow.md = 568;
            tcbNow.lp = 0;
         }
         break;
      case 568:
         this._TLoop(var1, 60, 567);
         break;
      case 569:
         var2 = iPlayerNo;
         var2 = iPlayerNo;
         if (iPushCounter[0] >= iPushCounter[1]) {
            tcbEffect[3]._work[4] = 1;
         }

         if (iPushCounter[0] <= iPushCounter[1]) {
            tcbEffect[4]._work[4] = 1;
         }

         tcbNow.md = 570;
         tcbNow.lp = 0;
         break;
      case 570:
         this._TLoop(var1, 40, 571);
         break;
      case 571:
         var2 = iPlayerNo;
         var2 = iPlayerNo;
         this._TKilx(var1, 12633, 12633);

         for(var2 = 0; var2 <= 1; ++var2) {
            var15 = 0;
            if (tcbPlayer[var2].obj.x < tcbPlayer[1 - var2].obj.x) {
               var17 = 162;
            } else {
               var15 = 1;
               var17 = 173;
            }

            for(var5 = 0; var5 < PlayerCardCount[var2]; ++var5) {
               var6 = PlayerCard[var2][var5];
               var7 = PlayerCardLevel[var2][var5];
               var6 = this.CardBattleCardPos[(var15 << 2) + (var5 >> 1)];
               this.CreatePanelSingle(var1, 12633, tcbNow._work[var2 + 18] + var5, var17 + var7, 301, 0, var6, (var5 & 1) * 80 + 116);
            }
         }

         tcbNow.md = 572;
         tcbNow.lp = 0;
         break;
      case 572:
         this._TLoop(var1, 3, 573);
         break;
      case 573:
         this._TKilx(var1, 12634, 12634);
         this.CreatePanelSingle(var1, 12634, 5, 392, 304, 0, 240, 140);
         iReqSENo = 3;
         this.PushSE(var1, 3);
         tcbNow.md = 574;
         tcbNow.lp = 0;
         break;
      case 574:
         this._TLoop(var1, 15, 575);
         break;
      case 575:
         if (iPushCounter[0] == iPushCounter[1]) {
            tcbNow.md = 578;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 576;
            tcbNow.lp = 0;
         }
         break;
      case 576:
         var2 = iPlayerNo;
         var2 = iPlayerNo;
         this._TKilx(var1, 12633, 12633);
         if (iPushCounter[0] > iPushCounter[1]) {
            if (iPlayerNo == 0) {
               this.CreatePanelSingle(var1, 12626, 5, 272, 12338, 0, 220, 100);
            }
         } else if (1 == iPlayerNo) {
            this.CreatePanelSingle(var1, 12626, 5, 272, 12338, 0, 220, 100);
         }

         for(var3 = 0; var3 <= 1; ++var3) {
            var18 = 11;
            var14 = 0;
            if (tcbPlayer[var3].obj.x < tcbPlayer[1 - var3].obj.x) {
               var15 = var14;
               if (iPushCounter[var3] < iPushCounter[1 - var3]) {
                  var18 = 77;
                  var15 = var14;
               }
            } else {
               var14 = 1;
               var15 = var14;
               if (iPushCounter[var3] < iPushCounter[1 - var3]) {
                  var18 = 121;
                  var15 = var14;
               }
            }

            for(var5 = 0; var5 < PlayerCardCount[var3]; ++var5) {
               var6 = PlayerCard[var3][var5];
               var6 = PlayerCardLevel[var3][var5];
               var7 = this.CardBattleCardPos[(var15 << 2) + (var5 >> 1)];
               this.CreatePanelSingle(var1, 12633, tcbNow._work[var3 + 18] + var5, var18 + var6, 301, 0, var7, (var5 & 1) * 80 + 116);
            }
         }

         tcbNow.md = 577;
         tcbNow.lp = 0;
         break;
      case 577:
         this._TLoop(var1, 80, 578);
         break;
      case 578:
         this._TKilx(var1, 12633, 12633);

         for(var3 = 0; var3 <= 1; ++var3) {
            var18 = 66;
            var14 = 0;
            if (tcbPlayer[var3].obj.x < tcbPlayer[1 - var3].obj.x) {
               var15 = var14;
               if (iPushCounter[var3] < iPushCounter[1 - var3]) {
                  var18 = 0;
                  var15 = var14;
               }
            } else {
               var14 = 1;
               var15 = var14;
               if (iPushCounter[var3] < iPushCounter[1 - var3]) {
                  var18 = 0;
                  var15 = var14;
               }
            }

            for(var5 = 0; var5 < PlayerCardCount[var3]; ++var5) {
               if (var18 > 0) {
                  var6 = PlayerCard[var3][var5];
                  var6 = PlayerCardLevel[var3][var5];
                  var7 = this.CardBattleCardPos[(var15 << 2) + (var5 >> 1)];
                  this.CreatePanelSingle(var1, 12632, tcbNow._work[var3 + 18] + var5, var18 + var6, 301, 0, var7, (var5 & 1) * 80 + 116);
               }
            }
         }

         tcbNow.md = 579;
         tcbNow.lp = 0;
         break;
      case 579:
         this._TLoop(var1, 10, 580);
         break;
      case 580:
         tcbNow.md = 581;
         tcbNow.lp = 0;
         iCameraLock = 3;
         break;
      case 581:
         var2 = iPlayerNo;
         var2 = iPlayerNo;
         tcbNow._work[22] = -200;
         this._TKilx(var1, 12633, 12634);
         if (iPushCounter[0] >= iPushCounter[1]) {
            if (tcbPlayer[0].obj.x < tcbPlayer[1].obj.x) {
               tcbNow._work[22] = -200;
               this.CreatePanelSingle(var1, 12634, 3, 78, 430, 0, -120, 40);
            } else {
               tcbNow._work[22] = 200;
               this.CreatePanelSingle(var1, 12634, 3, 79, 430, 16, 360, 40);
            }

            tcbNow.md = 582;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 584;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 582:
         this._TKilx(var1, 12633, 12633);
         if (tcbPlayer[0].obj.x < tcbPlayer[1].obj.x) {
            var11 = tcbNow._work;
            var11[22] += 20;
            if (tcbNow._work[22] > 0) {
               tcbNow._work[22] = 0;
               tcbNow.md = 583;
               tcbNow.lp = 0;
               this.Voice(var1, 0, 0, 10);
            }

            tcbEffect[20] = this.CreatePanelSingle(var1, 12633, 3, 320, 201, 0, tcbNow._work[22] + 280, 220);
            tcbEffect[20]._work[20] = 1;
            this.CreatePanelSingle(var1, 12633, 3, 321, 201, 0, tcbNow._work[22] + 280, 220);
         } else {
            var11 = tcbNow._work;
            var11[22] -= 20;
            if (tcbNow._work[22] < 0) {
               tcbNow._work[22] = 0;
               tcbNow.md = 583;
               tcbNow.lp = 0;
               this.Voice(var1, 0, 0, 10);
            }

            tcbEffect[20] = this.CreatePanelSingle(var1, 12633, 3, 320, 201, 16, tcbNow._work[22] + 200, 220);
            tcbEffect[20]._work[20] = 1;
            this.CreatePanelSingle(var1, 12633, 3, 321, 201, 16, tcbNow._work[22] + 200, 220);
         }
         break;
      case 583:
         if ((tcbEffect[20].obj.wActFlag & 2) != 0) {
            tcbNow.md = 584;
            tcbNow.lp = 0;
         }
         break;
      case 584:
         this._TKilx(var1, 12633, 12634);
         if (iPushCounter[0] <= iPushCounter[1]) {
            if (tcbPlayer[1].obj.x < tcbPlayer[0].obj.x) {
               tcbNow._work[22] = -200;
               this.CreatePanelSingle(var1, 12634, 4, 78, 430, 0, -120, 40);
            } else {
               tcbNow._work[22] = 200;
               this.CreatePanelSingle(var1, 12634, 4, 79, 430, 16, 360, 40);
            }

            tcbNow.md = 585;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 587;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 585:
         this._TKilx(var1, 12633, 12633);
         if (tcbPlayer[1].obj.x < tcbPlayer[0].obj.x) {
            var11 = tcbNow._work;
            var11[22] += 20;
            if (tcbNow._work[22] > 0) {
               tcbNow._work[22] = 0;
               tcbNow.md = 586;
               tcbNow.lp = 0;
               this.Voice(var1, 0, 1, 10);
            }

            tcbEffect[20] = this.CreatePanelSingle(var1, 12633, 4, 320, 201, 0, tcbNow._work[22] + 280, 220);
            tcbEffect[20]._work[20] = 2;
            this.CreatePanelSingle(var1, 12633, 4, 321, 201, 0, tcbNow._work[22] + 280, 220);
         } else {
            var11 = tcbNow._work;
            var11[22] -= 20;
            if (tcbNow._work[22] < 0) {
               tcbNow._work[22] = 0;
               tcbNow.md = 586;
               tcbNow.lp = 0;
               this.Voice(var1, 0, 1, 10);
            }

            tcbEffect[20] = this.CreatePanelSingle(var1, 12633, 4, 320, 201, 16, tcbNow._work[22] + 200, 220);
            tcbEffect[20]._work[20] = 2;
            this.CreatePanelSingle(var1, 12633, 4, 321, 201, 16, tcbNow._work[22] + 200, 220);
         }
         break;
      case 586:
         if ((tcbEffect[20].obj.wActFlag & 2) != 0) {
            tcbNow.md = 587;
            tcbNow.lp = 0;
         }
         break;
      case 587:
         this._TKilx(var1, 12632, 12632);
         iEventStatus = 769;
         if (iPushCounter[0] == iPushCounter[1]) {
            iCameraLock = 4;
            this._TKilx(var1, 12625, 12644);
            this._TKilx(var1, 13632, 13689);
            tcbNow.md = 648;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         } else {
            iCameraLock = 4;
            tcbNow.md = 588;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 588:
         iCameraLock = 4;
         this._TKilx(var1, 12625, 12644);
         this._TKilx(var1, 13632, 13689);
         tcbNow.md = 652;
         tcbNow.lp = 0;
         if (iPushCounter[0] >= iPushCounter[1]) {
            var11 = PlayerEventFlag;
            var11[0] |= 1024;
            var11 = PlayerEventFlag;
            var11[1] |= 4;
            pushCounter[0] = 51;
            pushCounter[1] = 49;
         } else {
            var11 = PlayerEventFlag;
            var11[0] |= 4;
            var11 = PlayerEventFlag;
            var11[1] |= 1024;
            pushCounter[0] = 49;
            pushCounter[1] = 51;
         }

         this.Game(var1, tcbNow.md);
         break;
      case 589:
         var3 = iPlayerNo;
         var4 = 1 - iPlayerNo;
         var2 = this.GetCardAddAtack(var1, var3);
         if (iPushCounter[var3] == iPushCounter[var4]) {
            tcbNow.md = 590;
            tcbNow.lp = 0;
         } else {
            if (iPushCounter[var3] > iPushCounter[var4]) {
               tcbNow._work[13] = var3;
               tcbNow._work[14] = var4;
               var11 = PlayerEventFlag;
               var11[var3] |= 1024;
               var11 = PlayerEventFlag;
               var11[var4] |= 4;
            } else {
               tcbNow._work[13] = var4;
               tcbNow._work[14] = var3;
               var11 = PlayerEventFlag;
               var11[var4] |= 1024;
               var11 = PlayerEventFlag;
               var11[var3] |= 4;
            }

            this._TKilx(var1, 12625, 12625);
            this._TKilx(var1, 12627, 12627);
            if (var2 > 0) {
               tcbNow.md = 611;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 601;
               tcbNow.lp = 0;
            }
         }

         this.Game(var1, tcbNow.md);
         break;
      case 590:
         var3 = tcbNow._work[13];
         var2 = tcbNow._work[14];
         this._TKilx(var1, 12625, 12625);
         this._TKilx(var1, 12627, 12627);
         this._TKilx(var1, 12628, 12628);
         if (tcbNow._work[10] == var3) {
            tcbEffect[0] = this.CreatePanelSingle(var1, 12628, var3 + 3, 283, 205, 0, 200, 220);
            tcbEffect[0]._work[20] = var3 + 1;
            tcbEffect[1] = this.CreatePanelSingle(var1, 12628, var2 + 3, 283, 205, 16, 280, 220);
            tcbEffect[1]._work[20] = var3 + 1;
         } else {
            tcbEffect[0] = this.CreatePanelSingle(var1, 12628, var3 + 3, 283, 205, 16, 280, 220);
            tcbEffect[0]._work[20] = var3 + 1;
            tcbEffect[1] = this.CreatePanelSingle(var1, 12628, var2 + 3, 283, 205, 0, 200, 220);
            tcbEffect[1]._work[20] = var3 + 1;
         }

         this.CreatePanelSingle(var1, 12629, 5, 381, 207, 0, 220, 140);
         this.CreatePanelSingle(var1, 12629, 5, 387, 257, 0, 0, 0);
         tcbNow.md = 591;
         tcbNow.lp = 0;
         break;
      case 591:
         tcbNow.md = 592;
         tcbNow.lp = 0;
         break;
      case 592:
         this._TLoop(var1, 60, 593);
         break;
      case 593:
         var2 = tcbNow._work[13];
         var3 = tcbNow._work[14];
         this._TKilx(var1, 12628, 12628);
         if (tcbNow._work[10] == var2) {
            this.CreatePanelSingle(var1, 12628, var2 + 3, 307, 205, 0, 200, 220)._work[20] = tcbNow._work[13] + 1;
            this.CreatePanelSingle(var1, 12628, var3 + 3, 307, 205, 16, 280, 220)._work[20] = tcbNow._work[14] + 1;
         } else {
            this.CreatePanelSingle(var1, 12628, var2 + 3, 307, 205, 16, 280, 220)._work[20] = tcbNow._work[13] + 1;
            this.CreatePanelSingle(var1, 12628, var3 + 3, 307, 205, 0, 200, 220)._work[20] = tcbNow._work[14] + 1;
         }

         this.LIFE_DEC(var1, var2, this.EventDamage(var1, 1, var3, var2));
         this.LIFE_DEC(var1, var3, this.EventDamage(var1, 1, var2, var3));
         tcbNow.md = 594;
         tcbNow.lp = 0;
         break;
      case 594:
         this._TLoop(var1, 50, 595);
         break;
      case 595:
         var3 = tcbNow._work[13];
         var2 = tcbNow._work[14];
         iCameraLock = 4;
         PlayerAir[var2] = true;
         PlayerYPos[var2] = 0;
         ThrowDamage[var2] = false;
         DamageType[var2] = 7;
         DamageIndex[var2] = 1;
         DamageTime[var2] = 0;
         DamageOldIndex[var2] = DamageIndex[var2];
         DamageOldType[var2] = DamageType[var2];
         if (tcbNow._work[10] == var3) {
            PlayerXPos[var3] = iBackXPos + 7864320;
            PlayerOldXPos[var3] = PlayerXPos[var3];
            PlayerXPos[var2] = iBackXPos + 19660800;
            PlayerOldXPos[var2] = PlayerXPos[var2];
         } else {
            PlayerXPos[var3] = iBackXPos + 19660800;
            PlayerOldXPos[var3] = PlayerXPos[var3];
            PlayerXPos[var2] = iBackXPos + 7864320;
            PlayerOldXPos[var2] = PlayerXPos[var2];
         }

         tcbPlayer[var2].md = 876;
         PlayerAir[var3] = true;
         PlayerYPos[var3] = 0;
         ThrowDamage[var3] = false;
         DamageType[var3] = 7;
         DamageIndex[var3] = 1;
         DamageTime[var3] = 0;
         DamageOldIndex[var3] = DamageIndex[var3];
         DamageOldType[var3] = DamageType[var3];
         tcbPlayer[var3].md = 876;
         bBackVisible = true;
         this._TKilx(var1, 12624, 12644);
         tcbNow.md = 596;
         tcbNow.lp = 0;
         break;
      case 596:
         this._TLoop(var1, 10, 597);
         break;
      case 597:
         var2 = tcbNow._work[13];
         var2 = tcbNow._work[14];
         iBackShakeType = 2;
         iBackShake = 12;
         tcbNow.md = 598;
         tcbNow.lp = 0;
         break;
      case 598:
         this._TLoop(var1, 20, 599);
         break;
      case 599:
         tcbNow.md = 600;
         tcbNow.lp = 0;
         break;
      case 600:
         var2 = tcbNow._work[13];
         var2 = tcbNow._work[14];
         iMarkVisible = 0;
         _cameraPrio = 0;
         iEventStatus = 0;
         tcbNow.md = 519;
         tcbNow.lp = 0;
         break;
      case 601:
         var3 = tcbNow._work[13];
         var2 = tcbNow._work[14];
         if (tcbNow._work[10] == var3) {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12627, var3 + 3, 282, 205, 0, 200, 220);
            tcbEffect[1]._work[20] = tcbNow._work[13] + 1;
         } else {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12627, var3 + 3, 282, 205, 16, 280, 220);
            tcbEffect[1]._work[20] = tcbNow._work[13] + 1;
         }

         tcbNow._work[22] = 0;
         tcbNow.md = 602;
         tcbNow.lp = 0;
         break;
      case 602:
         var2 = tcbNow._work[13];
         var5 = tcbNow._work[14];
         var6 = tcbEffect[1].obj.x >> 16;
         var7 = tcbEffect[1].obj.y >> 16;
         if (tcbNow._work[22] > 0) {
            var12 = tcbNow._work;
            var10002 = var12[22]--;
         } else {
            EventHitStop = 0;

            for(var2 = 0; var2 < tcbEffect[1].obj.iHitNum; ++var2) {
               if (tcbEffect[1].obj.hit[var2 * 5 + 0] == 2) {
                  var4 = tcbEffect[1].obj.hit[var2 * 5 + 1];
                  var8 = tcbEffect[1].obj.hit[var2 * 5 + 2];
                  var3 = var4;
                  if ((tcbEffect[1].obj.wObjFlag & 16) != 0) {
                     var3 = var4 * -1;
                  }

                  if (tcbEffect[1].obj.OptData[1] == 50) {
                     this.CreatePanelSingle(var1, 12629, 5, 0, 205, 0, var6 + var3, var7 + var8);
                  } else if (tcbEffect[1].obj.OptData[1] == 100) {
                     this.CreatePanelSingle(var1, 12629, 5, 1, 205, 0, var6 + var3, var7 + var8);
                  }

                  tcbEffect[1].obj.hit[var2 * 5 + 0] = -1;
                  EventHitStop = 1;
                  tcbNow._work[22] = 6;
                  iEventBackScroll = false;
                  this._TKilx(var1, 12634, 12634);
                  iCameraLock = 5;
                  this._TKilx(var1, 12628, 12628);
                  if (tcbNow._work[0] == 0) {
                     this.CreatePanelSingle(var1, 12628, var5 + 3, 333, 206, 16, 240, 220)._work[20] = tcbNow._work[2] + 1;
                  } else {
                     this.CreatePanelSingle(var1, 12628, var5 + 3, 333, 206, 0, 240, 220)._work[20] = tcbNow._work[2] + 1;
                  }
               }
            }

            if ((tcbEffect[1].obj.wActFlag & 2) != 0) {
               tcbNow.md = 603;
               tcbNow.lp = 0;
            }
         }
         break;
      case 603:
         var2 = tcbNow._work[13];
         var3 = tcbNow._work[14];
         this._TKilx(var1, 12628, 12629);
         if (tcbNow._work[10] == var2) {
            this.CreatePanelSingle(var1, 12628, var3 + 3, 286, 205, 16, 280, 220)._work[20] = tcbNow._work[14] + 1;
         } else {
            this.CreatePanelSingle(var1, 12628, var3 + 3, 286, 205, 0, 200, 220)._work[20] = tcbNow._work[14] + 1;
         }

         tcbNow.md = 604;
         tcbNow.lp = 0;
         break;
      case 604:
         this._TLoop(var1, 50, 605);
         break;
      case 605:
         var3 = tcbNow._work[13];
         var2 = tcbNow._work[14];
         iCameraLock = 4;
         PlayerAir[var2] = true;
         PlayerYPos[var2] = 0;
         this.LIFE_DEC(var1, var2, this.EventDamage(var1, 1, var3, var2));
         ThrowDamage[var2] = false;
         DamageType[var2] = 7;
         DamageIndex[var2] = 1;
         DamageTime[var2] = 0;
         DamageOldIndex[var2] = DamageIndex[var2];
         DamageOldType[var2] = DamageType[var2];
         tcbPlayer[var2].md = 876;
         bBackVisible = true;
         this._TKilx(var1, 12624, 12644);
         tcbNow.md = 606;
         tcbNow.lp = 0;
         break;
      case 606:
         this._TLoop(var1, 10, 607);
         break;
      case 607:
         var3 = tcbNow._work[13];
         var2 = tcbNow._work[14];
         iBackShakeType = 2;
         iBackShake = 12;
         this.CreatePanelSingle(var1, 12627, 2, 100, 205, 0, tcbPlayer[var2].obj.x >> 16, 320);
         tcbPlayer[var3].md = 447;
         tcbNow.md = 608;
         tcbNow.lp = 0;
         break;
      case 608:
         this._TLoop(var1, 20, 609);
         break;
      case 609:
         tcbNow.md = 610;
         tcbNow.lp = 0;
         break;
      case 610:
         var2 = tcbNow._work[13];
         var2 = tcbNow._work[14];
         iMarkVisible = 0;
         _cameraPrio = 0;
         iEventStatus = 0;
         tcbNow.md = 519;
         tcbNow.lp = 0;
         break;
      case 611:
         var3 = tcbNow._work[13];
         var2 = tcbNow._work[14];
         if (tcbNow._work[10] == var3) {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12627, var3 + 3, 283, 205, 0, 200, 220);
            tcbEffect[1]._work[20] = var3 + 1;
         } else {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12627, var3 + 3, 283, 205, 16, 280, 220);
            tcbEffect[1]._work[20] = var3 + 1;
         }

         tcbNow.md = 612;
         tcbNow.lp = 0;
         break;
      case 612:
         var8 = tcbNow._work[13];
         var7 = tcbNow._work[14];
         var5 = tcbEffect[1].obj.x >> 16;
         var6 = tcbEffect[1].obj.y >> 16;
         if (tcbNow._work[22] > 0) {
            var12 = tcbNow._work;
            var10002 = var12[22]--;
         } else {
            for(var2 = 0; var2 < tcbEffect[1].obj.iHitNum; ++var2) {
               if (tcbEffect[1].obj.hit[var2 * 5 + 0] == 2) {
                  var4 = tcbEffect[1].obj.hit[var2 * 5 + 1];
                  var9 = tcbEffect[1].obj.hit[var2 * 5 + 2];
                  var3 = var4;
                  if ((tcbEffect[1].obj.wObjFlag & 16) != 0) {
                     var3 = var4 * -1;
                  }

                  if (tcbEffect[1].obj.OptData[1] == 50) {
                     this.CreatePanelSingle(var1, 12629, 5, 0, 206, tcbEffect[1].obj.wObjFlag & 16, var5 + var3, var6 + var9);
                  } else if (tcbEffect[1].obj.OptData[1] == 100) {
                     this.CreatePanelSingle(var1, 12629, 5, 1, 206, tcbEffect[1].obj.wObjFlag & 16, var5 + var3, var6 + var9);
                  }

                  tcbEffect[1].obj.hit[var2 * 5 + 0] = -1;
                  tcbNow._work[22] = 6;
                  this._TKilx(var1, 12628, 12628);
                  if (tcbNow._work[10] == var8) {
                     this.CreatePanelSingle(var1, 12628, var7 + 3, 333, 206, 16, 280, 220)._work[20] = tcbNow._work[14] + 1;
                  } else {
                     this.CreatePanelSingle(var1, 12628, var7 + 3, 333, 206, 0, 200, 220)._work[20] = tcbNow._work[14] + 1;
                  }
               }
            }

            if ((tcbEffect[1].obj.wActFlag & 2) != 0) {
               tcbNow.md = 613;
               tcbNow.lp = 0;
            }
         }
         break;
      case 613:
         var2 = tcbNow._work[13];
         var3 = tcbNow._work[14];
         this._TKilx(var1, 12628, 12628);
         if (tcbNow._work[10] == var2) {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12628, var3 + 3, 307, 205, 16, 280, 220);
            tcbEffect[1]._work[20] = tcbNow._work[14] + 1;
         } else {
            tcbEffect[1] = this.CreatePanelSingle(var1, 12628, var3 + 3, 307, 205, 0, 200, 220);
            tcbEffect[1]._work[20] = tcbNow._work[14] + 1;
         }

         this.LIFE_DEC(var1, var3, this.EventDamage(var1, 1, var2, var3));
         tcbNow.md = 614;
         tcbNow.lp = 0;
         break;
      case 614:
         this._TLoop(var1, 20, 615);
         break;
      case 615:
         var3 = tcbNow._work[13];
         var2 = tcbNow._work[14];
         iCameraLock = 4;
         iEventStatus &= -513;
         iEventStatus |= 1024;
         this._TKilx(var1, 12624, 12644);
         var16 = this._TaskMake(var1, 456, 12624);
         if (tcbNow._work[10] == var3) {
            var16._work[0] = 1;
         } else {
            var16._work[0] = 0;
         }

         var16._work[1] = var3;
         var16._work[2] = var2;
         var16._work[3] = 150;
         var16._work[20] = this.GetCardAddAtack(var1, var3);
         var16._work[21] = 0;
         _cameraPrio = 0;
         tcbNow.md = 519;
         tcbNow.lp = 0;
         break;
      case 616:
         iPushCounter[0] = 0;
         tcbNow._work[0] = -1;
         tcbNow._work[1] = -1;
         tcbNow.md = 617;
         tcbNow.lp = 0;
         break;
      case 617:
         var2 = tcbNow.prio + 1;
         var4 = tcbNow._work[2];
         var3 = tcbNow._work[3];
         if (tcbNow._work[0] != iPushCounter[0] || tcbNow._work[1] != iPushCounter[1]) {
            tcbNow._work[0] = iPushCounter[0];
            tcbNow._work[1] = iPushCounter[1];
            if (tcbNow._work[4] == 0) {
               this._TKilx(var1, var2, var2);
               this.CreateValueObjectB(var1, var2, var4, var3, iPushCounter[0], 3, 28, 280, 12356, 0, 5, 0);
               this.CreatePanelSingle(var1, var2, 5, 259, 12338, 0, var4 + 90, var3);
               var4 += 356;
               this.CreateValueObjectB(var1, var2, var4, var3, iPushCounter[1], 3, 28, 280, 12356, 0, 5, 0);
               this.CreatePanelSingle(var1, var2, 5, 259, 12338, 0, var4 + 90, var3);
            } else {
               this._TKilx(var1, var2, var2);
               this.CreateValueObjectB(var1, var2, var4, var3, iPushCounter[0], 3, 28, 280, 12356, 0, 5, 0);
               this.CreatePanelSingle(var1, var2, 5, 259, 12338, 0, var4 + 90, var3);
               var4 += 356;
               this.CreateValueObjectB(var1, var2, var4, var3, iPushCounter[1], 3, 28, 280, 12356, 0, 5, 0);
               this.CreatePanelSingle(var1, var2, 5, 259, 12338, 0, var4 + 90, var3);
            }
         }
         break;
      case 618:
         iPushCounter[1] = 0;
         tcbNow._work[0] = 40;
         tcbNow.md = 619;
         tcbNow.lp = 0;
         break;
      case 619:
         var12 = tcbNow._work;
         var10002 = var12[0]--;
         if (tcbNow._work[0] <= 0) {
            tcbNow._work[0] = this.pGameData.piGameData[this.pGameData.piGameDataPos[147] + this.pGameData.piGameDataXSize[147] * 0 + CPULevel[1]] + CPURand[0] % 6;
            var12 = iPushCounter;
            var10002 = var12[1]++;
         }
         break;
      case 620:
         tcbNow._work[10] = 0;
         tcbNow._work[11] = 0;
         tcbNow._work[12] = CPURand[0] % this.pGameData.piGameDataYSize[148];
         tcbNow.md = 621;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 621:
         if (iPlayMode == 8) {
            var2 = 6;
         } else {
            var2 = CPULevel[1];
         }

         var4 = CPURand[0] % 6 + (var2 << 3);
         pushButtonCounter = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[156] + var4 * 2 * this.pGameData.piGameDataXSize[156] + 0 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[156] + var4 * 2 * this.pGameData.piGameDataXSize[156] + 0] & 255);
         this._TKilx(var1, 13635, 13644);

         for(var3 = 0; var3 < pushButtonCounter; ++var3) {
            var16 = this._TaskMake(var1, 623, 13635);
            var16._work[2] = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[156] + var4 * 2 * this.pGameData.piGameDataXSize[156] + ((var3 << 2) + 1) * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[156] + var4 * 2 * this.pGameData.piGameDataXSize[156] + ((var3 << 2) + 1) * 2] & 255);
            var16._work[3] = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[156] + var4 * 2 * this.pGameData.piGameDataXSize[156] + ((var3 << 2) + 1 + 1) * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[156] + var4 * 2 * this.pGameData.piGameDataXSize[156] + ((var3 << 2) + 1 + 1) * 2] & 255);
            var16._work[4] = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[156] + var4 * 2 * this.pGameData.piGameDataXSize[156] + ((var3 << 2) + 1 + 2) * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[156] + var4 * 2 * this.pGameData.piGameDataXSize[156] + ((var3 << 2) + 1 + 2) * 2] & 255) + 1;
            var16._work[5] = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[156] + var4 * 2 * this.pGameData.piGameDataXSize[156] + ((var3 << 2) + 1 + 3) * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[156] + var4 * 2 * this.pGameData.piGameDataXSize[156] + ((var3 << 2) + 1 + 3) * 2] & 255);
            var16._work[6] = var3 + 3;
            var16._work[7] = 0;
            if (this.pGameData.piGameData[this.pGameData.piGameDataPos[148] + tcbNow._work[12] * this.pGameData.piGameDataXSize[148] + var2] > 0) {
               var16._work[7] = 1;
            }

            var11 = tcbNow._work;
            var10002 = var11[12]++;
         }

         tcbNow.md = 622;
         tcbNow.lp = 0;
         break;
      case 622:
         if (pushButtonCounter <= 0) {
            tcbNow.md = 620;
            tcbNow.lp = 0;
         }
         break;
      case 623:
         this._TLoop(var1, tcbNow._work[4], 624);
         break;
      case 624:
         var2 = tcbNow.prio + tcbNow._work[6];
         var3 = tcbNow._work[2];
         var4 = tcbNow._work[3];
         this._TKilx(var1, var2, var2);
         if (tcbNow._work[7] == 0) {
            this.CreatePanelSingle(var1, var2, 5, 278, 12298, 0, var3, var4);
         } else {
            this.CreatePanelSingle(var1, var2, 5, 358, 12298, 0, var3, var4);
         }

         tcbNow.md = 625;
         tcbNow.lp = 0;
         break;
      case 625:
         var3 = iPlayerNo;
         var6 = tcbNow.prio + tcbNow._work[6];
         var4 = tcbNow._work[2];
         var5 = tcbNow._work[3];
         var11 = tcbNow._work;
         var10002 = var11[5]--;

         for(var2 = 0; var2 < 5; ++var2) {
            if (TouchesStatus[var2] != 0 && TouchesXPos[var2] >= var4 && TouchesXPos[var2] <= var4 + 64 && TouchesYPos[var2] >= var5 && TouchesYPos[var2] <= var5 + 64) {
               if (tcbNow._work[7] == 0) {
                  var11 = iPushCounter;
                  var10002 = var11[var3]++;
               } else {
                  var11 = iPushCounter;
                  var11[var3] += 2;
               }

               this._TKilx(var1, var6, var6);
               if (tcbNow._work[7] == 0) {
                  this.CreatePanelSingle(var1, var6, 5, 279, 12298, 0, var4, var5);
               } else {
                  this.CreatePanelSingle(var1, var6, 5, 402, 12298, 0, var4, var5);
               }

               tcbNow.md = 626;
               tcbNow.lp = 0;
               return;
            }
         }

         if (tcbNow._work[5] < 0) {
            this._TKilx(var1, var6, var6);
            tcbNow.md = 627;
            tcbNow.lp = 0;
         }
         break;
      case 626:
         this._TLoop(var1, 20, 627);
         break;
      case 627:
         var2 = tcbNow.prio + tcbNow._work[6];
         this._TKilx(var1, var2, var2);
         --pushButtonCounter;
         this._TKill(var1);
      }

   }

   public void Game11(GlobalWork var1, int var2) {
      int var3;
      int var4;
      switch(var2) {
      case 0:
      case 845:
      default:
         break;
      case 846:
         this._TKilx(var1, 4106, 4106 + 10);
         this.CreatePanelSingle(var1, 4106, 0, 12, 24576, 0, 0, 0);
         this.CreatePanelSingle(var1, 4106, 0, 148, 24576 + 1, 0, 0, 0);
         this.CreatePanelSingle(var1, 4106, 0, 10, 24576 + 2, 0, 0, 0);
         bTaskSkip = true;
         iFadeBack = iFade;
         iFade = 0;
         if (iPlayMode == 2) {
            this.CreatePanelSingle(var1, 4106, 0, 171, 24576 + 3, 0, 0, 48);
            this.CreatePanelSingle(var1, 4106, 0, 173, 24576 + 3, 0, 0, 104);
            this.CreatePanelSingle(var1, 4106, 0, 175, 24576 + 3, 0, 0, 160);
            this.CreatePanelSingle(var1, 4106, 0, 177, 24576 + 3, 0, 0, 216);
            tcbNow._work[11] = 4;
         } else {
            this.CreatePanelSingle(var1, 4106, 0, 171, 24576 + 3, 0, 0, 48);
            this.CreatePanelSingle(var1, 4106, 0, 173, 24576 + 3, 0, 0, 104);
            this.CreatePanelSingle(var1, 4106, 0, 177, 24576 + 3, 0, 0, 160);
            tcbNow._work[11] = 3;
         }

         tcbNow._work[10] = -1;
         tcbNow.md = 847;
         tcbNow.lp = 0;
         break;
      case 847:
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            if (this.isMission(var1) != 0) {
               this.CreateGamepad(var1, 0);
            }

            this._TKilx(var1, 4106, 4106 + 10);
            iFade = iFadeBack;
            bPause = false;
            tcbNow.md = 676;
            tcbNow.lp = 0;
         } else {
            bTaskSkip = true;
            var3 = 48;

            for(var2 = 0; var2 < tcbNow._work[11]; ++var2) {
               if (TouchesXPos[0] > 0 && TouchesXPos[0] < 480 && TouchesYPos[0] > var3 && TouchesYPos[0] < var3 + 56 && TouchesStatus[0] != 0) {
                  tcbNow._work[10] = var2;
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  tcbNow.md = 848;
                  tcbNow.lp = 0;
                  break;
               }

               var3 += 56;
            }

            if (tcbNow._work[10] >= 0) {
               this._TKilx(var1, 4106 + 1, 4106 + 1);
               if (iPlayMode == 2) {
                  this.CreatePanelSingle(var1, 4106 + 1, 0, (tcbNow._work[10] << 1) + 170, 24576 + 3, 0, 0, tcbNow._work[10] * 56 + 48);
               } else if (tcbNow._work[10] == 2) {
                  this.CreatePanelSingle(var1, 4106 + 1, 0, 176, 24576 + 3, 0, 0, tcbNow._work[10] * 56 + 48);
               } else {
                  this.CreatePanelSingle(var1, 4106 + 1, 0, (tcbNow._work[10] << 1) + 170, 24576 + 3, 0, 0, tcbNow._work[10] * 56 + 48);
               }
            }
         }
         break;
      case 848:
         bTaskSkip = true;
         this._TLoop(var1, 45, 849);
         break;
      case 849:
         bTaskSkip = true;
         switch(tcbNow._work[10]) {
         case 0:
            tcbNow.md = 357;
            tcbNow.lp = 0;
            return;
         case 1:
            tcbNow.md = 854;
            tcbNow.lp = 0;
            return;
         case 2:
            if (iPlayMode == 2) {
               iFade = iFadeBack;
               iBackKeyType = 0;
               bPause = false;
               this._TKilx(var1, 4106, 4106 + 10);
               this._TKilx(var1, 8192, 65535);
               this._TaskMake(var1, 245, 8192);
               iPlayBGMNo = -1;
               tcbNow.md = 676;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 850;
               tcbNow.lp = 0;
            }

            return;
         case 3:
            tcbNow.md = 850;
            tcbNow.lp = 0;
            return;
         default:
            return;
         }
      case 850:
         if (bPause) {
            bTaskSkip = true;
            var3 = 4116;
            var2 = 24586;
         } else {
            var3 = tcbNow.prio + 1;
            var2 = tcbNow._work[1];
         }

         tcbNow._work[14] = -1;
         this.CreatePanelSingle(var1, var3, 0, 274, var2 + 5, 0, 0, 0);
         this.DrawTextClear(var1, 1);
         this.TextGDTString(var1, 1, iLanguage, 72, var3 + 1, var2 + 7, 64, 112, 16);
         this.TextGDTString(var1, 1, iLanguage, 11, var3 + 1, var2 + 7, 98, 236, 16);
         this.TextGDTString(var1, 1, iLanguage, 12, var3 + 1, var2 + 7, 340, 236, 16);
         tcbNow.md = 851;
         tcbNow.lp = 0;
         break;
      case 851:
         var2 = tcbNow._work[14];
         if (bPause) {
            bTaskSkip = true;
            var3 = 4116;
            var2 = 24586;
         } else {
            var3 = tcbNow.prio + 1;
            var2 = tcbNow._work[1];
         }

         if (this.CheckBack(var1, 100000, 100000, TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow._work[14] = 0;
            tcbNow.md = 852;
            tcbNow.lp = 0;
         } else {
            short var7 = 306;

            for(var4 = 0; var4 < 2; ++var4) {
               if (TouchesXPos[0] > var7 && TouchesXPos[0] < var7 + 120 && TouchesYPos[0] > 220 && TouchesYPos[0] < 220 + 50 && TouchesStatus[0] != 0) {
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  tcbNow._work[14] = var4;
                  tcbNow.md = 852;
                  tcbNow.lp = 0;
                  break;
               }

               var7 = 60;
            }
         }

         if (tcbNow._work[14] >= 0) {
            this._TKilx(var1, var3, var3);
            this.CreatePanelSingle(var1, var3, 0, tcbNow._work[14] + 255, var2 + 5, 0, 0, 0);
         }
         break;
      case 852:
         if (bPause) {
            bTaskSkip = true;
         }

         this._TLoop(var1, 45, 853);
         break;
      case 853:
         if (bPause) {
            bTaskSkip = true;
         } else {
            var2 = tcbNow.prio;
            var2 = tcbNow._work[1];
         }

         if (tcbNow._work[14] == 0) {
            if (bPause) {
               iFade = iFadeBack;
            }

            this._TKilx(var1, 4116, 4126);
            tcbNow.md = 846;
            tcbNow.lp = 0;
         } else {
            if (bPause) {
               iFade = iFadeBack;
               this._TKilx(var1, 4097, 4126);
               tcbNow.md = 676;
               tcbNow.lp = 0;
            }

            bPause = false;
            this._TKilx(var1, 8192, 65535);
            this._TaskMake(var1, 260, 8192);
            this.GdtBGM(var1, 0);
         }
         break;
      case 854:
         if (bPause) {
            bTaskSkip = true;
            var3 = 4116;
            var2 = 24586;
         } else {
            var3 = tcbNow.prio + 1;
            var2 = tcbNow._work[1];
         }

         iSoundVolume[0] = ConfigData[2] & 255;
         iSoundVolume[1] = ConfigData[3] & 255;
         this.CreatePanelSingle(var1, var3, 0, 12, var2, 0, 0, 0);
         this.CreatePanelSingle(var1, var3, 0, 149, var2 + 3, 0, 0, 0);
         this.CreatePanelSingle(var1, var3, 0, 10, var2 + 5, 0, 0, 0);
         this.CreatePanelSingle(var1, var3, 0, 150, var2 + 3, 0, 8, 48);
         var4 = iSoundVolume[0] * 208 / 100;
         this.CreatePanel(var1, var3 + 2, 4096, 65517, var2 + 4, 0, 9764864, 6291456, 0, 0, 0, 0, 0, 0, var4 << 16, 196608);
         this.CreatePanelSingle(var1, var3 + 2, 0, 98, var2 + 5, 0, var4 + 149, 96);
         var4 = iSoundVolume[1] * 208 / 100;
         this.CreatePanel(var1, var3 + 3, 4096, 65517, var2 + 4, 0, 9764864, 8388608, 0, 0, 0, 0, 0, 0, var4 << 16, 196608);
         this.CreatePanelSingle(var1, var3 + 3, 0, 98, var2 + 5, 0, var4 + 149, 128);
         if (this.isMission(var1) != 0 || iPlayMode != 0) {
            if (iControlType[iPlayerNo] == 2) {
               this.CreatePanelSingle(var1, var3 + 1, 0, 151, var2 + 3, 0, 8, 192);
            } else {
               this.CreatePanelSingle(var1, var3 + 1, 0, 152, var2 + 3, 0, 8, 192);
            }
         }

         tcbNow.md = 855;
         tcbNow.lp = 0;
         break;
      case 855:
         if (bPause) {
            bTaskSkip = true;
            var2 = 4116;
            var3 = 24586;
         } else {
            var2 = tcbNow.prio + 1;
            var3 = tcbNow._work[1];
         }

         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            ConfigData[2] = (byte)(iSoundVolume[0] & 255);
            ConfigData[3] = (byte)(iSoundVolume[1] & 255);
            ConfigData[4] = (byte)(iControlType[0] & 255);
            if (!bPause) {
               this._FILESave(var1);
               tcbNow.md = 857;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 859;
               tcbNow.lp = 0;
            }
         } else {
            int var5 = 96;

            for(var4 = 0; var4 < 2; ++var4) {
               int var6 = iSoundVolume[var4] * 208 / 100;
               if (TouchesXPos[0] > var6 + 149 && TouchesXPos[0] < var6 + 149 + 32 && TouchesYPos[0] > var5 && TouchesYPos[0] < var5 + 32 && TouchesStatus[0] != 0) {
                  tcbNow._work[14] = var4;
                  tcbNow._work[15] = TouchesXPos[0] - 149;
                  tcbNow._work[16] = var6;
                  tcbNow._work[17] = tcbNow._work[16];
                  tcbNow.md = 856;
                  tcbNow.lp = 0;
                  return;
               }

               var5 += 32;
            }

            if (this.isMission(var1) != 0 || iPlayMode != 0) {
               if (TouchesXPos[0] > 40 && TouchesXPos[0] < 240 && TouchesYPos[0] > 180 && TouchesYPos[0] < 280 && TouchesStatus[0] != 0) {
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  iControlType[0] = 2;
                  this._TKilx(var1, var2 + 1, var2 + 1);
                  this.CreatePanelSingle(var1, var2 + 1, 0, 151, var3 + 3, 0, 8, 192);
               } else if (TouchesXPos[0] > 240 && TouchesXPos[0] < 440 && TouchesYPos[0] > 180 && TouchesYPos[0] < 280 && TouchesStatus[0] != 0) {
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  this._TKilx(var1, var2 + 1, var2 + 1);
                  iControlType[0] = 1;
                  this.CreatePanelSingle(var1, var2 + 1, 0, 152, var3 + 3, 0, 8, 192);
               }
            }
         }
         break;
      case 856:
         if (bPause) {
            bTaskSkip = true;
            var2 = 4116;
            var3 = 24586;
         } else {
            var2 = tcbNow.prio + 1;
            var3 = tcbNow._work[1];
         }

         if (TouchesYPosGame[0] <= 0 && TouchesXPos[0] <= 0) {
            iSoundVolume[tcbNow._work[14]] = tcbNow._work[17] * 100 / 208;
            if (tcbNow._work[14] == 0) {
               ConfigData[2] = (byte)(iSoundVolume[tcbNow._work[14]] & 255);
               iPlayBGMNo = iPlayBGMNo;
               bBGMPlayLoop = bBGMPlayLoop;
               this.PlayBGM(var1, iPlayBGMNo, bBGMPlayLoop);
            }

            tcbNow.md = 855;
            tcbNow.lp = 0;
         } else {
            var4 = TouchesXPos[0] - 149 - tcbNow._work[15];
            if (var4 != 0) {
               tcbNow._work[17] = tcbNow._work[16] + var4;
               if (tcbNow._work[17] < 0) {
                  tcbNow._work[17] = 0;
               }

               if (tcbNow._work[17] > 208) {
                  tcbNow._work[17] = 208;
               }

               this._TKilx(var1, var2 + 2 + tcbNow._work[14], var2 + 2 + tcbNow._work[14]);
               this.CreatePanel(var1, var2 + 2 + tcbNow._work[14], 4096, 65517, var3 + 4, 0, 9764864, tcbNow._work[14] * 32 + 96 << 16, 0, 0, 0, 0, 0, 0, tcbNow._work[17] << 16, 196608);
               this.CreatePanelSingle(var1, var2 + 2 + tcbNow._work[14], 0, 98, var3 + 5, 0, tcbNow._work[17] + 149, tcbNow._work[14] * 32 + 96);
            }
         }
         break;
      case 857:
         if (bPause) {
            bTaskSkip = true;
         }

         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 858;
         tcbNow.lp = 0;
         break;
      case 858:
         if (bPause) {
            bTaskSkip = true;
         }

         if (iFade == 255 || iFade == 0) {
            this._FILESave(var1);
            tcbNow.md = 352;
            tcbNow.lp = 0;
            this._TKilx(var1, 8193, 65535);
         }
         break;
      case 859:
         if (bPause) {
            bTaskSkip = true;
         }

         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 860;
         tcbNow.lp = 0;
         break;
      case 860:
         if (iFade == 255 || iFade == 0) {
            if (bPause) {
               bTaskSkip = true;
               var2 = 4116;
            } else {
               var2 = tcbNow.prio + 1;
               var3 = tcbNow._work[1];
            }

            this._FILESave(var1);
            this._TKilx(var1, var2, var2 + 3);
            tcbNow.md = 846;
            tcbNow.lp = 0;
         }
      }

   }

   public void Game12(GlobalWork var1, int var2) {
      int var4;
      int[] var6;
      int[] var8;
      int var10;
      TCB var13;
      ObjReq var16;
      int var10002;
      short var20;
      switch(var2) {
      case 0:
      case 184:
      case 259:
      default:
         break;
      case 185:
         var4 = iPlayerNo;
         var10 = iPlayerNo;

         for(var2 = 1; var2 < 31; ++var2) {
            LoadData[var2] = -1;
            LoadFilter[var2] = 0;
         }

         LoadData[3] = PlayerType[var4];
         LoadFilter[3] = 251;
         this.SetLoad(var1, true);
         var2 = this.GetCPU(var1, var4);
         if (var2 < 0) {
         }

         PlayerType[1 - var10] = var2;
         tcbNow.md = 186;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 186:
         var2 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         LoadData[4] = PlayerType[var2];
         LoadFilter[4] = 0;
         this.SetLoad(var1, true);
         iBackNo = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[39] + this.ChrGameData[var2 + 3].piGameDataXSize[39] * 0 + 0];
         tcbNow.md = 187;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 187:
         var2 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         iBackKeyType = 1;
         this._TKilx(var1, 8193, 65535);
         iExtOn = 0;
         iRound = 0;
         WinPoint[0] = 0;
         WinPoint[1] = 0;
         if (iPlayMode == 0) {
            Level[0] = this.GetLevel(var1, PlayerType[0]);
            this.InitCharCard(var1, var2, PlayerType[var2], true, 0);
         }

         var10 = iStage;
         var2 = var10;
         if (var10 > 7) {
            var2 = 7;
         }

         if (this.isMission(var1) == 0) {
            Level[1] = this.pGameData.piGameData[this.pGameData.piGameDataPos[4] + this.pGameData.piGameDataXSize[4] * 9 + var2];
            CPULevel[1] = this.pGameData.piGameData[this.pGameData.piGameDataPos[4] + this.pGameData.piGameDataXSize[4] * 10 + var2];
         } else {
            Level[1] = Level[0] + this.pGameData.piGameData[this.pGameData.piGameDataPos[4] + (iDifficulty + 3) * this.pGameData.piGameDataXSize[4] + var2];
            CPULevel[1] = this.pGameData.piGameData[this.pGameData.piGameDataPos[4] + iDifficulty * this.pGameData.piGameDataXSize[4] + var2];
         }

         if (CPULevel[1] >= 8) {
            CPULevel[1] = 7;
         }

         if (Level[1] > 98) {
            Level[1] = 98;
         }

         if (iPlayMode == 0 && this.isMission(var1) == 0) {
            if (iStage <= 3) {
               tcbNow.md = 712;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 249;
               tcbNow.lp = 0;
            }

            this.Game(var1, tcbNow.md);
         } else {
            for(var2 = 1; var2 < 31; ++var2) {
               LoadData[var2] = -1;
            }

            LoadData[6] = PlayerType[0];
            LoadData[7] = PlayerType[1];
            LoadData[1] = iBackNo + 1;
            LoadData[4] = PlayerType[1];
            LoadData[5] = 1;
            this.SetLoad(var1, true);
            tcbNow.md = 188;
            tcbNow.lp = 0;
         }
         break;
      case 188:
         var2 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         this.DrawTextClear(var1, 0);
         var10 = iStage + 1;
         if (iStageMax != iStage && (this.isMission(var1) != 0 || iStage < 7)) {
            tcbEffect[1] = this.CreatePanelSingle(var1, 24576, 5, 1, 12298, 0, 0, 160);
            if (var10 >= 10) {
               this.CreatePanelSingle(var1, 24576, 5, var10 / 10 + 10, 12298, 0, 0, 160);
               this.CreatePanelSingle(var1, 24576, 5, var10 % 10 + 10, 12298, 0, 32, 160);
            } else {
               this.CreatePanelSingle(var1, 24576, 5, var10 + 10, 12298, 0, 0, 160);
            }
         } else {
            tcbEffect[1] = this.CreatePanelSingle(var1, 24576, 5, 2, 12298, 0, 0, 160);
         }

         this.CreatePanelSingle(var1, 24576, 7, 13, 12298, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 1, 12328, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 7, this.CharAct_Name[iLanguage + 4], 12329, 0, 136, 15);
         this.CreatePanelSingle(var1, 24616, 0, this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 9] + 6, 12338, 0, 16, 11);
         this.CreateValueObjectB(var1, 24616, 98, 16, Level[1] + 1, 2, 14, 100, 12338, 0, 0, 0);
         TCB[] var18 = tcbEffect;
         TCB var7 = this._TaskMake(var1, 39, 24576);
         var18[0] = var7;
         var7._work[0] = 1;
         var7._work[1] = 0;
         var7._work[2] = 12288;
         var7._work[3] = 2;
         var7._work[4] = -256;
         var7._work[5] = -40;
         var7._work[6] = 0;
         TCB[] var15 = tcbEffect;
         var13 = this._TaskMake(var1, 39, 24576);
         var15[2] = var13;
         var13._work[0] = 1;
         var13._work[1] = 0;
         var13._work[2] = 12288;
         var13._work[3] = 1;
         var13._work[4] = -256;
         var13._work[5] = 60;
         var13._work[6] = 0;
         var18 = tcbEffect;
         var7 = this._TaskMake(var1, 39, 24576);
         var18[3] = var7;
         var7._work[0] = 1;
         var7._work[1] = 0;
         var7._work[2] = 12289;
         var7._work[3] = 2;
         var7._work[4] = 255;
         var7._work[5] = -40;
         var7._work[6] = 0;
         var18 = tcbEffect;
         TCB var11 = this._TaskMake(var1, 39, 24576);
         var18[4] = var11;
         var11._work[0] = 1;
         var11._work[1] = 0;
         var11._work[2] = 12289;
         var11._work[3] = 1;
         var11._work[4] = 255;
         var11._work[5] = 60;
         var11._work[6] = 0;
         tcbNow._work[10] = 0;
         tcbNow._work[11] = -32;
         tcbNow.md = 189;
         tcbNow.lp = 0;
         break;
      case 189:
         if (tcbNow._work[11] >= 0) {
            var6 = tcbNow._work;
            var6[11] += 2;
            var16 = tcbEffect[0].obj;
            var16.x -= 131072;
            var16 = tcbEffect[2].obj;
            var16.x += 131072;
            var16 = tcbEffect[3].obj;
            var16.x -= 131072;
            var16 = tcbEffect[4].obj;
            var16.x += 131072;
         }

         if ((tcbEffect[1].obj.wActFlag & 2) != 0) {
            this.GdtBGM(var1, 23);
            tcbEffect[1] = this.CreatePanelSingle(var1, 24576, 0, 89, 12308, 0, 8, 200);
            tcbNow.md = 190;
            tcbNow.lp = 0;
         }
         break;
      case 190:
         var10 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         if ((tcbEffect[1].obj.wActFlag & 2) != 0) {
            if (this.isMission(var1) == 0) {
               this.TextGDTString(var1, 0, iLanguage, iStage + 78, 24576, 12308, 64, 220, 16);
            } else if (!this.CharGDTString(var1, 0, var2, this.CharData_TextPage[iLanguage], PlayerType[var10] + 21, 24576, 12308, 64, 220, 16)) {
               this.CharGDTString(var1, 0, var2, this.CharData_TextPage[iLanguage], 19, 24576, 12308, 64, 220, 16);
            }

            this.CreatePanelSingle(var1, 24576, 0, 272, 12328, 0, 424, 288);
            tcbNow.md = 191;
            tcbNow.lp = 0;
         }
         break;
      case 191:
         this._TLoop(var1, 30, 192);
         break;
      case 192:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 193;
            tcbNow.lp = 0;
         }
         break;
      case 193:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 249;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 194:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 195;
            tcbNow.lp = 0;
         }
         break;
      case 195:
         for(var2 = 1; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         LoadData[3] = PlayerType[iPlayerNo];
         LoadFilter[3] = 251;
         LoadData[1] = 0;
         LoadData[5] = 0;
         this.SetLoad(var1, true);
         iReturnTask = 193;
         tcbNow.md = 1082;
         tcbNow.lp = 0;
         break;
      case 196:
         this.GdtBGM(var1, 0);
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 197;
         tcbNow.lp = 0;
         break;
      case 197:
         var2 = iPlayerNo;
         if (iFade == 255 || iFade == 0) {
            this.GdtBGM(var1, 24);
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 198;
            tcbNow.lp = 0;
            if (WinPoint[var2] >= iStagePoint) {
               tcbNow._work[10] = 0;
            } else {
               tcbNow._work[10] = 1;
            }

            if (this.isMission(var1) == 0 && iPlayMode != 8) {
               tcbNow.md = 198;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 198;
               tcbNow.lp = 0;
            }
         }
         break;
      case 198:
         var4 = iPlayerNo;
         var10 = 1 - iPlayerNo;

         for(var2 = 1; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         LoadData[6] = PlayerType[var4];
         LoadData[7] = PlayerType[var10];
         LoadData[3] = PlayerType[var4];
         LoadData[4] = PlayerType[var10];
         LoadFilter[3] = 251;
         LoadFilter[4] = 251;
         LoadData[5] = 1;
         this.SetLoad(var1, true);
         tcbNow.md = 199;
         tcbNow.lp = 0;
         break;
      case 199:
         var10 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         this.DrawTextClear(var1, 0);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         if (this.isMission(var1) == 0 && iStage > 4 || this.isMission(var1) != 0 || iPlayMode == 8) {
            tcbEffect[1] = this.CreatePanelSingle(var1, 24586, 5, 31, 12298, 0, 0, 160);
         }

         if (tcbNow._work[10] == 0) {
            if (iPlayMode == 8) {
               this.CreateValueObjectB(var1, 24626, 98, 16, Level[var10] + 1, 2, 14, 100, 12339, 0, 0, 0);
               this.CreatePanelSingle(var1, 24576, 6, 14, 12298, 0, 0, 0);
               this.CreatePanelSingle(var1, 24576, 6, this.CharAct_Name[iLanguage + 4], 12329, 0, 136, 15);
               this.CreatePanelSingle(var1, 24576, 0, this.ChrGameData[3].piGameData[this.ChrGameData[3].piGameDataPos[3] + this.ChrGameData[3].piGameDataXSize[3] * 0 + 9] + 6, 12338, 0, 16, 11);
               this.CreatePanelSingle(var1, 24576, 0, 1, 12328, 0, 0, 0);
            } else {
               this.CreatePanelSingle(var1, 24576, 6, 14, 12298, 0, 0, 0);
               this.CreatePanelSingle(var1, 24576, 6, this.CharAct_Name[iLanguage + 4], 12329, 0, 136, 15);
               this.CreatePanelSingle(var1, 24576, 0, this.ChrGameData[iPlayerNo + 3].piGameData[this.ChrGameData[iPlayerNo + 3].piGameDataPos[3] + this.ChrGameData[iPlayerNo + 3].piGameDataXSize[3] * 0 + 9] + 6, 12338, 0, 16, 11);
               this.CreateValueObjectB(var1, 24626, 98, 16, StageBonus[6], 2, 14, 100, 12339, 0, 0, 0);
               this.CreateValueObjectB(var1, 24626, 390, 16, StageBonus[7], 2, 14, 100, 12339, 0, 0, 0);
               this.CreatePanelSingle(var1, 24576, 0, 141, 12338, 0, 415, 16);
               this.CreateValueObjectB(var1, 24626, 426, 16, StageBonus[8], 2, 14, 100, 12339, 0, 0, 0);
               this.CreatePanelSingle(var1, 24576, 0, 2, 12328, 0, 0, 0);
            }
         } else {
            this.CreateValueObjectB(var1, 24626, 98, 16, Level[var2] + 1, 2, 14, 100, 12339, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576, 7, 14, 12298, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576, 7, 0, 12329, 0, 136, 15);
            if (iPlayMode == 8) {
               this.CreatePanelSingle(var1, 24576, 0, this.ChrGameData[4].piGameData[this.ChrGameData[4].piGameDataPos[3] + this.ChrGameData[4].piGameDataXSize[3] * 0 + 9] + 6, 12338, 0, 16, 11);
            } else {
               this.CreatePanelSingle(var1, 24576, 0, this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 9] + 6, 12338, 0, 16, 11);
            }

            this.CreatePanelSingle(var1, 24576, 0, 1, 12328, 0, 0, 0);
         }

         tcbNow.md = 200;
         tcbNow.lp = 0;
         this.CreateWipeInOut(var1, 2);
         break;
      case 200:
         if (iFade == 255 || iFade == 0) {
            if (iPlayMode == 8) {
               this.BTReset(var1, true);
            }

            if (this.isMission(var1) == 0 && iStage > 4 && iPlayMode != 8) {
               if ((tcbEffect[1].obj.wActFlag & 2) != 0) {
                  tcbEffect[1] = this.CreatePanelSingle(var1, 24656, 0, 89, 12308, 0, 8, 200);
                  tcbNow.md = 202;
                  tcbNow.lp = 0;
               }
            } else {
               this._TLoop(var1, 16, 201);
            }
         }
         break;
      case 201:
         tcbEffect[1] = this.CreatePanelSingle(var1, 24656, 0, 89, 12308, 0, 8, 200);
         tcbNow.md = 202;
         tcbNow.lp = 0;
         break;
      case 202:
         var10 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         if ((tcbEffect[1].obj.wActFlag & 2) != 0) {
            if (this.isMission(var1) == 0 && iStage <= 4 && iPlayMode != 8) {
               this.CharGDTString(var1, 0, var10, this.CharData_TextPage[iLanguage], iStage + 2 - 1, 24596, 12309, 64, 220, 16);
            } else if (tcbNow._work[10] == 0) {
               if (iPlayMode == 8) {
                  this.CharGDTString(var1, 0, 0, this.CharData_TextPage[iLanguage], PlayerType[var2] + 101, 24596, 12309, 64, 220, 16);
               } else {
                  this.CharGDTString(var1, 0, var10, this.CharData_TextPage[iLanguage], PlayerType[var2] + 101, 24596, 12309, 64, 220, 16);
               }
            } else if (iPlayMode == 8) {
               this.CharGDTString(var1, 0, 1, this.CharData_TextPage[iLanguage], PlayerType[var10] + 101, 24596, 12309, 64, 220, 16);
            } else {
               this.CharGDTString(var1, 0, var2, this.CharData_TextPage[iLanguage], PlayerType[var10] + 101, 24596, 12309, 64, 220, 16);
            }

            this.CreatePanelSingle(var1, 24596, 0, 272, 12328, 0, 424, 288);
            tcbNow.md = 203;
            tcbNow.lp = 0;
         }
         break;
      case 203:
         this._TLoop(var1, 30, 204);
         break;
      case 204:
         if (TouchesXPos[0] > 0) {
            if (tcbNow._work[10] != 0 || iPlayMode == 8) {
               this.CreateWipeInOut(var1, 1);
            }

            tcbNow.md = 205;
            tcbNow.lp = 0;
         }
         break;
      case 205:
         var2 = iPlayerNo;
         if (iPlayMode == 8) {
            if (iFade == 255 || iFade == 0) {
               if (tcbNow._work[10] == 0) {
                  this._TKilx(var1, 8193, 65535);
                  tcbNow.md = 244;
                  tcbNow.lp = 0;
               } else {
                  this._TKilx(var1, 8193, 65535);
                  tcbNow.md = 786;
                  tcbNow.lp = 0;
               }
            }
         } else if (this.isMission(var1) == 0 && iStage >= iStageMax) {
            if (iFade == 255 || iFade == 0) {
               tcbNow.md = 244;
               tcbNow.lp = 0;
            }
         } else if (tcbNow._work[10] == 0) {
            this._TKilx(var1, 24596, 24596);
            this._TKilx(var1, 24656, 24656);
            this.CreatePanelSingle(var1, 24656, 0, 88, 12308, 0, 8, 200);
            tcbNow.md = 206;
            tcbNow.lp = 0;
         } else if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 402;
            tcbNow.lp = 0;
         }
         break;
      case 206:
         this._TLoop(var1, 10, 212);
         break;
      case 207:
         this._TKilx(var1, 8193, 65535);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 148, 12288 + 1, 0, 0, 0);
         this.TextGDTString(var1, 0, iLanguage, 77, 24576 + 10, 12288 + 5, 144, 128, 16);
         tcbNow.md = 208;
         tcbNow.lp = 0;
         break;
      case 208:
         this._TLoop(var1, 10, 209);
         break;
      case 209:
         if (TouchesXPos[0] > 0) {
            tcbNow.md = 210;
            tcbNow.lp = 0;
         }
         break;
      case 210:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 211;
         tcbNow.lp = 0;
         break;
      case 211:
         if (iFade == 255 || iFade == 0) {
            this.GdtBGM(var1, 0);
            bPause = false;
            tcbNow.md = 244;
            tcbNow.lp = 0;
         }
         break;
      case 212:
         this.AddTicket(var1, 1);
         this.AddScore(var1, iPlayerNo, StageBonus[4]);
         if (this.isMission(var1) != 0) {
            this._FILESave(var1);
         }

         this._TKilx(var1, 24586, 24596);
         if (this.isMission(var1) == 0 && iStage > 4 && iPlayMode != 8) {
            this.CreatePanelSingle(var1, 24586, 5, 32, 12338, 0, 0, 160);
         }

         this.CreatePanelSingle(var1, 24586, 5, 33, 12338, 0, 0, 24);
         tcbNow.md = 213;
         tcbNow.lp = 0;
         break;
      case 213:
         tcbNow._work[10] = 480;
         tcbNow._work[11] = 528;
         tcbNow._work[12] = 576;
         tcbNow._work[13] = 624;
         tcbNow.md = 214;
         tcbNow.lp = 0;
         break;
      case 214:
         for(var2 = 0; var2 < 4; ++var2) {
            var6 = tcbNow._work;
            var10 = var2 + 10;
            var6[var10] -= 24;
            if (tcbNow._work[var2 + 10] <= 0) {
               tcbNow._work[var2 + 10] = 0;
            }
         }

         if (tcbNow._work[13] <= 0) {
            tcbNow.md = 215;
            tcbNow.lp = 0;
         }

         this._TKilx(var1, 24596, 24596);
         this.CreatePanelSingle(var1, 24596, 5, 36, 12338, 0, tcbNow._work[10], 88);
         this.CreateValueObjectB(var1, 24596, tcbNow._work[10] + 170, 95, StageBonus[0], 7, 14, 100, 12288 + 51, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 5, 37, 12338, 0, tcbNow._work[11], 116);
         this.CreateValueObjectB(var1, 24596, tcbNow._work[11] + 170, 123, StageBonus[1], 7, 14, 100, 12288 + 51, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 5, 38, 12338, 0, tcbNow._work[12], 144);
         this.CreateValueObjectB(var1, 24596, tcbNow._work[12] + 103, 151, StageBonus[3], 7, 14, 100, 12288 + 51, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 5, 39, 12338, 0, tcbNow._work[13], 172);
         this.CreateValueObjectB(var1, 24596, tcbNow._work[13] + 170, 179, StageBonus[4], 7, 14, 100, 12288 + 51, 0, 0, 0);
         break;
      case 215:
         this._TLoop(var1, 10, 216);
         break;
      case 216:
         if (TouchesXPos[0] > 0) {
            tcbNow._work[10] = 0;
            tcbNow._work[11] = 48;
            tcbNow._work[12] = 96;
            tcbNow._work[13] = 144;
            tcbNow._work[14] = 480;
            tcbNow.md = 217;
            tcbNow.lp = 0;
         }
         break;
      case 217:
         this._TKilx(var1, 24596, 24606);

         for(var2 = 0; var2 < 4; ++var2) {
            var6 = tcbNow._work;
            var10 = var2 + 10;
            var6[var10] -= 24;
            if (tcbNow._work[var2 + 10] < -480) {
               tcbNow._work[var2 + 10] = -480;
            }

            var4 = tcbNow._work[var2 + 10];
            var10 = var4;
            if (var4 > 0) {
               var10 = 0;
            }

            switch(var2) {
            case 0:
               this.CreatePanelSingle(var1, 24596, 5, 36, 12338, 0, var10, 88);
               this.CreateValueObjectB(var1, 24596, var10 + 170, 95, StageBonus[0], 7, 14, 100, 12339, 0, 0, 0);
               break;
            case 1:
               this.CreatePanelSingle(var1, 24596, 5, 37, 12338, 0, var10, 116);
               this.CreateValueObjectB(var1, 24596, var10 + 170, 123, StageBonus[1], 7, 14, 100, 12339, 0, 0, 0);
               break;
            case 2:
               this.CreatePanelSingle(var1, 24596, 5, 38, 12338, 0, var10, 144);
               this.CreateValueObjectB(var1, 24596, var10 + 103, 151, StageBonus[3], 7, 14, 100, 12339, 0, 0, 0);
               break;
            case 3:
               this.CreatePanelSingle(var1, 24596, 5, 39, 12338, 0, var10, 172);
               this.CreateValueObjectB(var1, 24596, var10 + 170, 179, StageBonus[4], 7, 14, 100, 12339, 0, 0, 0);
            }
         }

         var6 = tcbNow._work;
         var6[14] -= 24;
         if (tcbNow._work[14] < 0) {
            tcbNow._work[14] = 0;
         }

         this.CreatePanelSingle(var1, 24596, 5, 40, 12338, 0, tcbNow._work[14], 88);
         this.CreateValueObjectB(var1, 24606, tcbNow._work[14] + 170, 95, StageBonus[9], 7, 14, 100, 12339, 0, 0, 0);
         if (tcbNow._work[13] <= -480) {
            tcbNow.md = 218;
            tcbNow.lp = 0;
         }
         break;
      case 218:
         this._TLoop(var1, 10, 219);
         break;
      case 219:
         tcbNow._work[10] = StageBonus[6];
         tcbNow._work[11] = StageBonus[7];
         tcbNow._work[12] = StageBonus[8];
         tcbNow._work[13] = StageBonus[9];
         tcbNow.md = 220;
         tcbNow.lp = 0;
         break;
      case 220:
         this._TLoop(var1, 20, 221);
         break;
      case 221:
         this._TKilx(var1, 24606, 24626);
         this.CreateValueObjectB(var1, 24616, 98, 16, tcbNow._work[10], 2, 14, 100, 12339, 0, 0, 0);
         this.CreateValueObjectB(var1, 24626, 390, 16, tcbNow._work[11], 2, 14, 100, 12339, 0, 0, 0);
         this.CreateValueObjectB(var1, 24626, 426, 16, tcbNow._work[12], 2, 14, 100, 12339, 0, 0, 0);
         this.CreateValueObjectB(var1, 24606, 170, 95, tcbNow._work[13], 7, 14, 100, 12339, 0, 0, 0);
         if (tcbNow._work[11] >= tcbNow._work[12]) {
            if (tcbNow._work[10] < 98) {
               var6 = tcbNow._work;
               var10002 = var6[10]++;
               this._TKilx(var1, 24616, 24616);
               this.CreateValueObjectB(var1, 24616, 98, 16, tcbNow._work[10], 2, 14, 100, 12339, 0, 0, 0);
               tcbNow.md = 232;
               tcbNow.lp = 0;
               this.GdtBGM(var1, 26);
            } else {
               tcbNow.md = 222;
               tcbNow.lp = 0;
            }
         } else if (tcbNow._work[13] <= 0) {
            tcbNow.md = 222;
            tcbNow.lp = 0;
         } else {
            var8 = tcbNow._work;
            var10002 = var8[11]++;
            var8 = tcbNow._work;
            var10002 = var8[13]--;
         }
         break;
      case 222:
         this._TLoop(var1, 20, 223);
         break;
      case 223:
         this._TKilx(var1, 24656, 24656);
         tcbNow._work[14] = 480;
         tcbNow.md = 224;
         tcbNow.lp = 0;
         break;
      case 224:
         var2 = this.GetGDTAddTicket(var1, iDifficulty, false);
         var6 = tcbNow._work;
         var6[14] -= 24;
         if (tcbNow._work[14] < 0) {
            tcbNow._work[14] = 0;
            tcbNow.md = 225;
            tcbNow.lp = 0;
         }

         this._TKilx(var1, 24615, 24615);
         this.CreatePanelSingle(var1, 24615, 5, 29, 12338, 0, tcbNow._work[14], 116);
         this.CreateValueObjectB(var1, 24615, tcbNow._work[14] + 165, 123, var2, 7, 14, 100, 12339, 0, 0, 0);
         break;
      case 225:
         this._TLoop(var1, 30, 226);
         break;
      case 226:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            tcbNow.md = 227;
            tcbNow.lp = 0;
         }
         break;
      case 227:
         this._TKilx(var1, 24656, 24656);
         tcbNow._work[14] = 0;
         this._TKilx(var1, 24586, 24586);
         this.CreatePanelSingle(var1, 24586, 5, 34, 12338, 0, 0, 24);
         tcbNow.md = 228;
         tcbNow.lp = 0;
         break;
      case 228:
         var2 = this.GetGDTAddTicket(var1, iDifficulty, false);
         var6 = tcbNow._work;
         var6[14] -= 24;
         if (tcbNow._work[14] < -480) {
            tcbNow._work[14] = -480;
         }

         this._TKilx(var1, 24596, 24615);
         this.CreatePanelSingle(var1, 24596, 5, 40, 12338, 0, tcbNow._work[14], 88);
         this.CreateValueObjectB(var1, 24606, tcbNow._work[14] + 170, 95, 0, 7, 14, 100, 12339, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 5, 40, 12338, 0, tcbNow._work[14] + 24, 116);
         this.CreateValueObjectB(var1, 24606, tcbNow._work[14] + 165 + 24, 123, var2, 7, 14, 100, 12339, 0, 0, 0);
         if (tcbNow._work[14] <= -480) {
            this.AddTicket(var1, var2);
            tcbNow.md = 229;
            tcbNow.lp = 0;
         }
         break;
      case 229:
         var2 = iPlayerNo;
         if (iStage >= iStageMax) {
            tcbNow.md = 238;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 230;
            tcbNow.lp = 0;
         }
         break;
      case 230:
         tcbNow.md = 231;
         tcbNow.lp = 0;
         this.CreateWipeInOut(var1, 1);
         break;
      case 231:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 24576, 24576 + 80);
            tcbNow.md = 244;
            tcbNow.lp = 0;
         }
         break;
      case 232:
         tcbNow._work[11] = 0;
         var6 = tcbNow._work;
         if (tcbNow._work[10] - 1 == 98) {
            var20 = 0;
         } else {
            var20 = this.pGameData.piGameData[this.pGameData.piGameDataPos[43] + (tcbNow._work[10] - 1) / 5 * this.pGameData.piGameDataXSize[43] + 0];
         }

         var6[12] = var20;
         tcbNow._work[14] = 1;
         this.CreatePanelSingle(var1, 24636, 5, 42, 12338, 0, 0, 116);
         this._TKilx(var1, 24656, 24656);
         this.CreatePanelSingle(var1, 24656, 0, 89, 12308, 0, 8, 200);
         tcbNow.md = 233;
         tcbNow.lp = 0;
         break;
      case 233:
         var10 = 220;
         var20 = this.ChrGameData[iPlayerNo + 3].piGameData[this.ChrGameData[iPlayerNo + 3].piGameDataPos[7] + (tcbNow._work[10] - 1) * this.ChrGameData[iPlayerNo + 3].piGameDataXSize[7] + 1];
         if (var20 != 0) {
            this.DrawText(var1, 0, 24646, 12348, this.GetString(var1, 1, 0, 298) + var20 * 1000 + this.GetString(var1, 1, 0, 302), 32, 220, 16, 255, 255, 255, 255);
            var10 = 220 + 18;
         }

         short var14 = this.ChrGameData[iPlayerNo + 3].piGameData[this.ChrGameData[iPlayerNo + 3].piGameDataPos[7] + (tcbNow._work[10] - 1) * this.ChrGameData[iPlayerNo + 3].piGameDataXSize[7] + 3];
         var2 = var10;
         if (var14 != 0) {
            this.DrawText(var1, 0, 24646, 12348, this.GetString(var1, 1, 0, 299) + var14 * 1000 + this.GetString(var1, 1, 0, 302), 32, var10, 16, 255, 255, 255, 255);
            var2 = var10 + 18;
         }

         var14 = this.ChrGameData[iPlayerNo + 3].piGameData[this.ChrGameData[iPlayerNo + 3].piGameDataPos[7] + (tcbNow._work[10] - 1) * this.ChrGameData[iPlayerNo + 3].piGameDataXSize[7] + 2];
         var10 = var2;
         if (var14 != 0) {
            this.DrawText(var1, 0, 24646, 12348, this.GetString(var1, 1, 0, 300) + var14 + this.GetString(var1, 1, 0, 302), 32, var2, 16, 255, 255, 255, 255);
            var10 = var2 + 18;
         }

         var20 = this.ChrGameData[iPlayerNo + 3].piGameData[this.ChrGameData[iPlayerNo + 3].piGameDataPos[7] + (tcbNow._work[10] - 1) * this.ChrGameData[iPlayerNo + 3].piGameDataXSize[7] + 21];
         if (var20 != 0) {
            this.DrawText(var1, 0, 24646, 12348, this.GetString(var1, 1, 0, 301) + var20 + this.GetString(var1, 1, 0, 302), 32, var10, 16, 255, 255, 255, 255);
         }

         tcbNow.md = 234;
         tcbNow.lp = 0;
         break;
      case 234:
         this._TLoop(var1, 10, 235);
         break;
      case 235:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            this._TKilx(var1, 24636, 24646);
            this._TKilx(var1, 24656, 24656);
            this.CreatePanelSingle(var1, 24656, 0, 88, 12308, 0, 8, 200);
            tcbNow.md = 236;
            tcbNow.lp = 0;
         }
         break;
      case 236:
         this._TLoop(var1, 10, 237);
         break;
      case 237:
         this._TKilx(var1, 24656, 24656);
         tcbNow.md = 221;
         tcbNow.lp = 0;
         break;
      case 238:
         this._TKilx(var1, 24586, 24606);
         this._TKilx(var1, 24656, 24656);
         this.CreatePanelSingle(var1, 24586, 5, 45, 12338, 0, 0, 24);
         tcbNow.md = 239;
         tcbNow.lp = 0;
         break;
      case 239:
         tcbNow._work[10] = 480;
         tcbNow._work[11] = 528;
         tcbNow._work[12] = 576;
         tcbNow._work[13] = 624;
         tcbNow._work[14] = 672;
         tcbNow._work[15] = 720;
         tcbNow.md = 240;
         tcbNow.lp = 0;
         break;
      case 240:
         for(var2 = 0; var2 < 6; ++var2) {
            var6 = tcbNow._work;
            var10 = var2 + 10;
            var6[var10] -= 24;
            if (tcbNow._work[var2 + 10] <= 0) {
               tcbNow._work[var2 + 10] = 0;
            }
         }

         if (tcbNow._work[15] <= 0) {
            tcbNow.md = 241;
            tcbNow.lp = 0;
         }

         this._TKilx(var1, 24596, 24596);
         this.CreatePanelSingle(var1, 24596, 5, iDifficulty + 47, 12338, 0, tcbNow._work[10], 88);
         this.CreatePanelSingle(var1, 24596, 5, 50, 12338, 0, tcbNow._work[11], 116);
         this.CreateValueObjectB(var1, 24596, tcbNow._work[11] + 170, 123, Score[iPlayerNo], 7, 14, 100, 12288 + 51, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 5, 52, 12338, 0, tcbNow._work[12], 144);
         this.CreateValueObjectB(var1, 24596, tcbNow._work[12] + 223, 151, iStage, 2, 14, 100, 12288 + 51, 0, 0, 0);
         var10 = ClearTime / 60;
         var2 = ClearTime;
         this.CreatePanelSingle(var1, 24596, 5, 54, 12338, 0, tcbNow._work[13], 172);
         this.CreateValueObjectB(var1, 24596, tcbNow._work[13] + 195 - 16, 179, var10, 2, 14, 100, 12288 + 51, 0, 0, 0);
         this.CreateValueObjectB(var1, 24596, tcbNow._work[13] + 251 - 16, 179, var2 % 60, 2, 14, 100, 12288 + 51, 0, 0, 0);
         var2 = ClearTime / iStage / 60;
         var10 = ClearTime / iStage;
         this.CreatePanelSingle(var1, 24596, 5, 55, 12338, 0, tcbNow._work[14], 200);
         this.CreateValueObjectB(var1, 24596, tcbNow._work[14] + 195 - 16, 207, var2, 2, 14, 100, 12288 + 51, 0, 0, 0);
         this.CreateValueObjectB(var1, 24596, tcbNow._work[14] + 251 - 16, 207, var10 % 60, 2, 14, 100, 12288 + 51, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 5, StageLose + 57, 12338, 0, tcbNow._work[15], 228);
         break;
      case 241:
         this._TLoop(var1, 20, 242);
         break;
      case 242:
         if (TouchesXPos[0] > 0) {
            tcbNow.md = 243;
            tcbNow.lp = 0;
            this.CreateWipeInOut(var1, 1);
         }
         break;
      case 243:
         var2 = iPlayerNo;
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 24576, 24576 + 80);
            tcbNow.md = 244;
            tcbNow.lp = 0;
         }
         break;
      case 244:
         var10 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         iGetCardNo = 0;
         if (iStage >= iStageMax) {
            if (this.isMission(var1) == 0) {
               iGetCardNo = (short)(this.ChrGameData[var10 + 3].piGameData[this.ChrGameData[var10 + 3].piGameDataPos[38] + this.ChrGameData[var10 + 3].piGameDataXSize[38] * 0 + 0 + 1] << 8 & '\uff00' | this.ChrGameData[var10 + 3].piGameData[this.ChrGameData[var10 + 3].piGameDataPos[38] + this.ChrGameData[var10 + 3].piGameDataXSize[38] * 0 + 0]);
            } else {
               iGetCardNo = (short)(this.ChrGameData[var10 + 3].piGameData[this.ChrGameData[var10 + 3].piGameDataPos[38] + this.ChrGameData[var10 + 3].piGameDataXSize[38] * 0 + 0 + 1] << 8 & '\uff00' | this.ChrGameData[var10 + 3].piGameData[this.ChrGameData[var10 + 3].piGameDataPos[38] + this.ChrGameData[var10 + 3].piGameDataXSize[38] * 0 + 0]);
            }
         }

         bGetBall = false;
         if (this.isMission(var1) == 0 && iPlayMode != 8) {
            bGetBall = this.CheckBall(var1, PlayerType[var10], PlayerType[var2], iDifficulty, Score[var10], MaxComboCountSave[var10], StageLose, TotalTime, iStage, iPlayMode, StageWin, false);
         } else if (iStage >= iStageMax || iPlayMode == 8) {
            bGetBall = this.CheckBall(var1, PlayerType[var10], PlayerType[var2], iDifficulty, Score[var10], MaxComboCountSave[var10], StageLose, ClearTime, iStage, iPlayMode, StageWin, true);
         }

         tcbNow._work[10] = 0;
         if (bGetBall) {
            tcbNow._work[10] = 1;
         }

         if (!bGetBall && iGetCardNo == 0) {
            if (this.isMission(var1) == 0 && iPlayMode != 8) {
               tcbNow.md = 300;
               tcbNow.lp = 0;
            } else if (iPlayMode == 8) {
               this._TKilx(var1, 8193, 65535);
               tcbNow.md = 786;
               tcbNow.lp = 0;
            } else if (iStage >= iStageMax) {
               tcbNow.md = 411;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 185;
               tcbNow.lp = 0;
            }
         } else {
            tcbNow.md = 313;
            tcbNow.lp = 0;
         }
         break;
      case 245:
         this._TKilx(var1, 24576, 24576 + 40);

         for(var2 = 1; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         LoadData[4] = PlayerType[1];
         this.SetLoad(var1, true);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 146, 12288 + 1, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 38, 12288 + 41, 0, 392, 280);
         tcbNow._work[10] = PracticeSetting[0];
         tcbNow._work[11] = PracticeSetting[1];
         tcbNow._work[12] = PracticeSetting[4];
         if (PracticeSetting[2] == 0) {
            tcbNow._work[13] = PracticeSetting[3] + 3;
         } else {
            tcbNow._work[13] = PracticeSetting[2] - 1;
         }

         tcbNow._work[14] = 1;
         tcbNow.md = 246;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 246:
         var4 = 40;
         boolean var19;
         if (this.ChrGameData[4].piGameData[this.ChrGameData[4].piGameDataPos[3] + this.ChrGameData[4].piGameDataXSize[3] * 0 + 6] == 0) {
            var19 = false;
         } else {
            var19 = true;
         }

         if (this.CheckDownBtn(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 248;
            tcbNow.lp = 0;
         } else if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 248;
            tcbNow.lp = 0;
         } else {
            short var12 = 480;

            label769:
            for(var10 = 0; var10 < 5; ++var10) {
               if (var10 == 4) {
                  var12 = 240;
               }

               if (TouchesXPos[0] > 0 && TouchesXPos[0] < var12 && TouchesYPos[0] > var4 && TouchesYPos[0] < var4 + 56 && TouchesStatus[0] != 0) {
                  iReqSENo = 16;
                  this.PushSE(var1, 16);
                  tcbNow._work[14] = 1;
                  switch(var10) {
                  case 0:
                     var6 = tcbNow._work;
                     var10002 = var6[13]++;
                     if (tcbNow._work[13] > 10) {
                        tcbNow._work[13] = 0;
                     }

                     if (tcbNow._work[13] == 1 && !var19) {
                        var6 = tcbNow._work;
                        var10002 = var6[13]++;
                     }
                     break label769;
                  case 1:
                     var6 = tcbNow._work;
                     var6[12] ^= 1;
                     break label769;
                  case 2:
                     var6 = tcbNow._work;
                     var6[10] ^= 1;
                     break label769;
                  case 3:
                     var6 = tcbNow._work;
                     var6[11] ^= 1;
                     break label769;
                  case 4:
                     this.CreateWipeInOut(var1, 1);
                     tcbNow.md = 247;
                     tcbNow.lp = 0;
                  default:
                     break label769;
                  }
               }

               var4 += 56;
            }

            if (tcbNow._work[14] != 0) {
               tcbNow._work[14] = 0;
               this._TKilx(var1, 24576 + 1, 24576 + 1);
               this.CreatePanelSingle(var1, 24576 + 1, 0, tcbNow._work[13] + 200, 12288 + 1, 0, 8, 40);
               if (tcbNow._work[13] < 3) {
                  this.CreatePanelSingle(var1, 24576 + 1, 0, 212 - tcbNow._work[12], 12288 + 1, 0, 8, 96);
               } else {
                  this.CreatePanelSingle(var1, 24576 + 1, 0, 285 - tcbNow._work[12], 12288 + 1, 0, 8, 96);
               }

               this.CreatePanelSingle(var1, 24576 + 1, 0, 215 - tcbNow._work[10], 12288 + 1, 0, 8, 152);
               this.CreatePanelSingle(var1, 24576 + 1, 0, 217 - tcbNow._work[11], 12288 + 1, 0, 8, 208);
               this.CreatePanelSingle(var1, 24576 + 1, 0, 218, 12288 + 1, 0, 8, 264);
            }
         }
         break;
      case 247:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 24576, 24576 + 40);
            iChrSelectPlayer = 1;
            tcbNow.md = 1007;
            tcbNow.lp = 0;
         }
         break;
      case 248:
         if (iFade == 255 || iFade == 0) {
            PracticeSetting[0] = tcbNow._work[10];
            PracticeSetting[1] = tcbNow._work[11];
            PracticeSetting[4] = tcbNow._work[12];
            if (tcbNow._work[13] >= 3) {
               PracticeSetting[2] = 0;
               PracticeSetting[3] = tcbNow._work[13] - 3;
            } else {
               PracticeSetting[2] = tcbNow._work[13] + 1;
               PracticeSetting[3] = 0;
            }

            iStage = 0;
            this._TKilx(var1, 8193, 65535);
            iJoyWorkCount = 0;
            iJoyBufCount = 0;
            iPlayerNo = 0;
            Score[0] = 0;
            Score[1] = 0;
            iEventStatus = 0;
            iBTReadDataBufIndex = 0;
            iBTReadDataIndex = 0;
            this.controller.Init();

            for(var2 = 0; var2 < 10; ++var2) {
               this.padID[var2] = -1;
            }

            iRound = 0;
            WinPoint[0] = 0;
            WinPoint[1] = 0;
            iBackMode = 0;
            PlayerAttack[0] = 0;
            PlayerAttack[1] = 0;
            PlayerKey[0] = 0;
            PlayerKey[1] = 0;
            _cameraPrio = 0;
            iCameraLock = -1;
            tcbNow.md = 712;
            tcbNow.lp = 0;
         }
         break;
      case 249:
         var10 = iPlayerNo;
         var4 = 1 - iPlayerNo;
         this._TKilx(var1, 8193, 65535);
         LoadData[5] = 1;

         for(var2 = 0; var2 < 8; ++var2) {
            LoadData[var2 + 6] = -1;
            LoadData[var2 + 14] = -1;
            if (PlayerCardCount[0] > var2) {
               LoadData[var2 + 6] = PlayerCard[0][var2] + 255;
            }

            if (PlayerCardCount[1] > var2) {
               LoadData[var2 + 14] = PlayerCard[1][var2] + 255;
            }
         }

         LoadData[var10 + 22] = PlayerType[var10];
         LoadData[var4 + 22] = PlayerType[var4];
         LoadData[3] = PlayerType[var10];
         LoadFilter[3] = 251;
         LoadData[4] = PlayerType[var4];
         LoadFilter[4] = 251;
         this.SetLoad(var1, true);
         tcbNow.md = 250;
         tcbNow.lp = 0;
         break;
      case 250:
         var2 = iPlayerNo;
         var10 = iPlayerNo;
         this.GdtBGM(var1, 18);
         if (var2 == 0) {
         }

         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24606, 5, 92, 12348, 0, 0, 0);

         for(var2 = 0; var2 < 8; ++var2) {
            tcbEffect[var2] = null;
            tcbEffect[var2 + 8] = null;
            if (PlayerCardCount[0] > var2) {
               tcbEffect[var2] = this.CreatePanelSingle(var1, 24586, var2 + 6, PlayerCardLevel[0][var2] + 44, 12298, 0, 0 - var2 * 106, 82);
            }

            if (PlayerCardCount[1] > var2) {
               tcbEffect[var2 + 8] = this.CreatePanelSingle(var1, 24586, var2 + 14, PlayerCardLevel[1][var2] + 44, 12298, 0, var2 * 106 + 480, 242);
            }
         }

         tcbEffect[16] = this.CreatePanelSingle(var1, 24596, 22, 15, 12298, 0, -1212, 320);
         tcbEffect[17] = this.CreatePanelSingle(var1, 24596, 23, 16, 12298, 0, 1696, 320);
         tcbNow._work[0] = 0;
         tcbNow.md = 251;
         tcbNow.lp = 0;
         break;
      case 251:
         for(var2 = 0; var2 < 8; ++var2) {
            if (tcbEffect[var2] != null) {
               var16 = tcbEffect[var2].obj;
               var16.x += 786432;
            }

            if (tcbEffect[var2 + 8] != null) {
               var16 = tcbEffect[var2 + 8].obj;
               var16.x -= 786432;
            }
         }

         var16 = tcbEffect[16].obj;
         var16.x += 786432;
         var16 = tcbEffect[17].obj;
         var16.x -= 786432;
         var6 = tcbNow._work;
         var10002 = var6[0]++;
         if (tcbNow._work[0] > 112) {
            tcbNow._work[0] = 480;
            this._TKilx(var1, 24586, 24586);
            tcbNow.md = 252;
            tcbNow.lp = 0;
         }
         break;
      case 252:
         var2 = iPlayerNo;
         var10 = iPlayerNo;
         var10 = tcbNow._work[0];
         var6 = tcbNow._work;
         var6[0] -= 48;
         if (var10 <= 0) {
            this._TKilx(var1, 24606, 24606);
            this.CreatePanelSingle(var1, 24606, 5, 93, 12348, 0, 0, 0);
            tcbNow.md = 253;
            tcbNow.lp = 0;
         }

         this._TKilx(var1, 24616, 24616);
         if (var2 == 0) {
         }

         if (var2 == 1) {
         }
         break;
      case 253:
         var2 = iPlayerNo;
         var10 = iPlayerNo;
         var10 = tcbNow._work[0];
         if (var2 == 0) {
         }

         for(var2 = 0; var2 < 8; ++var2) {
            tcbEffect[var2] = null;
            tcbEffect[var2 + 8] = null;
            if (PlayerCardCount[0] > var2) {
               var10 = PlayerCardLevel[0][var2];
               tcbEffect[var2] = this.CreatePanelSingle(var1, 24586, var2 + 6, var10 + 88, 12298, 0, var2 * 52 + 517, 41);
            }

            if (PlayerCardCount[1] > var2) {
               var10 = PlayerCardLevel[1][var2];
               tcbEffect[var2 + 8] = this.CreatePanelSingle(var1, 24586, var2 + 14, var10 + 88, 12298, 0, -38 - var2 * 52, 280);
            }
         }

         tcbNow._work[0] = 0;
         tcbNow.md = 254;
         tcbNow.lp = 0;
         break;
      case 254:
         for(var2 = 0; var2 < 8; ++var2) {
            ObjReq var9;
            if (tcbEffect[var2] != null) {
               var9 = tcbEffect[var2].obj;
               var9.x -= 786432;
            }

            if (tcbEffect[var2 + 8] != null) {
               var9 = tcbEffect[var2 + 8].obj;
               var9.x += 786432;
            }
         }

         var8 = tcbNow._work;
         var10002 = var8[0]++;
         if (tcbNow._work[0] >= 40) {
            tcbNow.md = 255;
            tcbNow.lp = 0;
         }
         break;
      case 255:
         if (iPlayMode == 8) {
            this._TLoop(var1, 180, 256);
         } else {
            this._TLoop(var1, 180, 256);
         }
         break;
      case 256:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 257;
         tcbNow.lp = 0;
         break;
      case 257:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 712;
            tcbNow.lp = 0;
         }
         break;
      case 258:
         this._TKilx(var1, 24576, 24576 + 40);

         for(var2 = 1; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         this.SetLoad(var1, true);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 146, 12288 + 1, 0, 0, 0);
         tcbNow.md = 259;
         tcbNow.lp = 0;
         break;
      case 260:
         this._FILELoad(var1);
         this._TKilx(var1, 8193, 65535);
         iBackKeyType = 0;
         iControlType[0] = iControlType[2];
         iMissionClear = ConfigData[12527];

         for(var2 = 1; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         LoadData[1] = 0;
         this.SetLoad(var1, true);
         iPlayMode = 6;
         this.CharVisibleInit(var1);
         tcbNow._work[11] = 0;
         iSmapReturnCur = 0;
         this.GdtBGM(var1, 2);
         tcbNow.md = 261;
         tcbNow.lp = 0;
         iNewsEnd = 1;
         break;
      case 261:
         iFade = 0;
         this._TKilx(var1, 24576, 24578);
         var13 = this._TaskMake(var1, 39, 24576);
         var13._work[0] = 1;
         var13._work[1] = 0;
         var13._work[2] = 12288;
         var13._work[3] = 3;
         var13._work[4] = 0;
         var13._work[5] = 0;
         var13._work[6] = 0;
         this.CreatePanelSingle(var1, 24576, 1, 2, 12293, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 1, 7, 12293, 0, 16, 224);
         this.CreatePanelSingle(var1, 24576, 1, 6, 12293, 0, 0, 0);
         tcbEffect[0] = this.CreatePanelSingle(var1, 24577, 1, 8, 12289, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 291, 24576, 12318, 400, 300, 12);
         this.controller.Init();

         for(var2 = 0; var2 < 10; ++var2) {
            this.padID[var2] = -1;
         }

         iControlType[0] = ConfigData[4];
         tcbNow._work[10] = 0;
         tcbNow._work[12] = 0;
         tcbNow.md = 262;
         tcbNow.lp = 0;
         break;
      case 262:
         if ((tcbNow._work[10] & 1) == 0 && tcbNow._work[12] <= 5) {
            var2 = tcbNow._work[12];
            var6 = tcbNow._work;
            var10002 = var6[12]++;
            if (this.isMission(var1) != 0) {
               tcbEffect[0] = this.CreatePanelSingle(var1, var2 + 24578, 1, (var2 << 2) + 20, 12291, 0, 480, var2 * 40 + 40);
            } else {
               switch(var2) {
               case 0:
                  this.CreatePanelSingle(var1, var2 + 24578, 1, 20, 12291, 0, 480, var2 * 40 + 120);
                  break;
               case 1:
                  this.CreatePanelSingle(var1, var2 + 24578, 1, 24, 12291, 0, 480, var2 * 40 + 120);
                  break;
               case 2:
                  tcbEffect[0] = this.CreatePanelSingle(var1, var2 + 24578, 1, 40, 12291, 0, 480, var2 * 40 + 120);
                  tcbNow._work[12] = 6;
               }
            }
         }

         var8 = tcbNow._work;
         var10002 = var8[10]++;
         if (tcbNow._work[12] > 5) {
            tcbNow.md = 263;
            tcbNow.lp = 0;
         }
         break;
      case 263:
         if ((tcbEffect[0].obj.wActFlag & 2) != 0) {
            this._TKilx(var1, 24577, 24586);
            this.CreatePanelSingle(var1, 24577, 1, 9, 12289, 0, 0, 0);
            if (this.isMission(var1) != 0) {
               for(var2 = 0; var2 < 6; ++var2) {
                  this.CreatePanelSingle(var1, var2 + 24578, 1, (var2 << 2) + 21, 12291, 0, 240, var2 * 40 + 40);
               }
            } else {
               this.CreatePanelSingle(var1, 24578, 1, 21, 12291, 0, 240, 120);
               this.CreatePanelSingle(var1, 24579, 1, 25, 12291, 0, 240, 160);
               this.CreatePanelSingle(var1, 24580, 1, 41, 12291, 0, 240, 200);
            }

            tcbNow.md = 264;
            tcbNow.lp = 0;
            tcbNow._work[10] = -1;
         }
         break;
      case 264:
         byte var5 = 0;
         var2 = tcbNow._work[10];
         var10 = 40;
         if (this.CheckBack(var1, 10000, 10000, TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow._work[15] = 264;
            tcbNow.md = 285;
            tcbNow.lp = 0;
         } else {
            if (this.isMission(var1) != 0) {
               var2 = 0;

               while(true) {
                  var4 = var5;
                  if (var2 >= 6) {
                     break;
                  }

                  if (TouchesXPos[0] > 240 && TouchesXPos[0] < 480 && TouchesYPos[0] > var10 && TouchesYPos[0] < var10 + 40 && TouchesStatus[0] != 0) {
                     var4 = var2;
                     iReqSENo = 0;
                     this.PushSE(var1, 0);
                     tcbNow._work[10] = var2;
                     tcbNow._work[11] = tcbNow._work[10];
                     tcbNow._work[10] = 0;
                     tcbNow._work[12] = 0;
                     tcbNow.md = 265;
                     tcbNow.lp = 0;
                     break;
                  }

                  var10 += 40;
                  ++var2;
               }
            } else {
               var2 = 120;
               var10 = 0;

               while(true) {
                  var4 = var5;
                  if (var10 >= 3) {
                     break;
                  }

                  if (TouchesXPos[0] > 240 && TouchesXPos[0] < 480 && TouchesYPos[0] > var2 && TouchesYPos[0] < var2 + 40 && TouchesStatus[0] != 0) {
                     iReqSENo = 0;
                     this.PushSE(var1, 0);
                     byte var17 = 0;
                     switch(var10) {
                     case 0:
                        var17 = 0;
                        break;
                     case 1:
                        var17 = 1;
                        break;
                     case 2:
                        var17 = 5;
                     }

                     tcbNow._work[10] = var17;
                     tcbNow._work[11] = tcbNow._work[10];
                     tcbNow._work[10] = 0;
                     tcbNow._work[12] = 0;
                     tcbNow.md = 265;
                     tcbNow.lp = 0;
                     var4 = var10;
                     break;
                  }

                  var2 += 40;
                  ++var10;
               }
            }

            if (tcbNow._work[10] < 0 && TouchesXPos[0] > 0 && TouchesXPos[0] < 48 && TouchesYPos[0] > 240 && TouchesYPos[0] < 320 && TouchesStatus[0] != 0) {
               iReqSENo = 0;
               this.PushSE(var1, 0);
               tcbNow._work[11] = 6;
               tcbNow._work[12] = 0;
               tcbNow.md = 269;
               tcbNow.lp = 0;
            } else if (tcbNow._work[10] >= 0) {
               this._TKilx(var1, 24596, 24596);
               if (this.isMission(var1) != 0) {
                  tcbEffect[0] = this.CreatePanelSingle(var1, 24596, 1, (tcbNow._work[11] << 2) + 22, 12292, 0, 240, var4 * 40 + 40);
               } else {
                  tcbEffect[0] = this.CreatePanelSingle(var1, 24596, 1, (tcbNow._work[11] << 2) + 22, 12292, 0, 240, var4 * 40 + 120);
               }
            }
         }
         break;
      case 265:
         if ((tcbEffect[0].obj.wActFlag & 2) != 0) {
            this._TKilx(var1, 24596, 24596);
            tcbNow.md = 266;
            tcbNow.lp = 0;
         }
         break;
      case 266:
         this._TKilx(var1, 24596, 24596);
         tcbNow.md = 267;
         tcbNow.lp = 0;
         break;
      case 267:
         if ((tcbNow._work[10] & 1) == 0) {
            var2 = tcbNow._work[12];
            var6 = tcbNow._work;
            var10002 = var6[12]++;
            this._TKilx(var1, var2 + 24578, var2 + 24578);
            if (this.isMission(var1) != 0) {
               tcbEffect[0] = this.CreatePanelSingle(var1, var2 + 24578, 1, (var2 << 2) + 23, 12291, 0, 240, var2 * 40 + 40);
            } else {
               switch(var2) {
               case 0:
                  this.CreatePanelSingle(var1, var2 + 24578, 1, 23, 12291, 0, 240, var2 * 40 + 120);
                  break;
               case 1:
                  this.CreatePanelSingle(var1, var2 + 24578, 1, 27, 12291, 0, 240, var2 * 40 + 120);
                  break;
               case 2:
                  tcbEffect[0] = this.CreatePanelSingle(var1, var2 + 24578, 1, 43, 12291, 0, 240, var2 * 40 + 120);
                  tcbNow._work[12] = 6;
               }
            }
         }

         var8 = tcbNow._work;
         var10002 = var8[10]++;
         if (tcbNow._work[12] > 5) {
            tcbNow.md = 268;
            tcbNow.lp = 0;
         }
         break;
      case 268:
         if ((tcbEffect[0].obj.wActFlag & 2) != 0) {
            tcbNow.md = 269;
            tcbNow.lp = 0;
         }
         break;
      case 269:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 270;
         tcbNow.lp = 0;
         break;
      case 270:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576, 0, 296, 12288 + 2, 0, 0, 0);
            switch(tcbNow._work[11]) {
            case 0:
               this.TextGDTString(var1, 0, iLanguage, 3, 24576, 12288 + 10, 48, 104, 16);
               break;
            case 1:
               this.TextGDTString(var1, 0, iLanguage, 4, 24576, 12288 + 10, 48, 104, 16);
               break;
            case 2:
               this.TextGDTString(var1, 0, iLanguage, 6, 24576, 12288 + 10, 48, 104, 16);
               break;
            case 3:
               this.TextGDTString(var1, 0, iLanguage, 5, 24576, 12288 + 10, 48, 104, 16);
               break;
            case 4:
               this.TextGDTString(var1, 0, iLanguage, 7, 24576, 12288 + 10, 48, 104, 16);
               break;
            case 5:
               this.TextGDTString(var1, 0, iLanguage, 8, 24576, 12288 + 10, 48, 104, 16);
               break;
            case 6:
               this.TextGDTString(var1, 0, iLanguage, 311, 24576, 12288 + 10, 48, 104, 16);
            }

            this.CreateWipeInOut(var1, 0);
            tcbNow.md = 271;
            tcbNow.lp = 0;
         }
         break;
      case 271:
         if ((iFade == 255 || iFade == 0) && TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 272;
            tcbNow.lp = 0;
         }
         break;
      case 272:
         if (iFade == 255 || iFade == 0) {
            for(var2 = 0; var2 < 7; ++var2) {
               BallGetCount[var2] = 0;
            }

            iGetCardNo = 0;
            iCardPreviewMode = 0;
            iJoyWorkCount = 0;
            iJoyBufCount = 0;
            iPlayerNo = 0;
            iCardPreviewMode = 0;
            iDifficulty = 0;
            Score[0] = 0;
            Score[1] = 0;
            iEventStatus = 0;
            iMissionJoyFillter = 0;
            iBTReadDataBufIndex = 0;
            iBTReadDataIndex = 0;
            MaxComboCountSave[0] = 0;
            MaxComboCountSave[1] = 0;
            this.controller.Init();

            for(var2 = 0; var2 < 10; ++var2) {
               this.padID[var2] = -1;
            }

            iSmapReturnCur = tcbNow._work[11];
            if (this.isMission(var1) != 0) {
               this.CardPutClear(var1);
            }

            this.InitCharAttr(var1);
            bTicketChange = false;
            switch(tcbNow._work[11]) {
            case 0:
               iPlayMode = 0;
               iStage = 0;
               iStageCPU = 0;
               ClearTime = 0;
               StageLose = 0;

               for(var2 = 0; var2 < 6; ++var2) {
                  PracticeSetting[var2] = 0;
               }

               this._TKilx(var1, 8193, 65535);
               iStagePoint = 2;
               if (this.isMission(var1) == 0) {
                  this.MissionLoad(var1);
                  tcbNow.md = 284;
                  tcbNow.lp = 0;
                  iDifficulty = 0;
                  iChrSelectMode = 0;
               } else {
                  tcbNow.md = 384;
                  tcbNow.lp = 0;
               }

               this.Game(var1, tcbNow.md);
               break;
            case 1:
               iControlType[1] = iControlType[0];
               bBTSend = false;
               iBTSkipCount = 0;

               for(var2 = 0; var2 < 6; ++var2) {
                  PracticeSetting[var2] = 0;
               }

               iStage = 0;
               iStagePoint = 2;
               iDifficulty = 4;
               iPlayMode = 8;
               iBluetoothMode = 0;
               this.CharVisibleInit(var1);
               tcbNow.md = 760;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
               break;
            case 2:
               iPlayMode = 7;
               iBluetoothMode = 1;
               this._TKilx(var1, 8193, 65535);
               tcbNow.md = 418;
               tcbNow.lp = 0;
               break;
            case 3:
               this._TKilx(var1, 8193, 65535);
               iPlayMode = 5;
               tcbNow.md = 412;
               tcbNow.lp = 0;
               break;
            case 4:
               iPlayMode = 2;
               iStagePoint = 0;

               for(var2 = 0; var2 < 6; ++var2) {
                  PracticeSetting[var2] = 0;
               }

               PracticeSetting[2] = 1;
               this._TKilx(var1, 8193, 65535);
               iDifficulty = 2;
               tcbNow.md = 284;
               tcbNow.lp = 0;
               break;
            case 5:
               this._TKilx(var1, 8193, 65535);
               tcbNow.md = 352;
               tcbNow.lp = 0;
               break;
            case 6:
               this.ReleaseFramebuffer(var1);
               var1.iAppFree = this.GetAppFree(var1);
               var1.glview.SmapStart();
               tcbNow.md = 276;
               tcbNow.lp = 0;
               bDrawSkip = true;
               this._TKilx(var1, 8193, 65535);
               iSmapReturnMD = 260;
            }
         }
         break;
      case 273:
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 253, 24576, 16385, 60, 139, 16);
         this.CreatePanelSingle(var1, 24576, 0, 266, 16384, 0, 0, 0);
         tcbNow.md = 274;
         tcbNow.lp = 0;
         break;
      case 274:
         if (this.SmapDataEnd(var1)) {
            tcbNow.md = 275;
            tcbNow.lp = 0;
         }
         break;
      case 275:
         tcbNow.md = 276;
         tcbNow.lp = 0;
         break;
      case 276:
         bDrawSkip = true;
         if (var1.iSmapEnd != 0) {
            this.CreateFramebuffer(var1, var1.iFrameScalWidth, var1.iFrameScalHeight);
            this._TKilx(var1, 8193, 65535);
            if (ConfigData[1] == 0) {
               tcbNow.md = 279;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 278;
               tcbNow.lp = 0;
            }
         }
         break;
      case 277:
         tcbNow.md = 276;
         tcbNow.lp = 0;
         break;
      case 278:
         bDrawSkip = false;
         iFade = 0;
         this._FILELoad(var1);
         iBackKeyType = 0;
         this.CharVisibleInit(var1);
         tcbNow._work[11] = iSmapReturnCur;
         tcbNow.md = iSmapReturnMD;
         tcbNow.lp = 0;
         break;
      case 279:
         this._TKilx(var1, 8193, 65535);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 89, 12291, 0, 8, 200);
         tcbNow.md = 280;
         tcbNow.lp = 0;
         break;
      case 280:
         this._TLoop(var1, 3, 281);
         break;
      case 281:
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 292, 24576, 16385, 32, 217, 16);
         tcbNow.md = 282;
         tcbNow.lp = 0;
         break;
      case 282:
         this._TLoop(var1, 5, 283);
         break;
      case 283:
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0]) || TouchesXPos[0] != 0 && TouchesStatus[0] != 0) {
            tcbNow.md = 684;
            tcbNow.lp = 0;
         }
         break;
      case 284:
         bClrBack = true;
         iClrR = 0;
         iClrG = 0;
         iClrB = 0;
         bTaskRepeat = true;
         iSystemFix = 1;
         iRound = 0;
         WinPoint[0] = 0;
         WinPoint[1] = 0;
         tcbNow.md = 999;
         tcbNow.lp = 0;
         break;
      case 285:
         tcbNow._work[14] = -1;
         this.TextGDTString(var1, 0, iLanguage, 1, 24676 + 20, 12338 + 85, 62, 108, 16);
         this.TextGDTString(var1, 0, iLanguage, 11, 24676 + 20, 12338 + 85, 98, 236, 16);
         this.TextGDTString(var1, 0, iLanguage, 12, 24676 + 20, 12338 + 85, 340, 236, 16);
         this.CreatePanelSingle(var1, 24676, 0, 274, 12338 + 3, 0, 0, 0);
         tcbNow.md = 286;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 286:
         var4 = tcbNow._work[14];
         if (this.CheckBack(var1, 10000, 10000, TouchesStatus[0])) {
            tcbNow._work[14] = 0;
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow.md = 287;
            tcbNow.lp = 0;
         } else {
            short var3 = 306;

            for(var2 = 0; var2 < 2; ++var2) {
               if (TouchesXPos[0] > var3 && TouchesXPos[0] < var3 + 120 && TouchesYPos[0] > 220 && TouchesYPos[0] < 220 + 50 && TouchesStatus[0] != 0) {
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  tcbNow._work[14] = var2;
                  tcbNow.md = 287;
                  tcbNow.lp = 0;
                  break;
               }

               var3 = 60;
            }
         }

         if (var4 != tcbNow._work[14]) {
            this._TKilx(var1, 24676, 24676);
            this.CreatePanelSingle(var1, 24676, 0, tcbNow._work[14] + 255, 12338 + 3, 0, 0, 0);
         }
         break;
      case 287:
         this._TLoop(var1, 45, 288);
         break;
      case 288:
         if (tcbNow._work[14] == 0) {
            this._TKilx(var1, 24676, 24676 + 20);
            tcbNow.md = tcbNow._work[15];
            tcbNow.lp = 0;
         } else {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 289;
            tcbNow.lp = 0;
         }
         break;
      case 289:
         tcbNow.md = 290;
         tcbNow.lp = 0;
         break;
      case 290:
         this._TLoop(var1, 3, 291);
         break;
      case 291:
         this._TKilx(var1, 4096, 65535);
         var1.bThreadActive = false;
      }

   }

   public void Game13(GlobalWork var1, int var2) {
      int var3;
      int[] var6;
      short var11;
      int var10002;
      switch(var2) {
      case 0:
      case 122:
      default:
         break;
      case 123:
         iJoyBufCount = 0;
         tcbNow.md = 124;
         tcbNow.lp = 0;
         break;
      case 124:
         if ((bBTSend || bBTRevOK) && iJoyBufCount < 3) {
         }

         if (!bBTSend && !bBTDataSetOK) {
            this.BTDataSet(var1, 4);
            iJoyBufCount = 0;
         }
         break;
      case 125:
         iBTSkipCount = 255;
         break;
      case 126:
         for(var2 = 0; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         LoadData[5] = 1;
         LoadData[1] = 0;
         this.SetLoad(var1, true);
         this._TKilx(var1, 8193, 65535);
         iBTErrMess = 0;
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 5, 275, 12288 + 6, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 10, 12288 + 10, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 10, 24576 + 10, 12288 + 25, 144, 112, 16);
         this.TextGDTString(var1, 0, iLanguage, 11, 24576 + 10, 12288 + 25, 98, 236, 16);
         this.TextGDTString(var1, 0, iLanguage, 12, 24576 + 10, 12288 + 25, 340, 236, 16);
         tcbNow._work[14] = -1;
         this.CreatePanelSingle(var1, 24576 + 20, 0, 274, 12288 + 23, 0, 0, 0);
         tcbNow.md = 127;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 127:
         var2 = tcbNow._work[14];
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow.md = 175;
            tcbNow.lp = 0;
         } else {
            var11 = 306;

            for(var2 = 0; var2 < 2; ++var2) {
               if (TouchesXPos[0] > var11 && TouchesXPos[0] < var11 + 120 && TouchesYPos[0] > 220 && TouchesYPos[0] < 220 + 50 && TouchesStatus[0] != 0) {
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  tcbNow._work[14] = var2;
                  tcbNow.md = 128;
                  tcbNow.lp = 0;
                  break;
               }

               var11 = 60;
            }

            if (tcbNow._work[14] >= 0) {
               this._TKilx(var1, 24576 + 20, 24576 + 20);
               this.CreatePanelSingle(var1, 24576 + 20, 0, tcbNow._work[14] + 255, 12288 + 23, 0, 0, 0);
            }
         }
         break;
      case 128:
         this._TLoop(var1, 45, 129);
         break;
      case 129:
         if (tcbNow._work[14] == 1) {
            this._TKilx(var1, 24576 + 10, 24576 + 20);
            tcbNow.md = 130;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 175;
            tcbNow.lp = 0;
         }
         break;
      case 130:
         this._TKilx(var1, 24576 + 10, 24576 + 20);
         tcbNow._work[14] = -1;
         this.CreatePanelSingle(var1, 24576 + 20, 0, 276, 12288 + 3, 0, 0, 0);
         tcbNow.md = 131;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 131:
         var2 = tcbNow._work[14];
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow.md = 175;
            tcbNow.lp = 0;
         } else {
            var11 = 100;

            for(var2 = 0; var2 < 2; ++var2) {
               if (TouchesXPos[0] > 0 && TouchesXPos[0] < 480 && TouchesYPos[0] > var11 && TouchesYPos[0] < var11 + 48 && TouchesStatus[0] != 0) {
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  tcbNow._work[14] = var2;
                  iExchangeMode = var2;
                  tcbNow.md = 132;
                  tcbNow.lp = 0;
                  break;
               }

               var11 = 160;
            }

            if (tcbNow._work[14] >= 0) {
               this._TKilx(var1, 24576 + 20, 24576 + 20);
               this.CreatePanelSingle(var1, 24576 + 20, 0, tcbNow._work[14] + 263, 12288 + 3, 0, 0, 0);
            }
         }
         break;
      case 132:
         this._TLoop(var1, 45, 133);
         break;
      case 133:
         if (tcbNow._work[14] == 0) {
            this.InitAutoCardBuf(var1, 100000, -2, 0);
            iExchangeMode = 0;
            if (iCardBufCount <= 0) {
               tcbNow.md = 138;
               tcbNow.lp = 0;
               break;
            }
         } else {
            iExchangeMode = 1;
         }

         this._TKilx(var1, 24576 + 10, 24576 + 20);
         tcbNow.md = 135;
         tcbNow.lp = 0;
         break;
      case 134:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8192, 65535);
            this._TaskMake(var1, 685, 8192);
            this.GdtBGM(var1, 0);
         }
         break;
      case 135:
         bDrawSkip = true;
         this._TLoop(var1, 3, 136);
         break;
      case 136:
         bDrawSkip = true;
         this.ReleaseFramebuffer(var1);
         var1.glview.BluetoothStart();
         tcbNow.md = 137;
         tcbNow.lp = 0;
         break;
      case 137:
         byte var10 = 0;
         boolean var5 = false;
         bDrawSkip = true;
         boolean var4;
         if (var1.iBluetoothOK == 1) {
            var10 = 1;
            var4 = BluetoothManajer.getInstance().isServer();
            this.CreateFramebuffer(var1, var1.iFrameScalWidth, var1.iFrameScalHeight);
         } else {
            var4 = var5;
            if (var1.iBluetoothOK == -1) {
               var10 = -1;
               this.CreateFramebuffer(var1, var1.iFrameScalWidth, var1.iFrameScalHeight);
               var4 = var5;
            }
         }

         if (var10 == 1) {
            this.DrawTextClear(var1, 0);
            this.DrawTextClear(var1, 1);
            bDrawSkip = false;
            iPlayMode = 8;
            if (var4) {
               iPlayerNo = 0;
            } else {
               iPlayerNo = 1;
            }

            if (iExchangeMode == 0) {
               tcbNow.md = 142;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 145;
               tcbNow.lp = 0;
            }

            this._TKilx(var1, 28672, 28675);
            this._TaskMake(var1, 123, 28674);
         } else if (var10 == -1) {
            bDrawSkip = false;
            tcbNow.md = 180;
            tcbNow.lp = 0;
         }
         break;
      case 138:
         this._TKilx(var1, 24576 + 20, 24576 + 20);
         this.CreatePanelSingle(var1, 24576, 0, 89, 12288 + 3, 0, 8, 200);
         tcbNow.md = 139;
         tcbNow.lp = 0;
         break;
      case 139:
         this._TLoop(var1, 10, 140);
         break;
      case 140:
         this._TKilx(var1, 24576 + 30, 24576 + 30);
         this.DrawTextClear(var1, 0);
         this.TextGDTStringAlpha(var1, 0, iLanguage, 262, 24576 + 30, 12288 + 30, 32, 217, 16, 1);
         this.CreatePanelSingle(var1, 24576 + 30, 0, 272, 12288 + 3, 0, 424, 288);
         tcbNow.md = 1063;
         tcbNow.lp = 0;
         break;
      case 141:
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            tcbNow.md = 260;
            tcbNow.lp = 0;
         }

         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            tcbNow.md = 260;
            tcbNow.lp = 0;
         }
         break;
      case 142:
         this._TKilx(var1, 24576 + 10, 24576 + 50);
         this.CreatePanelSingle(var1, 24576 + 10, 0, 266, 12288 + 3, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 57, 24576 + 10, 12288 + 5, 32, 140, 16);
         tcbNow.md = 143;
         tcbNow.lp = 0;
         break;
      case 143:
         var2 = iPlayerNo;
         var3 = 1 - var2;
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow.md = 260;
            tcbNow.lp = 0;
         } else {
            bEventValueBuf[0] = 3;
            if (bEventValue[var2][0] == 3 && bEventValue[var3][0] == 2) {
               bEventValue[var2][0] = 0;
               bEventValue[var3][0] = 0;
               bEventValueBuf[0] = 0;
               tcbNow.md = 144;
               tcbNow.lp = 0;
            }
         }
         break;
      case 144:
         iCardPreviewMode = 2;
         tcbNow.md = 1054;
         tcbNow.lp = 0;
         break;
      case 145:
         var2 = iPlayerNo;
         this._TKilx(var1, 24576 + 10, 24576 + 50);
         bEventValue[var2][0] = 0;
         bEventValue[1 - var2][0] = 0;
         bEventValueBuf[0] = 0;
         this.CreatePanelSingle(var1, 24576 + 10, 0, 266, 12288 + 3, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 58, 24576 + 10, 12288 + 5, 32, 140, 16);
         tcbNow.md = 146;
         tcbNow.lp = 0;
         break;
      case 146:
         var3 = iPlayerNo;
         var2 = 1 - var3;
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow.md = 260;
            tcbNow.lp = 0;
         } else {
            bEventValueBuf[0] = 2;
            if (bEventValue[var3][0] == 2 && bEventValue[var2][0] == 3) {
               bEventValue[var3][0] = 0;
               bEventValue[var2][0] = 0;
               bEventValueBuf[0] = 0;
               tcbNow.md = 147;
               tcbNow.lp = 0;
            }
         }
         break;
      case 147:
         this._TLoop(var1, 10, 148);
         break;
      case 148:
         var2 = iPlayerNo;
         this._TKilx(var1, 24576 + 10, 24576 + 50);
         bEventValue[var2][0] = 0;
         bEventValue[1 - var2][0] = 0;
         bEventValueBuf[0] = 0;
         bEventValueBuf[2] = 0;
         this.CreatePanelSingle(var1, 24576 + 10, 0, 266, 12288 + 3, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 53, 24576 + 10, 12288 + 5, 32, 140, 16);
         tcbNow.md = 149;
         tcbNow.lp = 0;
         break;
      case 149:
         var3 = iPlayerNo;
         var2 = 1 - var3;
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow.md = 175;
            tcbNow.lp = 0;
         } else {
            bEventValueBuf[0] = 2;
            if (bEventValue[var3][0] == 2 && bEventValue[var2][0] == 2) {
               bEventValue[var3][0] = 0;
               bEventValue[var2][0] = 0;
               bEventValueBuf[0] = 0;
               iSelectCardResult = 0;
               tcbNow._work[14] = 0;
               iSelectCard = bEventValue[var2][1];
               if (this.GetCardLevel(var1, iSelectCard) >= 10) {
                  iSelectCardResult = 1;
               }

               tcbNow.md = 150;
               tcbNow.lp = 0;
            }
         }
         break;
      case 150:
         var2 = 1 - iPlayerNo;
         bEventValue[0][0] = 0;
         bEventValue[1][0] = 0;
         bEventValueBuf[0] = 0;
         bEventValueBuf[2] = 0;
         if (bEventValue[var2][0] == 3) {
            tcbNow._work[14] = bEventValue[var2][0];
         }

         this._TLoop(var1, 10, 151);
         break;
      case 151:
         var2 = iPlayerNo;
         var3 = 1 - var2;
         bEventValueBuf[0] = 4;
         bEventValueBuf[2] = (byte)iSelectCardResult;
         if (bEventValue[var3][0] == 3) {
            tcbNow._work[14] = bEventValue[var3][0];
         }

         if (bEventValue[var2][0] == 4 && tcbNow._work[14] == 3) {
            bEventValueBuf[0] = 4;
            bEventValue[var2][0] = 0;
            bEventValue[var3][0] = 0;
            tcbNow._work[14] = 0;
            if (iSelectCardResult == 0) {
               BluetoothManajer.getInstance().ReadStop(true);
               this._TaskMake(var1, 125, 28675);
               tcbNow.md = 152;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 178;
               tcbNow.lp = 0;
            }
         }
         break;
      case 152:
         bEventValueBuf[0] = 4;
         var6 = tcbNow._work;
         var10002 = var6[14]++;
         if (tcbNow._work[14] >= 12) {
            this._TKilx(var1, 28672, 28675);
            this.BTReset(var1, true);
         }

         this._TLoop(var1, 14, 153);
         break;
      case 153:
         this.BTReset(var1, true);
         BluetoothManajer.getInstance().reset();
         BluetoothManajer.getInstance().dispose();
         iPlayMode = 7;
         tcbNow.md = 154;
         tcbNow.lp = 0;
         break;
      case 154:
         this._TLoop(var1, 15, 155);
         break;
      case 155:
         iPlayMode = 7;
         tcbNow.md = 156;
         tcbNow.lp = 0;
         break;
      case 156:
         this.AddCard(var1, iSelectCard, 1);
         this._FILESave(var1);
         tcbNow.md = 157;
         tcbNow.lp = 0;
         break;
      case 157:
         this.CreatePanelSingle(var1, 24576 + 10, 0, 266, 12288 + 3, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 55, 24576 + 10, 12288 + 5, 32, 140, 16);
         tcbNow.md = 158;
         tcbNow.lp = 0;
         break;
      case 158:
         boolean var8 = false;
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            var8 = true;
         }

         boolean var9 = var8;
         if (TouchesXPos[0] > 0) {
            var9 = var8;
            if (TouchesStatus[0] != 0) {
               var9 = true;
            }
         }

         if (var9) {
            tcbNow.md = 159;
            tcbNow.lp = 0;
         }
         break;
      case 159:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 160;
         tcbNow.lp = 0;
         break;
      case 160:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            iCardPreviewMode = 2;
            iGetCardNo = iSelectCard;
            tcbNow.md = 313;
            tcbNow.lp = 0;
         }
         break;
      case 161:
         iSelectCard = tcbNow._work[4];
         tcbNow.md = 162;
         tcbNow.lp = 0;
         break;
      case 162:
         this._TKilx(var1, 24576 + 90, 24576 + 90);
         this.CreatePanelSingle(var1, 24576 + 100, 0, 275, 12368 + 83, 0, 0, 0);
         this.TextGDTString(var1, 0, iLanguage, 54, 24576 + 90, 12368 + 85, 102, 112, 16);
         this.TextGDTString(var1, 0, iLanguage, 11, 24576 + 90, 12368 + 85, 98, 236, 16);
         this.TextGDTString(var1, 0, iLanguage, 12, 24576 + 90, 12368 + 85, 340, 236, 16);
         tcbNow._work[14] = -1;
         tcbNow.md = 163;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 163:
         short var7 = 306;

         for(var3 = 0; var3 < 2; ++var3) {
            if (TouchesXPos[0] > var7 && TouchesXPos[0] < var7 + 120 && TouchesYPos[0] > 220 && TouchesYPos[0] < 220 + 50 && TouchesStatus[0] != 0) {
               iReqSENo = 0;
               this.PushSE(var1, 0);
               tcbNow._work[14] = var3;
               tcbNow.md = 164;
               tcbNow.lp = 0;
               break;
            }

            var7 = 60;
         }

         if (tcbNow._work[14] >= 0) {
            this._TKilx(var1, 24576 + 100, 24576 + 100);
            this.CreatePanelSingle(var1, 24576 + 100, 0, tcbNow._work[14] + 260, 12368 + 83, 0, 0, 0);
         }
         break;
      case 164:
         this._TLoop(var1, 45, 165);
         break;
      case 165:
         if (tcbNow._work[14] == 1) {
            this._TKilx(var1, 24576 + 90, 24576 + 100);
            tcbNow.md = 166;
            tcbNow.lp = 0;
         } else {
            this._TKilx(var1, 24576 + 90, 24576 + 100);
            tcbNow.md = 1057;
            tcbNow.lp = 0;
         }
         break;
      case 166:
         var2 = iPlayerNo;
         var3 = 1 - var2;
         bEventValueBuf[0] = 2;
         bEventValueBuf[1] = (byte)iSelectCard;
         if (bEventValue[var2][0] == 2 && bEventValue[var3][0] == 2) {
            bEventValue[var2][0] = 0;
            bEventValue[var3][0] = 0;
            bEventValueBuf[0] = 0;
            tcbNow.md = 167;
            tcbNow.lp = 0;
         }
         break;
      case 167:
         bEventValue[0][0] = 0;
         bEventValue[1][0] = 0;
         this._TLoop(var1, 10, 168);
         break;
      case 168:
         var3 = iPlayerNo;
         var2 = 1 - var3;
         bEventValueBuf[0] = 3;
         if (bEventValue[var3][0] == 3 && bEventValue[var2][0] == 4) {
            iSelectCardResult = bEventValue[var2][2];
            if (iSelectCardResult == 0) {
               BluetoothManajer.getInstance().ReadStop(true);
               this._TaskMake(var1, 125, 28675);
               tcbNow.md = 169;
               tcbNow.lp = 0;
            } else {
               bEventValue[var3][2] = 0;
               bEventValue[var2][2] = 0;
               this._TKilx(var1, 24576, 24576 + 100);
               this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
               this.CreatePanelSingle(var1, 24576, 5, 275, 12288 + 6, 0, 0, 0);
               this.CreatePanelSingle(var1, 24576, 0, 10, 12288 + 10, 0, 0, 0);
               tcbNow.md = 142;
               tcbNow.lp = 0;
            }

            tcbNow._work[14] = 0;
         }
         break;
      case 169:
         bEventValueBuf[0] = 3;
         var6 = tcbNow._work;
         var10002 = var6[14]++;
         if (tcbNow._work[14] >= 12) {
            this._TKilx(var1, 28672, 28675);
            this.BTReset(var1, true);
         }

         this._TLoop(var1, 14, 170);
         break;
      case 170:
         this.BTReset(var1, true);
         BluetoothManajer.getInstance().reset();
         BluetoothManajer.getInstance().dispose();
         iPlayMode = 7;
         this._TKilx(var1, 28672, 28675);
         tcbNow.md = 171;
         tcbNow.lp = 0;
         break;
      case 171:
         this._TLoop(var1, 15, 172);
         break;
      case 172:
         tcbNow.md = 173;
         tcbNow.lp = 0;
         break;
      case 173:
         this._TKilx(var1, 24576 + 1, 24576 + 1);
         this._TKilx(var1, 24576 + 10, 24576 + 50);
         this.AddCard(var1, iSelectCard, -1);
         this._FILESave(var1);
         this.CreatePanelSingle(var1, 24576 + 90, 0, 266, 12368 + 3, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 59, 24576 + 90, 12368 + 5, 32, 140, 16);
         tcbNow.md = 174;
         tcbNow.lp = 0;
         break;
      case 174:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            tcbNow.md = 1064;
            tcbNow.lp = 0;
         }
         break;
      case 175:
         bBTSend = false;
         bBTDataSetOK = false;
         iBTReadDataIndex = 0;
         iBTReadDataBufIndex = 0;
         BluetoothManajer.getInstance().reset();
         BluetoothManajer.getInstance().dispose();
         tcbNow.md = 176;
         tcbNow.lp = 0;
         break;
      case 176:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 177;
         tcbNow.lp = 0;
         break;
      case 177:
         if (iFade == 255 || iFade == 0) {
            this.BTDispose(var1);
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 418;
            tcbNow.lp = 0;
         }
         break;
      case 178:
         this._TKilx(var1, 24576 + 10, 24576 + 50);
         this.CreatePanelSingle(var1, 24576 + 10, 0, 266, 12288 + 3, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 56, 24576 + 50, 12288 + 5, 32, 140, 16);
         tcbNow.md = 179;
         tcbNow.lp = 0;
         break;
      case 179:
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            this._TKilx(var1, 24576 + 10, 24576 + 50);
            tcbNow.md = 145;
            tcbNow.lp = 0;
         } else if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            this._TKilx(var1, 24576 + 10, 24576 + 50);
            tcbNow.md = 145;
            tcbNow.lp = 0;
         }
         break;
      case 180:
         this._TKilx(var1, 8193, 65535);
         iPlayerNo = 0;
         iPlayMode = 6;
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 5, 275, 12288 + 1, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 89, 12288 + 1, 0, 8, 200);
         this.DrawTextClear(var1, 0);
         switch(iBTErrMess) {
         case 0:
            this.TextGDTString(var1, 0, iLanguage, 13, 24576 + 1, 12288 + 5, 32, 217, 16);
            break;
         case 1:
            this.TextGDTString(var1, 0, iLanguage, 17, 24576 + 1, 12288 + 5, 32, 217, 16);
            break;
         case 2:
            this.TextGDTString(var1, 0, iLanguage, 18, 24576 + 1, 12288 + 5, 32, 217, 16);
         }

         tcbNow.md = 181;
         tcbNow.lp = 0;
         break;
      case 181:
         this._TLoop(var1, 20, 182);
         break;
      case 182:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            this.BTDispose(var1);
            iReqSENo = 0;
            this.PushSE(var1, 0);
            this._TKilx(var1, 8192, 65535);
            this._TaskMake(var1, 260, 8192);
            this.GdtBGM(var1, 0);
         }
      }

   }

   public void Game14(GlobalWork var1, int var2) {
      int var3;
      int[] var9;
      int[] var10;
      int var11;
      int var13;
      short var14;
      int var15;
      int var10002;
      switch(var2) {
      case 0:
      case 293:
      default:
         break;
      case 294:
         this._TKilx(var1, 8193, 65535);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 89, 12288 + 3, 0, 8, 200);
         tcbNow.md = 295;
         tcbNow.lp = 0;
         break;
      case 295:
         this._TLoop(var1, 10, 296);
         break;
      case 296:
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 293, 24576 + 30, 12288 + 10, 32, 217, 16);
         tcbNow.md = 297;
         tcbNow.lp = 0;
         break;
      case 297:
         this._TLoop(var1, 5, 298);
         break;
      case 298:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            tcbNow.md = 299;
            tcbNow.lp = 0;
            this.CreateWipeInOut(var1, 1);
         }
         break;
      case 299:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8192, 65535);
            this._TaskMake(var1, 260, 8192);
            this.GdtBGM(var1, 0);
         }
         break;
      case 300:
         tcbNow._work[10] = 0;
         tcbNow._work[11] = 0;
         if (this.MissionText(var1, iStage) && iStage <= 7) {
            tcbNow._work[11] = 1;
         }

         this.MissionSave(var1, iStage);
         this._FILESave(var1);
         if (this.GetAppFree(var1) == 0 && iStage >= 5) {
            tcbNow.md = 294;
            tcbNow.lp = 0;
         } else {
            for(var2 = 1; var2 < 31; ++var2) {
               LoadData[var2] = -1;
            }

            LoadData[5] = 1;
            this.SetLoad(var1, true);
            this.GdtBGM(var1, 43);
            this._TKilx(var1, 8193, 65535);
            this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576, 5, 240, 12288 + 2, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576, 0, 89, 12288 + 3, 0, 8, 200);
            iBackKeyType = 1;
            switch(iStage) {
            case 0:
               tcbNow._work[12] = 8;
               break;
            case 1:
               tcbNow._work[12] = 6;
               break;
            case 2:
               tcbNow._work[12] = 7;
               break;
            case 3:
               tcbNow._work[12] = 6;
               break;
            case 4:
               tcbNow._work[12] = 7;
               break;
            case 5:
               tcbNow._work[12] = 9;
               break;
            case 6:
               tcbNow._work[12] = 4;
               break;
            case 7:
               tcbNow._work[12] = 5;
               break;
            case 8:
               tcbNow._work[12] = 6;
               break;
            default:
               tcbNow._work[12] = 10;
            }

            tcbNow.md = 301;
            tcbNow.lp = 0;
         }
         break;
      case 301:
         this._TLoop(var1, 10, 302);
         break;
      case 302:
         this._TKilx(var1, 24576 + 30, 24576 + 30);
         this.DrawTextClear(var1, 0);
         this.TextGDTStringAlpha(var1, 0, iLanguage, tcbNow._work[11] + 100 + iStage * 10, 24576 + 30, 12288 + 30, 32, 217, 16, 1);
         tcbNow.md = 303;
         tcbNow.lp = 0;
         break;
      case 303:
         this._TLoop(var1, 10, 304);
         break;
      case 304:
         this.CreatePanelSingle(var1, 24576 + 30, 0, 272, 12288 + 3, 0, 424, 288);
         tcbNow.md = 305;
         tcbNow.lp = 0;
         break;
      case 305:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            if (tcbNow._work[11] + 1 >= tcbNow._work[12]) {
               if (iStage != 2 && iStage != 7) {
                  if (iStage == 8) {
                     tcbNow.md = 312;
                     tcbNow.lp = 0;
                  } else {
                     tcbNow.md = 309;
                     tcbNow.lp = 0;
                  }
               } else {
                  tcbNow.md = 310;
                  tcbNow.lp = 0;
               }

               this.CreateWipeInOut(var1, 1);
            } else {
               tcbNow._work[10] = 255;
               tcbNow.md = 308;
               tcbNow.lp = 0;
            }
         }
         break;
      case 306:
         this._TKilx(var1, 24576 + 30, 24576 + 30);
         this.DrawTextClear(var1, 0);
         this.TextGDTStringAlpha(var1, 0, iLanguage, tcbNow._work[11] + 100 + iStage * 10, 24576 + 30, 12288 + 10, 32, 217, 16, 2);
         tcbNow.md = 307;
         tcbNow.lp = 0;
         break;
      case 307:
         this._TLoop(var1, 10, 308);
         break;
      case 308:
         var9 = tcbNow._work;
         var10002 = var9[11]++;
         this._TKilx(var1, 24576 + 30, 24576 + 30);
         tcbNow.md = 301;
         tcbNow.lp = 0;
         break;
      case 309:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 185;
            tcbNow.lp = 0;
         }
         break;
      case 310:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 311;
            tcbNow.lp = 0;
         }
         break;
      case 311:
         for(var2 = 1; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         LoadData[3] = PlayerType[iPlayerNo];
         LoadFilter[3] = 251;
         LoadData[1] = 0;
         LoadData[5] = 0;
         this.SetLoad(var1, true);
         WinPoint[0] = 0;
         WinPoint[1] = 0;
         iReturnTask = 185;
         tcbNow.md = 1082;
         tcbNow.lp = 0;
         break;
      case 312:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 389;
            tcbNow.lp = 0;
            this.MissionClear(var1);
         }
         break;
      case 313:
         if (iGetCardNo != 0 && iPlayMode != 8) {
            if (iFade == 255 || iFade == 0) {
               this._TKilx(var1, 8193, 65535);
               this.GdtBGM(var1, 44);

               for(var2 = 1; var2 < 31; ++var2) {
                  LoadData[var2] = -1;
               }

               LoadData[5] = 1;
               LoadData[6] = iGetCardNo + 255;
               LoadData[7] = 255;
               this.SetLoad(var1, true);
               this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
               this.CreatePanelSingle(var1, 24576, 5, 200, 12288 + 2, 0, 0, 0);
               this.CreatePanelSingle(var1, 24576, 5, 239, 12288 + 1, 0, -64, 0);
               if (iCardPreviewMode == 0) {
                  bTicketChange = this.AddCard(var1, iGetCardNo, 1);
               }

               var2 = this.GetCardLevel(var1, iGetCardNo);
               if (!bTicketChange) {
                  this.CreatePanelSingle(var1, 24576 + 20, 5, 241, 12288 + 20, 0, 0, 0);
               }

               this._TKilx(var1, 24576 + 30, 24576 + 30);
               this.CreatePanelSingle(var1, 24576 + 20, 6, var2 + 44, 12288 + 8, 0, 240, 120);
               if (var2 == 0) {
               }

               tcbNow.md = 314;
               tcbNow.lp = 0;
            }
         } else {
            tcbNow.md = 322;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 314:
         this._TLoop(var1, 30, 315);
         break;
      case 315:
         this.CreatePanelSingle(var1, 24576, 0, 89, 12288 + 2, 0, 8, 200);
         tcbNow.md = 316;
         tcbNow.lp = 0;
         break;
      case 316:
         this._TLoop(var1, 10, 317);
         break;
      case 317:
         var2 = this.GetCardLevel(var1, iGetCardNo);
         this.DrawTextClear(var1, 0);
         if (bTicketChange) {
            this.TextGDTString(var1, 0, iLanguage, 31, 24576 + 30, 12288 + 10, 32, 217, 16);
            this.AddTicket(var1, this.GetGDTAddTicket(var1, iDifficulty, true));
            tcbNow._work[20] = 480;
            tcbNow.md = 318;
            tcbNow.lp = 0;
         } else {
            if (var2 == 0) {
               this.CardGDTString(var1, 0, iGetCardNo, 0, 0, this.CardData_TextPage[iLanguage * 2 + 0], 24576 + 30, 12288 + 10, 32, 217, 16);
               this.TextGDTString(var1, 0, iLanguage, 40, 24576 + 30, 12288 + 10, 32, 217, 16);
            } else {
               this.CardGDTString(var1, 0, iGetCardNo, 0, 0, this.CardData_TextPage[iLanguage * 2 + 0], 24576 + 30, 12288 + 10, 32, 217, 16);
               this.TextGDTString(var1, 0, iLanguage, 40, 24576 + 30, 12288 + 10, 32, 217, 16);
               this.TextGDTString(var1, 0, iLanguage, var2 + 41, 24576 + 30, 12288 + 10, 32, 249, 16);
            }

            tcbNow.md = 319;
            tcbNow.lp = 0;
         }
         break;
      case 318:
         this._TKilx(var1, 24576 + 50, 24576 + 50);
         var9 = tcbNow._work;
         var9[20] -= 48;
         if (tcbNow._work[20] < 0) {
            tcbNow._work[20] = 0;
            tcbNow.md = 320;
            tcbNow.lp = 0;
         }

         this.CreatePanelSingle(var1, 24576 + 50, 5, 29, 12288 + 48, 0, tcbNow._work[20] + 96, 152);
         this.CreateValueObjectB(var1, 24576 + 50, tcbNow._work[20] + 295, 150, this.GetGDTAddTicket(var1, iDifficulty, true), 4, 14, 230, 12288 + 50, 0, 0, 0);
         break;
      case 319:
         this._TLoop(var1, 10, 320);
         break;
      case 320:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            if (this.isMission(var1) == 0) {
               tcbNow.md = 300;
               tcbNow.lp = 0;
            } else if (iCardPreviewMode == 2) {
               tcbNow.md = 176;
               tcbNow.lp = 0;
            } else if (iCardPreviewMode == 1) {
               this.CreateWipeInOut(var1, 1);
               tcbNow.md = 321;
               tcbNow.lp = 0;
            } else {
               this.CreateWipeInOut(var1, 1);
               if (tcbNow._work[10] != 0) {
                  tcbNow.md = 322;
                  tcbNow.lp = 0;
               } else {
                  tcbNow.md = 351;
                  tcbNow.lp = 0;
               }
            }
         }
         break;
      case 321:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow._work[10] = iCardBufVal;
            tcbNow.md = 1055;
            tcbNow.lp = 0;
         }
         break;
      case 322:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            if ((iPlayMode == 0 || iPlayMode == 8) && !bGetBall) {
               tcbNow.md = 351;
               tcbNow.lp = 0;
            } else {
               for(var2 = 1; var2 < 31; ++var2) {
                  LoadData[var2] = -1;
               }

               LoadData[5] = 1;
               LoadData[6] = 256;
               LoadData[7] = 255;
               this.SetLoad(var1, true);
               this.GdtBGM(var1, 45);
               this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
               if (iCardPreviewMode == 0) {
                  this.CreatePanelSingle(var1, 24576, 5, 200, 12288 + 2, 0, 0, 0);
               } else {
                  this.CreatePanelSingle(var1, 24576, 5, 273, 12288 + 2, 0, 0, 0);
                  this.CreatePanelSingle(var1, 24576, 0, 10, 12288 + 10, 0, 0, 0);
               }

               this.CreatePanelSingle(var1, 24576, 0, 89, 12288 + 2, 0, 8, 200);
               var3 = this.GetBallLine(var1);

               for(var2 = 0; var2 < 7; ++var2) {
                  var15 = this.GetBall(var1, var2);
                  var11 = this.BallPos[var2 << 1];
                  var13 = this.BallPos[(var2 << 1) + 1];
                  if (var3 >= var15 && var3 < 11) {
                     this.CreatePanelSingle(var1, 24576 + 10, 5, var2 + 211, 12288 + 5, 0, var11, var13);
                  } else {
                     this.CreatePanelSingle(var1, 24576 + 10, 5, var2 + 201, 12288 + 5, 0, var11, var13);
                  }
               }

               if (iCardPreviewMode == 0) {
                  tcbNow.md = 323;
                  tcbNow.lp = 0;
               } else {
                  tcbNow.md = 367;
                  tcbNow.lp = 0;
                  this.Game(var1, tcbNow.md);
               }
            }
         }
         break;
      case 323:
         this._TLoop(var1, 10, 324);
         break;
      case 324:
         var3 = 217;
         this._TKilx(var1, 24576 + 10, 24576 + 10);

         for(var2 = 0; var2 < 7; var3 = var11) {
            var11 = var3;
            if (BallGetCount[var2] > 0) {
               var13 = this.BallPos[var2 << 1];
               var11 = this.BallPos[(var2 << 1) + 1];
               this.AddBall(var1, var2, BallGetCount[var2]);
               this.CreatePanelSingle(var1, 24576 + 20, 5, var2 + 221, 12288 + 5, 0, var13, var11);
               this.TextGDTString(var1, 0, iLanguage, var2 + 21, 24576 + 10, 12288 + 10, 32, var3, 16);
               var11 = var3 + 16;
            }

            ++var2;
         }

         var3 = this.GetBallLine(var1);

         for(var2 = 0; var2 < 7; ++var2) {
            var15 = this.GetBall(var1, var2);
            var13 = this.BallPos[var2 << 1];
            var11 = this.BallPos[(var2 << 1) + 1];
            if (var3 >= var15) {
               this.CreatePanelSingle(var1, 24576 + 10, 5, var2 + 211, 12288 + 5, 0, var13, var11);
            } else {
               this.CreatePanelSingle(var1, 24576 + 10, 5, var2 + 201, 12288 + 5, 0, var13, var11);
            }
         }

         tcbNow.md = 325;
         tcbNow.lp = 0;
         tcbNow._work[14] = 0;
         break;
      case 325:
         this._TLoop(var1, 10, 326);
         break;
      case 326:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            tcbNow.md = 327;
            tcbNow.lp = 0;
         }
         break;
      case 327:
         if (this.CheckBallLine(var1)) {
            this.AddBallLine(var1);
            tcbNow.md = 328;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         } else {
            tcbNow.md = 351;
            tcbNow.lp = 0;
            this.CreateWipeInOut(var1, 1);
         }
         break;
      case 328:
         if (iFade == 255 || iFade == 0) {
            this.AddCard(var1, 1, 1);
            this._TKilx(var1, 8193, 65535);

            for(var2 = 1; var2 < 31; ++var2) {
               LoadData[var2] = -1;
            }

            LoadData[5] = 1;
            LoadData[6] = 256;
            LoadData[7] = 255;
            this.SetLoad(var1, true);
            this.GdtBGM(var1, 46);
            this.CreatePanelSingle(var1, 24576 + 40, 0, 12, 12288, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576, 5, 200, 12288 + 50, 0, 0, 0);
            bTicketChange = this.AddCard(var1, 0, 1);

            for(var2 = 0; var2 < 7; ++var2) {
               this.CreatePanelSingle(var1, 24576 + 40, 5, var2 + 201, 12288 + 5, 0, this.BallPos[var2 << 1], this.BallPos[(var2 << 1) + 1]);
            }

            this.CreatePanelSingle(var1, 24576, 0, 89, 12288 + 50, 0, 8, 200);
            tcbNow._work[10] = 0;
            tcbNow.md = 329;
            tcbNow.lp = 0;
         }
         break;
      case 329:
         this._TLoop(var1, 10, 330);
         break;
      case 330:
         this._TKilx(var1, 24576 + 50, 24576 + 50);
         this.DrawTextClear(var1, 0);
         this.TextGDTStringAlpha(var1, 0, iLanguage, 28, 24576 + 50, 12288 + 60, 32, 217, 16, 1);
         tcbNow.md = 331;
         tcbNow.lp = 0;
         break;
      case 331:
         this._TLoop(var1, 10, 332);
         break;
      case 332:
         tcbNow.md = 333;
         tcbNow.lp = 0;
         break;
      case 333:
         this._TLoop(var1, 30, 334);
         break;
      case 334:
         tcbEffect[0] = this.CreatePanelSingle(var1, 24576 + 20, 5, 115, 12288 + 20, 0, 0, 0);
         tcbNow.md = 335;
         tcbNow.lp = 0;
         break;
      case 335:
         var9 = tcbNow._work;
         var10002 = var9[10]++;
         if (tcbNow._work[10] == 180) {
            this._TKilx(var1, 24576 + 40, 24576 + 40);
            this.CreatePanelSingle(var1, 24576 + 40, 5, 120, 12288, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576 + 40, 5, 110, 12288 + 2, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576 + 40, 5, 111, 12288 + 3, 0, 232, 352);
         }

         if ((tcbEffect[0].obj.wActFlag & 2) != 0) {
            this._TKilx(var1, 24576 + 20, 24576 + 20);
            tcbNow.md = 336;
            tcbNow.lp = 0;
         }
         break;
      case 336:
         this._TLoop(var1, 90, 337);
         break;
      case 337:
         this._TKilx(var1, 24576 + 50, 24576 + 50);
         this.DrawTextClear(var1, 0);
         this.TextGDTStringAlpha(var1, 0, iLanguage, 60, 24576 + 50, 12288 + 60, 32, 217, 16, 1);
         tcbNow.md = 338;
         tcbNow.lp = 0;
         break;
      case 338:
         this._TLoop(var1, 10, 339);
         break;
      case 339:
         this.CreatePanelSingle(var1, 24576 + 50, 0, 272, 12288 + 70, 0, 424, 288);
         tcbNow.md = 340;
         tcbNow.lp = 0;
         break;
      case 340:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            this._TKilx(var1, 24576 + 50, 24576 + 50);
            this.DrawTextClear(var1, 0);
            this.TextGDTStringAlpha(var1, 0, iLanguage, 61, 24576 + 50, 12288 + 60, 32, 217, 16, 1);
            tcbNow.md = 341;
            tcbNow.lp = 0;
         }
         break;
      case 341:
         this._TLoop(var1, 10, 342);
         break;
      case 342:
         this.CreatePanelSingle(var1, 24576 + 50, 0, 272, 12288 + 70, 0, 424, 288);
         tcbNow.md = 343;
         tcbNow.lp = 0;
         break;
      case 343:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            this._TKilx(var1, 24576 + 50, 24576 + 50);
            this.DrawTextClear(var1, 0);
            this.TextGDTStringAlpha(var1, 0, iLanguage, 62, 24576 + 50, 12288 + 60, 32, 217, 16, 1);
            tcbNow.md = 344;
            tcbNow.lp = 0;
         }
         break;
      case 344:
         this._TLoop(var1, 10, 345);
         break;
      case 345:
         this.CreatePanelSingle(var1, 24576 + 50, 0, 272, 12288 + 70, 0, 424, 288);
         tcbNow.md = 346;
         tcbNow.lp = 0;
         break;
      case 346:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            this._TKilx(var1, 24576 + 60, 24576 + 60);
            tcbNow.md = 347;
            tcbNow.lp = 0;
         }
         break;
      case 347:
         tcbNow._work[10] = 0;
         tcbEffect[0] = this.CreatePanelSingle(var1, 24576 + 20, 5, 116, 12288 + 20, 0, 0, 0);
         tcbNow.md = 348;
         tcbNow.lp = 0;
         break;
      case 348:
         var9 = tcbNow._work;
         var10002 = var9[10]++;
         if (tcbNow._work[10] == 60) {
            this._TKilx(var1, 24576 + 40, 24576 + 40);
            this.CreatePanelSingle(var1, 24576 + 40, 0, 12, 12288, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576 + 40, 6, this.GetCardLevel(var1, 1) + 44, 12288 + 8, 0, 240, 120);
            this.CreatePanelSingle(var1, 24576 + 40, 5, 239, 12288 + 9, 0, -64, 0);
         }

         if ((tcbEffect[0].obj.wActFlag & 2) != 0) {
            this._TKilx(var1, 24576 + 20, 24576 + 20);
            tcbNow.md = 349;
            tcbNow.lp = 0;
         }
         break;
      case 349:
         this._TKilx(var1, 24576 + 50, 24576 + 50);
         this.DrawTextClear(var1, 0);
         var2 = this.GetCardLevel(var1, 1);
         if (var2 == 0) {
            this.TextGDTString(var1, 0, iLanguage, 29, 24576 + 50, 12288 + 60, 32, 217, 16);
         } else {
            this.TextGDTString(var1, 0, iLanguage, var2 + 190 - 1, 24576 + 50, 12288 + 60, 32, 217, 16);
         }

         tcbNow.md = 350;
         tcbNow.lp = 0;
         break;
      case 350:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            tcbNow.md = 351;
            tcbNow.lp = 0;
            this.CreateWipeInOut(var1, 1);
         }
         break;
      case 351:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            if (iPlayMode == 8) {
               tcbNow.md = 786;
               tcbNow.lp = 0;
               this._FILESave(var1);
            } else if (iStage >= iStageMax) {
               tcbNow.md = 411;
               tcbNow.lp = 0;
            } else if (this.isMission(var1) == 0) {
               tcbNow.md = 300;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 185;
               tcbNow.lp = 0;
            }
         }
         break;
      case 352:
         this._TKilx(var1, 24576, 24576 + 40);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 10, 12288 + 10, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 147, 12288 + 5, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 171, 12288 + 3, 0, 0, 48);
         this.CreatePanelSingle(var1, 24576, 0, 173, 12288 + 3, 0, 0, 104);
         tcbNow._work[14] = -1;
         tcbNow.md = 353;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 353:
         var3 = tcbNow._work[14];
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow.md = 356;
            tcbNow.lp = 0;
            this.CreateWipeInOut(var1, 1);
         } else {
            for(var2 = 0; var2 < 2; ++var2) {
               if (TouchesXPos[0] > 0 && TouchesXPos[0] < 480 && TouchesYPos[0] > var2 * 56 + 48 && TouchesYPos[0] < var2 * 56 + 101 && TouchesStatus[0] != 0) {
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  tcbNow._work[14] = var2;
                  if (tcbNow._work[14] == 0) {
                     tcbNow.md = 355;
                     tcbNow.lp = 0;
                  } else {
                     tcbNow.md = 354;
                     tcbNow.lp = 0;
                  }

                  this.CreateWipeInOut(var1, 1);
                  break;
               }
            }

            if (var3 != tcbNow._work[14]) {
               this._TKilx(var1, 24576 + 2, 24576 + 2);
               this.CreatePanelSingle(var1, 24576 + 2, 0, (tcbNow._work[14] << 1) + 170, 12288 + 5, 0, 0, tcbNow._work[14] * 56 + 48);
            }
         }
         break;
      case 354:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 854;
            tcbNow.lp = 0;
         }
         break;
      case 355:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 357;
            tcbNow.lp = 0;
         }
         break;
      case 356:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 260;
            tcbNow.lp = 0;
         }
         break;
      case 357:
         if (bPause) {
            bTaskSkip = true;
            var2 = 4116;
            var3 = 24586;
         } else {
            var2 = tcbNow.prio + 1;
            var3 = tcbNow._work[1];
         }

         this._TKilx(var1, var2, var2 + 40);
         this.CreatePanelSingle(var1, var2, 0, 12, var3, 0, 0, 0);
         this.CreatePanelSingle(var1, var2, 0, 10, var3 + 10, 0, 0, 0);
         this.CreatePanelSingle(var1, var2, 0, 277, var3 + 4, 0, 0, 0);
         this.CreatePanelSingle(var1, var2, 0, 27, var3 + 5, 0, 16, 128);
         this.CreatePanelSingle(var1, var2, 0, 29, var3 + 5, 0, 464, 128);
         tcbNow._work[10] = 0;
         tcbNow.md = 358;
         tcbNow.lp = 0;
         break;
      case 358:
         if (bPause) {
            bTaskSkip = true;
            var3 = 4116;
            var2 = 24586;
         } else {
            var3 = tcbNow.prio + 1;
            var2 = tcbNow._work[1];
         }

         this._TKilx(var1, var3 + 2, var3 + 2);
         this.DrawTextClear(var1, 1);
         this.TextGDTStringAlpha(var1, 1, iLanguage, tcbNow._work[10] + 200, var3 + 2, var2 + 30, 64, 48, 16, 1);
         tcbNow.md = 359;
         tcbNow.lp = 0;
         break;
      case 359:
         if (bPause) {
            bTaskSkip = true;
         }

         this._TLoop(var1, 10, 360);
         break;
      case 360:
         if (bPause) {
            bTaskSkip = true;
         }

         var14 = 0;
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            if (!bPause) {
               tcbNow.md = 363;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 365;
               tcbNow.lp = 0;
            }
            break;
         } else {
            for(var2 = 0; var2 < 2; ++var2) {
               if (TouchesXPos[0] > var14 && TouchesXPos[0] < var14 + 48 && TouchesYPos[0] > 60 && TouchesYPos[0] < 480 && TouchesStatus[0] != 0) {
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  tcbNow._work[11] = var2;
                  if (tcbNow._work[11] == 0) {
                     var10 = tcbNow._work;
                     var10002 = var10[10]--;
                     if (tcbNow._work[10] < 0) {
                        tcbNow._work[10] = 29;
                     }
                  } else {
                     tcbNow._work[10] = (tcbNow._work[10] + 1) % 30;
                  }

                  tcbNow.md = 358;
                  tcbNow.lp = 0;
                  return;
               }

               var14 = 432;
            }

            return;
         }
      case 361:
         if (bPause) {
            bTaskSkip = true;
            var3 = 4116;
            var2 = 24586;
         } else {
            var3 = tcbNow.prio + 1;
            var2 = tcbNow._work[1];
         }

         this._TKilx(var1, var3 + 2, var3 + 2);
         this.DrawTextClear(var1, 1);
         this.TextGDTStringAlpha(var1, 1, iLanguage, tcbNow._work[10] + 200, var3 + 2, var2 + 30, 64, 48, 16, 2);
         if (tcbNow._work[11] == 0) {
            var10 = tcbNow._work;
            var10002 = var10[10]--;
            if (tcbNow._work[10] < 0) {
               tcbNow._work[10] = 29;
            }
         } else {
            tcbNow._work[10] = (tcbNow._work[10] + 1) % 30;
         }

         tcbNow.md = 362;
         tcbNow.lp = 0;
         break;
      case 362:
         if (bPause) {
            bTaskSkip = true;
         }

         this._TLoop(var1, 10, 358);
         break;
      case 363:
         if (bPause) {
            bTaskSkip = true;
         }

         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 364;
         tcbNow.lp = 0;
         break;
      case 364:
         if (bPause) {
            bTaskSkip = true;
         }

         if (iFade == 255 || iFade == 0) {
            tcbNow.md = 352;
            tcbNow.lp = 0;
            this._TKilx(var1, 8193, 65535);
         }
         break;
      case 365:
         if (bPause) {
            bTaskSkip = true;
         }

         tcbNow.md = 366;
         tcbNow.lp = 0;
         break;
      case 366:
         if (bPause) {
            bTaskSkip = true;
         }

         bTaskSkip = true;
         this._TKilx(var1, 4116, 4116 + 3);
         tcbNow.md = 846;
         tcbNow.lp = 0;
         break;
      case 367:
         this.CreatePanelSingle(var1, 24576 + 20, 5, 277, 12288 + 80, 0, 248, 28);
         this.CreateValueObjectB(var1, 24576 + 20, 410, 36, this.GetBallLine(var1), 2, 14, 230, 12288 + 82, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 73, 24576 + 20, 12288 + 80, 32, 217, 16);
         tcbNow.md = 368;
         tcbNow.lp = 0;
         break;
      case 368:
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow.md = 369;
            tcbNow.lp = 0;
         } else if (TapPullXPos[0] > 0 && TapPullXPos[0] < 480 && TapPullYPos[0] > 80 && TapPullYPos[0] < 200) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow.md = 371;
            tcbNow.lp = 0;
         }
         break;
      case 369:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 370;
         tcbNow.lp = 0;
         break;
      case 370:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 418;
            tcbNow.lp = 0;
         }
         break;
      case 371:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 372;
         tcbNow.lp = 0;
         break;
      case 372:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 373;
            tcbNow.lp = 0;
         }
         break;
      case 373:
         this._TKilx(var1, 24576, 24656);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 5, 273, 12289, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 10, 12293, 0, 0, 0);
         tcbNow._work[10] = 0;
         tcbNow._work[11] = -1;
         tcbNow._work[13] = 0;
         if (tcbNow._work[12] >= 11) {
            tcbNow._work[12] = 10;
         }

         tcbNow.md = 374;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 374:
         var2 = tcbNow._work[10];
         this._TKilx(var1, 24586, 24596);
         this.controller.Init();
         this.padID[0] = this.controller.AddPad(100, 0, 280, 320, 3, 0);
         tcbNow._work[11] = -1;
         tcbNow._work[10] = 0;
         tcbNow.md = 375;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 375:
         this.GetBallLine(var1);
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            if (iCardPreviewMode == 0) {
               tcbNow._work[14] = 0;
               tcbNow.md = 380;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 376;
               tcbNow.lp = 0;
            }
         } else {
            if (tcbNow._work[11] >= 0) {
               if (iCardPreviewMode == 0) {
                  if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
                     tcbNow._work[14] = 0;
                     tcbNow.md = 380;
                     tcbNow.lp = 0;
                  }
               } else {
                  for(var2 = 0; var2 < 2; ++var2) {
                     if (TouchesXPos[0] > 200 && TouchesXPos[0] < 280 && TouchesYPos[0] > var2 * 256 + 24 && TouchesYPos[0] < var2 * 256 + 64 && TouchesStatus[0] != 0) {
                        if (var2 == 0) {
                           if (tcbNow._work[10] > 0) {
                              var9 = tcbNow._work;
                              var10002 = var9[10]--;
                           }
                        } else if (tcbNow._work[10] < 3) {
                           var9 = tcbNow._work;
                           var10002 = var9[10]++;
                        }
                        break;
                     }
                  }
               }
            }

            if (tcbNow._work[10] != tcbNow._work[11]) {
               tcbNow._work[11] = tcbNow._work[10];
               this._TKilx(var1, 24596, 24596);
               this.DrawTextClear(var1, 0);
               if (tcbNow._work[10] != 0) {
                  this.CreatePanelSingle(var1, 24596, 0, 270, 12348, 0, 240, 30);
               }

               if (tcbNow._work[10] != 3) {
                  this.CreatePanelSingle(var1, 24596, 0, 271, 12348, 0, 240, 276);
               }

               for(var2 = 0; var2 < 4; ++var2) {
                  var3 = tcbNow._work[10] + var2;
                  if (var3 >= 7) {
                     return;
                  }

                  var11 = this.GetBall(var1, var3);
                  if (iCardPreviewMode == 0) {
                     if (tcbNow._work[12] >= var11) {
                        this.CreatePanelSingle(var1, 24596, 5, var3 + 281, 12341, 0, 32, var2 * 56 + 92);
                     } else if (BallGetCount[var2] > 0) {
                        this.CreatePanelSingle(var1, 24596, 5, var3 + 301, 12341, 0, 32, var2 * 56 + 92);
                     } else {
                        this.CreatePanelSingle(var1, 24596, 5, var3 + 291, 12341, 0, 32, var2 * 56 + 92);
                     }

                     if (BallGetCount[var2] > 0) {
                        this.CreatePanelSingle(var1, 24596, 0, 268, 12338, 0, 0, var2 * 56 + 68);
                     } else {
                        this.CreatePanelSingle(var1, 24596, 0, 267, 12338, 0, 0, var2 * 56 + 68);
                     }
                  } else {
                     if (tcbNow._work[12] >= var11) {
                        this.CreatePanelSingle(var1, 24596, 5, var3 + 281, 12341, 0, 32, var2 * 56 + 92);
                     } else {
                        this.CreatePanelSingle(var1, 24596, 5, var3 + 291, 12341, 0, 32, var2 * 56 + 92);
                     }

                     this.CreatePanelSingle(var1, 24596, 0, 267, 12338, 0, 0, var2 * 56 + 68);
                  }

                  this.GDTString(var1, 0, this.GameData_TextPage[iLanguage * 3 + 2], tcbNow._work[12] * 7 + tcbNow._work[10] + var2, 24596, 12339, 80, var2 * 56 + 76, 16);
               }
            }
         }
         break;
      case 376:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 377;
         tcbNow.lp = 0;
         break;
      case 377:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 1115;
            tcbNow.lp = 0;
         }
         break;
      case 378:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 379;
         tcbNow.lp = 0;
         break;
      case 379:
         if (iFade == 255 || iFade == 0) {
            tcbNow.md = 322;
            tcbNow.lp = 0;
         }
         break;
      case 380:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 381;
         tcbNow.lp = 0;
         break;
      case 381:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 24586, 24596);
            tcbNow.md = 382;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 382:
         tcbNow._work[10] = iGetCardNo;
         if (iPlayMode == 8) {
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 383;
            tcbNow.lp = 0;
         } else {
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 351;
            tcbNow.lp = 0;
         }
         break;
      case 383:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 786;
            tcbNow.lp = 0;
         }
         break;
      case 384:
         this._TKilx(var1, 24576, 24576 + 40);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 10, 12288 + 10, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 1, 50, 12288 + 5, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 1, 52, 12288 + 3, 0, 128, 64);
         this.CreatePanelSingle(var1, 24576, 1, 54, 12288 + 3, 0, 128, 101);
         this.CreatePanelSingle(var1, 24576, 1, 56, 12288 + 3, 0, 128, 138);
         this.CreatePanelSingle(var1, 24576, 0, 90, 12288 + 5, 0, 8, 200);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 9, 24576, 12288 + 6, 80, 216, 16);
         tcbNow._work[14] = -1;
         tcbNow.md = 385;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 385:
         var2 = tcbNow._work[14];
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow.md = 260;
            tcbNow.lp = 0;
         } else {
            for(var2 = 0; var2 < 3; ++var2) {
               if (TouchesXPos[0] > 128 && TouchesXPos[0] < 352 && TouchesYPos[0] > var2 * 37 + 64 && TouchesYPos[0] < var2 * 37 + 101 && TouchesStatus[0] != 0) {
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  tcbNow._work[14] = var2;
                  iDifficulty = var2;
                  tcbNow.md = 386;
                  tcbNow.lp = 0;
                  break;
               }
            }

            if (tcbNow._work[14] >= 0) {
               this._TKilx(var1, 24576 + 2, 24576 + 2);
               tcbEffect[0] = this.CreatePanelSingle(var1, 24576 + 2, 1, (tcbNow._work[14] << 1) + 53, 12288 + 5, 0, 128, tcbNow._work[14] * 37 + 64);
            }
         }
         break;
      case 386:
         if ((tcbEffect[0].obj.wActFlag & 2) != 0) {
            this._TKilx(var1, 24576 + 2, 24576 + 2);
            tcbNow.md = 387;
            tcbNow.lp = 0;
         }
         break;
      case 387:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 388;
         tcbNow.lp = 0;
         break;
      case 388:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 284;
            tcbNow.lp = 0;
         }
         break;
      case 389:
         for(var2 = 1; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         LoadData[3] = PlayerType[iPlayerNo];
         LoadFilter[3] = 251;
         this.SetLoad(var1, true);
         if (iStage >= iStageMax && this.ChrGameData[iPlayerNo + 3].piGameData[this.ChrGameData[iPlayerNo + 3].piGameDataPos[41] + iDifficulty * this.ChrGameData[iPlayerNo + 3].piGameDataXSize[41] + 0] != 0) {
            tcbNow._work[10] = 0;
            tcbNow._work[11] = 0;
            tcbNow.md = 390;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         } else {
            tcbNow.md = 400;
            tcbNow.lp = 0;
         }
         break;
      case 390:
         var3 = this.ChrGameData[iPlayerNo + 3].piGameData[this.ChrGameData[iPlayerNo + 3].piGameDataPos[41] + iDifficulty * this.ChrGameData[iPlayerNo + 3].piGameDataXSize[41] + tcbNow._work[10]] - 1;
         if (var3 < 0) {
            if (this.isMission(var1) != 0) {
               if (tcbNow._work[11] != 0) {
                  this.CreateWipeInOut(var1, 1);
               }

               tcbNow.md = 399;
               tcbNow.lp = 0;
            } else {
               this._TKilx(var1, 8193, 65535);
               this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
               this.CreatePanelSingle(var1, 24576, 0, 89, 12288 + 15, 0, 8, 200);
               tcbNow.md = 396;
               tcbNow.lp = 0;
            }
         } else if (this.CharOpen(var1, var3) != 0) {
            this._FILESave(var1);

            for(var2 = 1; var2 < 31; ++var2) {
               LoadData[var2] = -1;
            }

            LoadData[3] = PlayerType[iPlayerNo];
            LoadFilter[3] = 251;
            LoadData[4] = var3;
            LoadFilter[4] = 251;
            LoadData[7] = var3;
            this.SetLoad(var1, true);
            if (tcbNow._work[11] == 0) {
               tcbNow.md = 391;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 393;
               tcbNow.lp = 0;
            }

            tcbNow._work[11] = 1;
         }

         var10 = tcbNow._work;
         var10002 = var10[10]++;
         break;
      case 391:
         this._TKilx(var1, 8193, 65535);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 89, 12288 + 15, 0, 8, 200);
         tcbNow.md = 392;
         tcbNow.lp = 0;
         break;
      case 392:
         this._TLoop(var1, 10, 393);
         break;
      case 393:
         this._TKilx(var1, 24576 + 10, 24576 + 10);
         this.CharGDTString(var1, 0, 1, this.CharData_TextPage[iLanguage], 1, 24576 + 10, 12288 + 20, 32, 217, 16);
         this.CreatePanelSingle(var1, 24576 + 10, 7, 14, 12288 + 10, 0, 0, 0);
         tcbNow.md = 394;
         tcbNow.lp = 0;
         break;
      case 394:
         this._TLoop(var1, 10, 395);
         break;
      case 395:
         if (TouchesXPos[0] > 0) {
            this._TKilx(var1, 24576 + 10, 24576 + 10);
            tcbNow.md = 390;
            tcbNow.lp = 0;
         }
         break;
      case 396:
         this._TKilx(var1, 24576 + 10, 24576 + 10);
         this.TextGDTString(var1, 0, iLanguage, 258, 24576 + 10, 12288 + 20, 32, 217, 16);
         tcbNow.md = 397;
         tcbNow.lp = 0;
         break;
      case 397:
         this._TLoop(var1, 20, 398);
         break;
      case 398:
         if (TouchesXPos[0] > 0) {
            this.CreateWipeInOut(var1, 1);
            this._TKilx(var1, 24576 + 10, 24576 + 10);
            tcbNow.md = 399;
            tcbNow.lp = 0;
         }
         break;
      case 399:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 400;
            tcbNow.lp = 0;
         }
         break;
      case 400:
         if (this.isMission(var1) == 0 && iStage < 7) {
            tcbNow.md = 407;
            tcbNow.lp = 0;
         } else {
            this.MissionClear(var1);
            this._FILESave(var1);
            this._TKilx(var1, 8193, 65535);
            this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576, 0, 266, 12288 + 1, 0, 0, 0);
            this.TextGDTString(var1, 0, iLanguage, 259, 24576 + 1, 12288 + 5, 144, 139, 16);
            tcbNow.md = 401;
            tcbNow.lp = 0;
         }
         break;
      case 401:
         this._TLoop(var1, 120, 407);
         break;
      case 402:
         this._TKilx(var1, 24576, 24576 + 40);

         for(var2 = 1; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         LoadData[5] = 1;
         this.SetLoad(var1, true);
         this.GdtBGM(var1, 25);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 274, 12288 + 3, 0, 0, 0);
         this.TextGDTString(var1, 0, iLanguage, 257, 24576 + 20, 12288 + 85, 62, 112, 16);
         this.TextGDTString(var1, 0, iLanguage, 11, 24576 + 20, 12288 + 85, 98, 236, 16);
         this.TextGDTString(var1, 0, iLanguage, 12, 24576 + 20, 12288 + 85, 340, 236, 16);
         tcbNow._work[14] = -1;
         tcbNow.md = 403;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 403:
         var2 = tcbNow._work[14];
         var14 = 306;

         for(var2 = 0; var2 < 2; ++var2) {
            if (TouchesXPos[0] > var14 && TouchesXPos[0] < var14 + 120 && TouchesYPos[0] > 220 && TouchesYPos[0] < 220 + 50 && TouchesStatus[0] != 0) {
               iReqSENo = 0;
               this.PushSE(var1, 0);
               tcbNow._work[14] = var2;
               tcbNow.md = 404;
               tcbNow.lp = 0;
               break;
            }

            var14 = 60;
         }

         if (tcbNow._work[14] >= 0) {
            this._TKilx(var1, 24676, 24676);
            this.CreatePanelSingle(var1, 24676, 0, tcbNow._work[14] + 255, 12338 + 3, 0, 0, 0);
         }
         break;
      case 404:
         this._TLoop(var1, 45, 405);
         break;
      case 405:
         this._TKilx(var1, 24676, 24676 + 20);
         if (tcbNow._work[14] == 0) {
            if (this.isMission(var1) == 0) {
               this.MissionLoad(var1);
            }

            tcbNow.md = 411;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 406;
            tcbNow.lp = 0;
            this.CreateWipeInOut(var1, 1);
         }
         break;
      case 406:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            if (this.isMission(var1) == 0) {
               this.MissionLoad(var1);
            } else {
               this._FILELoad(var1);
               --iStage;
            }

            iMarkVisible = 0;
            Score[0] = 0;
            Score[1] = 0;
            WinPoint[0] = 0;
            WinPoint[1] = 0;
            iRound = 0;
            tcbNow.md = 712;
            tcbNow.lp = 0;
         }
         break;
      case 407:
         this._TKilx(var1, 24576, 24576 + 40);
         if (this.isMission(var1) == 0) {
            tcbNow.md = 260;
            tcbNow.lp = 0;
         } else {
            for(var2 = 1; var2 < 31; ++var2) {
               LoadData[var2] = -1;
            }

            LoadData[5] = 1;
            this.SetLoad(var1, true);
            this.GdtBGM(var1, 25);
            this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576 + 1, 5, 90, 12288 + 5, 0, 0, 0);
            tcbNow.md = 408;
            tcbNow.lp = 0;
         }
         break;
      case 408:
         this._TLoop(var1, 10, 409);
         break;
      case 409:
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0]) || TouchesXPos[0] > 0) {
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 410;
            tcbNow.lp = 0;
         }
         break;
      case 410:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 260;
            tcbNow.lp = 0;
         }
         break;
      case 411:
         if (this.isMission(var1) == 0) {
            tcbNow.md = 389;
            tcbNow.lp = 0;
         } else {
            tcbNow._work[17] = -1;

            for(var2 = 0; var2 < 7; ++var2) {
               var3 = var2 * 6 + 11820;
               if (((ConfigData[var3 + 0] & 255) << 16) + ((ConfigData[var3 + 1] & 255) << 8) + (ConfigData[var3 + 2] & 255) <= Score[iPlayerNo]) {
                  tcbNow._work[17] = var2;
                  break;
               }
            }

            if (tcbNow._work[17] >= 0) {
               for(var2 = 5; var2 >= tcbNow._work[17]; --var2) {
                  var11 = var2 * 6 + 11820;
                  var3 = (var2 + 1) * 6 + 11820;
                  ConfigData[var3 + 0] = ConfigData[var11 + 0];
                  ConfigData[var3 + 1] = ConfigData[var11 + 1];
                  ConfigData[var3 + 2] = ConfigData[var11 + 2];
                  ConfigData[var3 + 3] = ConfigData[var11 + 3];
                  ConfigData[var3 + 4] = ConfigData[var11 + 4];
                  ConfigData[var3 + 5] = ConfigData[var11 + 5];
               }

               var2 = tcbNow._work[17] * 6 + 11820;
               ConfigData[var2 + 0] = (byte)(Score[iPlayerNo] >> 16);
               ConfigData[var2 + 1] = (byte)(Score[iPlayerNo] >> 8);
               ConfigData[var2 + 2] = (byte)(Score[iPlayerNo] & 255);
               ConfigData[var2 + 3] = (byte)this.GetLevel(var1, PlayerType[iPlayerNo]);
               ConfigData[var2 + 4] = (byte)iStage;
               ConfigData[var2 + 5] = (byte)PlayerType[iPlayerNo];
               tcbNow.md = 412;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
            } else {
               tcbNow.md = 389;
               tcbNow.lp = 0;
            }
         }
         break;
      case 412:
         this._TKilx(var1, 24576, 24576 + 40);

         for(var2 = 1; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         for(var2 = 0; var2 < 7; ++var2) {
            byte var12 = ConfigData[var2 * 6 + 11820 + 5];
            LoadData[var2 + 6] = var12;
         }

         LoadData[5] = 1;
         this.SetLoad(var1, true);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 5, 60, 12288 + 5, 0, 0, 0);
         if (iPlayMode == 5) {
            tcbNow._work[17] = -1;
            this.CreatePanelSingle(var1, 24576, 0, 10, 12288 + 6, 0, 0, 0);
         } else {
            this.CreatePanelSingle(var1, 24576, 0, 36, 12288 + 6, 0, 400, 23);
         }

         tcbNow.md = 413;
         tcbNow.lp = 0;
         break;
      case 413:
         tcbNow._work[16] = 480;
         tcbNow._work[15] = 528;
         tcbNow._work[14] = 576;
         tcbNow._work[13] = 624;
         tcbNow._work[12] = 672;
         tcbNow._work[11] = 720;
         tcbNow._work[10] = 768;
         tcbNow.md = 414;
         tcbNow.lp = 0;
         break;
      case 414:
         for(var2 = 0; var2 < 7; ++var2) {
            var9 = tcbNow._work;
            var3 = var2 + 10;
            var9[var3] -= 24;
            if (tcbNow._work[var2 + 10] <= 0) {
               tcbNow._work[var2 + 10] = 0;
            }
         }

         if (tcbNow._work[10] <= 0) {
            tcbNow.md = 415;
            tcbNow.lp = 0;
         }

         this._TKilx(var1, 24596, 24596);
         var3 = 46;

         for(var2 = 0; var2 < 7; ++var2) {
            int var7 = var2 * 6 + 11820;
            byte var5 = ConfigData[var7 + 0];
            byte var4 = ConfigData[var7 + 1];
            byte var6 = ConfigData[var7 + 2];
            byte var10000 = ConfigData[var7 + 3];
            var10000 = ConfigData[var7 + 4];
            var10000 = ConfigData[var7 + 5];
            if (tcbNow._work[17] == var2) {
               this.CreatePanelSingle(var1, 24596, 5, var2 + 71, 12338, 0, tcbNow._work[var2 + 10], var3);
            } else {
               this.CreatePanelSingle(var1, 24596, 5, var2 + 61, 12338, 0, tcbNow._work[var2 + 10], var3);
            }

            this.CreatePanelSingle(var1, 24596, var2 + 6, this.CharAct_Name[iLanguage + 8], 12339, 0, tcbNow._work[var2 + 10], var3);
            this.CreateValueObjectB(var1, 24596, tcbNow._work[var2 + 10] + 360, var3 + 7, ((var5 & 255) << 16) + ((var4 & 255) << 8) + (var6 & 255), 7, 14, 100, 12339, 0, 0, 0);
            var3 += 37;
         }

         return;
      case 415:
         this._TLoop(var1, 10, 416);
         break;
      case 416:
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0]) || TouchesXPos[0] > 0) {
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 417;
            tcbNow.lp = 0;
         }
         break;
      case 417:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            if (iPlayMode == 5) {
               tcbNow.md = 260;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 389;
               tcbNow.lp = 0;
            }
         }
         break;
      case 418:
         this._TKilx(var1, 8193, 65535);

         for(var2 = 1; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         LoadData[5] = 1;
         this.SetLoad(var1, true);
         tcbNow._work[14] = -1;
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 5, 260, 12288 + 2, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 10, 12288 + 5, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576 + 10, 5, 261, 12288 + 3, 0, 144, 48);
         this.CreatePanelSingle(var1, 24576 + 10, 5, 263, 12288 + 3, 0, 144, 48 + 48);
         this.CreatePanelSingle(var1, 24576 + 10, 5, 265, 12288 + 3, 0, 144, 48 + 96);
         this.CreatePanelSingle(var1, 24576 + 10, 5, 267, 12288 + 3, 0, 144, 48 + 144);
         this.CreatePanelSingle(var1, 24576 + 10, 5, 278, 12288 + 3, 0, 144, 48 + 192);
         tcbNow.md = 419;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 419:
         this._TLoop(var1, 10, 420);
         break;
      case 420:
         this._TKilx(var1, 24576 + 30, 24576 + 30);
         tcbNow.md = 421;
         tcbNow.lp = 0;
         break;
      case 421:
         var2 = tcbNow._work[14];
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 425;
            tcbNow.lp = 0;
         } else {
            var3 = 48;

            for(var2 = 0; var2 < 5; ++var2) {
               if (TouchesXPos[0] > 100 && TouchesXPos[0] < 400 && TouchesYPos[0] > var3 && TouchesYPos[0] < var3 + 48 && TouchesStatus[0] != 0) {
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  tcbNow._work[14] = var2;
                  tcbNow.md = 422;
                  tcbNow.lp = 0;
                  break;
               }

               var3 += 48;
            }

            if (tcbNow._work[14] >= 0) {
               this._TKilx(var1, 24576 + 20, 24576 + 20);
               if (tcbNow._work[14] != 4) {
                  this.CreatePanelSingle(var1, 24576 + 20, 5, (tcbNow._work[14] << 1) + 262, 12288 + 5, 0, 144, tcbNow._work[14] * 48 + 48);
               } else {
                  this.CreatePanelSingle(var1, 24576 + 20, 5, 279, 12288 + 5, 0, 144, tcbNow._work[14] * 48 + 48);
               }
            }
         }
         break;
      case 422:
         this._TLoop(var1, 45, 423);
         break;
      case 423:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 424;
         tcbNow.lp = 0;
         break;
      case 424:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            switch(tcbNow._work[14]) {
            case 0:
               tcbNow.md = 1003;
               tcbNow.lp = 0;
               iChrSelectMode = 1;
               break;
            case 1:
               iCardPreviewMode = 0;
               this.InitCharAttr(var1);
               tcbNow.md = 1101;
               tcbNow.lp = 0;
               break;
            case 2:
               iCardPreviewMode = 1;
               iBallPreviewPage = 0;
               tcbNow.md = 1115;
               tcbNow.lp = 0;
               break;
            case 3:
               iCardPreviewMode = 2;
               tcbNow.md = 126;
               tcbNow.lp = 0;
               break;
            case 4:
               iCardPreviewMode = 1;
               tcbNow.md = 1054;
               tcbNow.lp = 0;
            }

            tcbNow._work[14] = -1;
         }
         break;
      case 425:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8192, 65535);
            this._TaskMake(var1, 260, 8192);
            this.GdtBGM(var1, 0);
         }
      }

   }

   public void Game15(GlobalWork var1, int var2) {
      int var3;
      short var4;
      short var5;
      int[] var7;
      int[] var9;
      int var10;
      int var11;
      int var10002;
      switch(var2) {
      case 0:
      case 629:
      default:
         break;
      case 630:
         var3 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         tcbNow._work[0] = -1;
         tcbNow._work[1] = -1;
         SpecialPushAno[var3] = this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[34] + this.ChrGameData[var3 + 3].piGameDataXSize[34] * 0 + 0];
         SpecialPushAno[var2] = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[34] + this.ChrGameData[var2 + 3].piGameDataXSize[34] * 0 + 0];
         tcbNow.md = 631;
         tcbNow.lp = 0;
         break;
      case 631:
         var2 = iPlayerNo;
         var3 = 1 - iPlayerNo;
         if (tcbPlayer[0] != null && tcbPlayer[1] != null && tcbPlayer[0].obj != null && tcbPlayer[1].obj != null && (iEventStatus & 1) == 0 && iTimer > 0 && tcbNow._work[0] != tcbPlayer[var2].obj.ano && tcbNow._work[1] != tcbPlayer[var3].obj.ano && (iPlayMode != 2 || PracticeSetting[2] == 0)) {
            tcbNow._work[0] = -1;
            tcbNow._work[1] = -1;
            if (iPlayMode != 8) {
               if (tcbPlayer[var2].obj.ano == SpecialPushAno[var2]) {
                  tcbNow._work[0] = tcbPlayer[var2].obj.ano;
                  if (this.PushCheck(var1, 0, var3)) {
                     iMarkVisible = 1;
                     iPlayerIndex[0] = var2;
                     iPlayerIndex[1] = var3;
                     tcbNow.md = 641;
                     tcbNow.lp = 0;
                     iEventStatus |= 1;
                     this.Game(var1, tcbNow.md);
                     return;
                  }
               }

               if (tcbPlayer[var3].obj.ano == SpecialPushAno[var3]) {
                  tcbNow._work[1] = tcbPlayer[var3].obj.ano;
                  if (this.PushCheck(var1, 1, var2)) {
                     iPlayerIndex[0] = var2;
                     iPlayerIndex[1] = var3;
                     tcbNow._work[20] = 0;
                     iKeylockStatus = 0;
                     this._TKilx(var1, 12624, 12624);
                     this._TaskMake(var1, 670, 12624)._work[0] = CPURand[0] % 4;
                     iMarkVisible = 1;
                     iEventStatus |= 1;
                     tcbNow.md = 632;
                     tcbNow.lp = 0;
                     this.Game(var1, tcbNow.md);
                  }
               }
            } else {
               if (tcbPlayer[var2].obj.ano == SpecialPushAno[var2]) {
                  bEventFlag[0] = 0;
                  bEventFlag[1] = 0;
                  tcbNow._work[0] = tcbPlayer[var2].obj.ano;
                  if (this.PushCheck(var1, 1, var3)) {
                     iMarkVisible = 1;
                     iEventStatus |= 1;
                     bEventValueBuf[1] = 0;
                     tcbNow._work[20] = 0;
                     iPlayerIndex[0] = var2;
                     iPlayerIndex[1] = var3;
                     tcbNow.md = 636;
                     tcbNow.lp = 0;
                  }
               }

               if (tcbPlayer[var3].obj.ano == SpecialPushAno[var3]) {
                  bEventFlag[0] = 0;
                  bEventFlag[1] = 0;
                  tcbNow._work[1] = tcbPlayer[var3].obj.ano;
                  if (this.PushCheck(var1, 1, var2)) {
                     iPlayerIndex[0] = var3;
                     iPlayerIndex[1] = var2;
                     bEventValueBuf[1] = 0;
                     tcbNow._work[20] = 0;
                     iKeylockStatus = 0;
                     this._TKilx(var1, 12624, 12624);
                     this._TaskMake(var1, 670, 12624)._work[0] = CPURand[0] % 4;
                     iMarkVisible = 1;
                     iEventStatus |= 1;
                     tcbNow.md = 632;
                     tcbNow.lp = 0;
                     this.Game(var1, tcbNow.md);
                  }
               }
            }
         }
         break;
      case 632:
         var2 = iPlayerNo;
         var2 = iPlayerNo;
         var7 = tcbNow._work;
         var10002 = var7[20]++;
         if ((110 > tcbNow._work[20] || iKeylockStatus == 1) && iKeylockStatus != -1) {
            if (iKeylockStatus == 1) {
               this._TKilx(var1, 12624, 12624);
               tcbNow.md = 633;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
            }
         } else {
            this._TKilx(var1, 12624, 12632);
            iMarkVisible = 0;
            iEventStatus &= -2;
            bEventFlagSend = true;
            bEventFlagBuf = 1;
            tcbNow.md = 631;
            tcbNow.lp = 0;
         }
         break;
      case 633:
         var10 = iPlayerNo;
         var11 = 1 - iPlayerNo;
         if (110 <= tcbNow._work[20]) {
            this._TKilx(var1, 13632, 13633);
            tcbNow._work[2] = -1;
            tcbNow._work[3] = -1;
            if (iPlayMode != 8) {
               var3 = tcbPlayer[0].obj.prio - tcbPlayer[0].obj.iActPrio;
               var2 = tcbPlayer[1].obj.prio - tcbPlayer[1].obj.iActPrio;
               if (var3 <= var2) {
                  var2 = var3;
               }

               this.CreatePanelSingle(var1, 12624, 5, 143, var2 - 10, 0, 0, 0);
               iPushTarget = var11;
               tcbPlayer[var11].md = 437;
               tcbPlayer[var10].md = 429;
               _cameraPrio = 0;
               tcbNow.md = 634;
               tcbNow.lp = 0;
            } else {
               bEventFlagSend = true;
               bEventFlagBuf = 2;
               bEventFlag[var10] = 2;
               tcbNow.md = 637;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
            }
         }

         var9 = tcbNow._work;
         var10002 = var9[20]++;
         break;
      case 634:
         var2 = iPlayerNo;
         var2 = iPlayerNo;
         if ((tcbPlayer[1].obj.wActFlag & 2) != 0) {
            tcbPlayer[1].md = 429;
            iPushTarget = 0;
            this.SYNCHRO_DEC(var1, 0, 100);
            tcbPlayer[0].md = 432;
            tcbNow.md = 635;
            tcbNow.lp = 0;
         }
         break;
      case 635:
         var2 = iPlayerNo;
         var2 = iPlayerNo;
         if ((tcbPlayer[0].obj.wActFlag & 2) != 0) {
            tcbPlayer[0].md = 429;
            tcbPlayer[1].md = 429;
            if (iPlayMode != 8) {
               tcbNow.md = 648;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 638;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
            }
         }
         break;
      case 636:
         var2 = iPlayerIndex[0];
         var2 = iPlayerIndex[1];
         if (bEventFlag[var2] == 1) {
            iEventStatus &= -2;
            iMarkVisible = 0;
            tcbNow.md = 631;
            tcbNow.lp = 0;
         } else if (bEventFlag[var2] == 2) {
            bEventFlagSend = true;
            bEventFlagBuf = 2;
            tcbNow.md = 637;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 637:
         var2 = iPlayerIndex[0];
         var3 = iPlayerIndex[1];
         bEventValueBuf[0] = 2;
         if (bEventValue[var2][0] == 2 && bEventValue[var3][0] == 2) {
            bEventValue[var2][0] = 0;
            bEventValue[var2][1] = 0;
            bEventValue[var2][2] = 0;
            bEventValue[var3][0] = 0;
            bEventValue[var3][1] = 0;
            bEventValue[var3][2] = 0;
            bEventFlag[var2] = 0;
            bEventFlag[var3] = 0;
            tcbNow.md = 640;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 640:
         var11 = iPlayerIndex[0];
         var10 = iPlayerIndex[1];
         this._TKilx(var1, 13632, 13633);
         bBackVisible = false;
         var3 = tcbPlayer[var11].obj.prio - tcbPlayer[var11].obj.iActPrio;
         var2 = tcbPlayer[var10].obj.prio - tcbPlayer[var10].obj.iActPrio;
         if (var3 <= var2) {
            var2 = var3;
         }

         this.CreatePanelSingle(var1, 12624, 5, 143, var2 - 10, 0, 0, 0);
         tcbNow._work[2] = -1;
         tcbNow._work[3] = -1;
         tcbPlayer[var10].md = 429;
         iPushTarget = var11;
         tcbPlayer[var11].md = 437;
         tcbNow.md = 642;
         tcbNow.lp = 0;
         break;
      case 641:
         var11 = iPlayerIndex[0];
         var10 = iPlayerIndex[1];
         this._TKilx(var1, 13632, 13633);
         bBackVisible = false;
         var3 = tcbPlayer[var11].obj.prio - tcbPlayer[var11].obj.iActPrio;
         var2 = tcbPlayer[var10].obj.prio - tcbPlayer[var10].obj.iActPrio;
         if (var3 <= var2) {
            var2 = var3;
         }

         this.CreatePanelSingle(var1, 12624, 5, 143, var2 - 10, 0, 0, 0);
         tcbNow._work[2] = -1;
         tcbNow._work[3] = -1;
         tcbPlayer[var10].md = 429;
         iPushTarget = var11;
         tcbPlayer[var11].md = 433;
         tcbNow.md = 642;
         tcbNow.lp = 0;
         break;
      case 642:
         var2 = iPlayerIndex[0];
         var3 = iPlayerIndex[1];
         if ((tcbPlayer[var2].obj.wActFlag & 2) != 0) {
            this._TKilx(var1, 13632, 13633);
            iPushTarget = var3;
            tcbPlayer[var3].md = 432;
            iMarkVisible = 1;
            this.SYNCHRO_DEC(var1, var3, 100);
            tcbPlayer[var2].md = 429;
            tcbNow.md = 643;
            tcbNow.lp = 0;
         }
         break;
      case 643:
         var2 = iPlayerIndex[0];
         var2 = iPlayerIndex[1];
         if ((tcbPlayer[var2].obj.wActFlag & 2) != 0) {
            tcbPlayer[var2].md = 429;
            tcbNow.md = 648;
            tcbNow.lp = 0;
         }
         break;
      case 644:
         var2 = tcbNow.prio;
         tcbNow._work[0] = -1;
         this.CreatePanel(var1, var2 + 1, 4096, 0, 205, 0, 9109504, 13041664, 0, 0, 0, 0, 0, 0, 13172736, 655360);
         tcbNow.md = 645;
         tcbNow.lp = 0;
         break;
      case 645:
         var2 = iPlayerNo;
         var10 = tcbNow.prio + 2;
         if (tcbNow._work[0] != pushCounter[var2]) {
            tcbNow._work[0] = pushCounter[var2];
            var3 = tcbNow._work[0] * 200 / 100;
            this._TKilx(var1, var10, var10);
            if (iPlayerIndex[var2] == 0) {
               this.CreatePanel(var1, var10, 4096, 16711680, 206, 0, 9175040, 13107200, 0, 0, 0, 0, 0, 0, var3 << 16, 524288);
            } else {
               this.CreatePanel(var1, var10, 4096, 16711680, 206, 0, 340 - var3 << 16, 13107200, 0, 0, 0, 0, 0, 0, var3 << 16, 524288);
            }
         }
         break;
      case 646:
         tcbNow._work[0] = iPushTimer - 1;
         tcbNow.md = 647;
         tcbNow.lp = 0;
         break;
      case 647:
         var2 = tcbNow.prio + 1;
         if (tcbNow._work[0] != iPushTimer) {
            tcbNow._work[0] = iPushTimer;
            this._TKilx(var1, var2, var2);
            this.CreateValueObjectB(var1, var2, tcbNow._work[2], tcbNow._work[3], iPushTimer, 2, 28, 280, 12348, 0, 5, 0);
         }
         break;
      case 648:
         var3 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         bBackVisible = false;
         _cameraPrio = 0;
         iCameraLock = -1;
         if (tcbPlayer[var3].obj.x < tcbPlayer[var2].obj.x) {
            iPlayerIndex[0] = var3;
            iPlayerIndex[1] = var2;
         } else {
            iPlayerIndex[0] = var2;
            iPlayerIndex[1] = var3;
         }

         this._TKilx(var1, 13633, 13634);
         this._TKilx(var1, 12625, 12634);
         this.CreatePanelSingle(var1, 12625, iPlayerIndex[0] + 3, 265, 201, 0, -48, 160)._work[20] = iPlayerIndex[0] + 1;
         this.CreatePanelSingle(var1, 12625, iPlayerIndex[1] + 3, 268, 201, 0, 528, 160)._work[20] = iPlayerIndex[1] + 1;
         this.CreatePanelSingle(var1, 12626, iPlayerIndex[0] + 3, 278, 327, 0, 0, 0);
         this.CreatePanelSingle(var1, 12626, iPlayerIndex[1] + 3, 279, 327, 16, 480, 0);
         tcbNow.md = 649;
         tcbNow.lp = 0;
         break;
      case 649:
         this._TLoop(var1, 15, 650);
         break;
      case 650:
         this._TKilx(var1, 12625, 12625);
         this.CreatePanelSingle(var1, 12624, 5, 274, 205, 0, 160, 230);
         tcbEffect[0] = this.CreatePanelSingle(var1, 12625, iPlayerIndex[0] + 3, 266, 201, 0, 240, 160);
         tcbEffect[0]._work[20] = iPlayerIndex[0] + 1;
         tcbEffect[1] = this.CreatePanelSingle(var1, 12625, iPlayerIndex[1] + 3, 269, 201, 0, 240, 160);
         tcbEffect[1]._work[20] = iPlayerIndex[1] + 1;
         this._TaskMake(var1, 644, 12630);
         this._TaskMake(var1, 668, 12629);
         this._TaskMake(var1, 666, 12628)._work[0] = 9;
         TCB var13 = this._TaskMake(var1, 646, 12633);
         var13._work[2] = 240;
         var13._work[3] = 150;
         this.CreatePanelSingle(var1, 12633, 5, 319, 12340, 0, 180, 160);
         tcbNow._work[9] = 0;
         tcbNow.md = 651;
         tcbNow.lp = 0;
         break;
      case 651:
         var3 = iPlayerNo;
         var2 = iPlayerNo;
         if (tcbNow._work[9] % 20 == 0) {
            iReqSENo = 14;
            this.PushSE(var1, 14);
         }

         var7 = tcbNow._work;
         var10002 = var7[9]++;
         if (iPlayerIndex[0] == 0) {
            tcbEffect[0].obj.x = (pushCounter[0] - 50 << 2) + 240 << 16;
            tcbEffect[1].obj.x = (pushCounter[0] - 50 << 2) + 240 << 16;
         } else {
            tcbEffect[0].obj.x = 240 - (pushCounter[0] - 50 << 2) << 16;
            tcbEffect[1].obj.x = 240 - (pushCounter[0] - 50 << 2) << 16;
         }

         if (pushCounter[var3] <= 0 || pushCounter[var3] >= 100 || iPushTimer == 0) {
            this.CreateWipeInOut(var1, 1);
            iFadeR = 255;
            iFadeG = 255;
            iFadeB = 255;
            tcbNow.md = 652;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 652:
         var3 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         if (pushCounter[var3] == 50 || pushCounter[var3] == pushCounter[var2]) {
            if (var3 == 0) {
               var9 = pushCounter;
               var10002 = var9[var3]++;
               var9 = pushCounter;
               var10002 = var9[var2]--;
            } else {
               var9 = pushCounter;
               var10002 = var9[var3]--;
               var9 = pushCounter;
               var10002 = var9[var2]++;
            }
         }

         tcbNow.md = 656;
         tcbNow.lp = 0;
         if (pushCounter[var3] <= 50) {
            if (this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[34] + this.ChrGameData[var2 + 3].piGameDataXSize[34] * 1 + 0] == 0) {
               tcbNow.md = 653;
               tcbNow.lp = 0;
            }
         } else if (this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[34] + this.ChrGameData[var3 + 3].piGameDataXSize[34] * 1 + 0] == 0) {
            tcbNow.md = 653;
            tcbNow.lp = 0;
         }
         break;
      case 653:
         var3 = iPlayerNo;
         var2 = iPlayerNo;
         if (iFade == 255 || iFade == 0) {
            iCameraLock = 4;
            this._TKilx(var1, 12624, 12634);
            this.CreatePanelSingle(var1, 12624, 5, 147, 201, 0, 0, 0);
            if (pushCounter[var3] <= 50) {
               this.CreatePanelSingle(var1, 12624, 1 - var2 + 3, 280, 201, 0, 0, 0)._work[20] = iPlayerIndex[1] + 1;
            } else {
               this.CreatePanelSingle(var1, 12624, var3 + 3, 280, 201, 0, 0, 0)._work[20] = iPlayerIndex[0] + 1;
            }

            this.CreateWipeInOut(var1, 0);
            iFadeR = 255;
            iFadeG = 255;
            iFadeB = 255;
            tcbNow.md = 654;
            tcbNow.lp = 0;
         }
         break;
      case 654:
         this._TLoop(var1, 90, 655);
         break;
      case 655:
         this.CreateWipeInOut(var1, 1);
         iFadeR = 255;
         iFadeG = 255;
         iFadeB = 255;
         tcbNow.md = 657;
         tcbNow.lp = 0;
         break;
      case 656:
         if (iFade == 255 || iFade == 0) {
            iCameraLock = 3;
            iFade = 254;
            tcbNow.md = 657;
            tcbNow.lp = 0;
         }
         break;
      case 657:
         if (iPlayMode == 8) {
            bEventValueBuf[0] = 100;
            tcbNow.md = 659;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         } else {
            tcbNow.md = 659;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 658:
         tcbNow.md = 659;
         tcbNow.lp = 0;
         break;
      case 659:
         var3 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         iBackXPos = iBackXSize * 4 << 16;
         iBackYPos = 0;
         iBackMode = 0;
         iBackShake = 0;
         iBackShakeType = 0;
         iBackXAdd = 0;
         iBackXOffset = 0;
         iBackYOffset = 0;
         iBackXScroll = 0;
         if (pushCounter[var3] <= 50) {
            if (PlayerXPos[var3] < PlayerXPos[var2]) {
               PlayerXPos[var3] = iBackXPos + 31457280;
               PlayerXPos[var2] = PlayerXPos[var3] + 6553600;
               tcbPlayer[var3].obj.x = 31457280;
               tcbPlayer[var2].obj.x = 38010880;
            } else {
               PlayerXPos[var3] = iBackXPos - 655360;
               PlayerXPos[var2] = PlayerXPos[var3] - 6553600;
               tcbPlayer[var3].obj.x = -655360;
               tcbPlayer[var2].obj.x = -7208960;
            }
         } else if (PlayerXPos[var3] < PlayerXPos[var2]) {
            PlayerXPos[var2] = iBackXPos - 655360;
            PlayerXPos[var3] = PlayerXPos[var2] - 6553600;
            tcbPlayer[var2].obj.x = -655360;
            tcbPlayer[var3].obj.x = -7208960;
         } else {
            PlayerXPos[var2] = iBackXPos + 31457280;
            PlayerXPos[var3] = PlayerXPos[var2] + 6553600;
            tcbPlayer[var2].obj.x = 31457280;
            tcbPlayer[var3].obj.x = 38010880;
         }

         tcbPlayer[0].md = 446;
         tcbPlayer[1].md = 446;
         tcbNow.md = 660;
         tcbNow.lp = 0;
         break;
      case 660:
         var3 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         PlayerAttack[0] = 0;
         PlayerAttack[1] = 0;
         this._TKilx(var1, 12624, 12634);
         ObjReq var12;
         if (pushCounter[var3] <= 50) {
            this.LIFE_DEC(var1, var3, this.EventDamage(var1, 0, var3, var2));
            ThrowDamage[var3] = false;
            DamageWall[var3] = true;
            DamageType[var3] = 28;
            DamageIndex[var3] = 0;
            DamageTime[var3] = 0;
            DamageOldIndex[var3] = DamageIndex[var3];
            DamageOldType[var3] = DamageType[var3];
            tcbPlayer[var3].md = 876;
            tcbPlayer[var2].md = 439;
            var12 = tcbPlayer[var2].obj;
            var12.wObjFlag |= 1;
            var7 = PlayerEventFlag;
            var7[var3] |= 1;
            var7 = PlayerEventFlag;
            var7[var2] |= 256;
         } else {
            this.LIFE_DEC(var1, var2, this.EventDamage(var1, 0, var2, var3));
            this.AddScore(var1, var3, (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[150] + this.pGameData.piGameDataXSize[150] * 6 + 0 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[150] + this.pGameData.piGameDataXSize[150] * 6 + 0] & 255));
            DamageWall[var2] = true;
            ThrowDamage[var2] = false;
            DamageType[var2] = 28;
            DamageIndex[var2] = 0;
            DamageTime[var2] = 0;
            DamageOldIndex[var2] = DamageIndex[var2];
            DamageOldType[var2] = DamageType[var2];
            tcbPlayer[var2].md = 876;
            tcbPlayer[var3].md = 439;
            var12 = tcbPlayer[var3].obj;
            var12.wObjFlag |= 1;
            var7 = PlayerEventFlag;
            var7[var3] |= 256;
            var7 = PlayerEventFlag;
            var7[var2] |= 1;
         }

         bBackVisible = true;
         tcbNow._work[10] = 0;
         this.CreateWipeInOut(var1, 0);
         iFadeR = 255;
         iFadeG = 255;
         iFadeB = 255;
         tcbNow.md = 661;
         tcbNow.lp = 0;
         break;
      case 661:
         var3 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         ObjReq var8;
         if (pushCounter[var3] <= 50) {
            tcbPlayer[var2].md = 431;
            var8 = tcbPlayer[var2].obj;
            var8.wObjFlag |= 1;
         } else {
            tcbPlayer[var3].md = 431;
            var8 = tcbPlayer[var3].obj;
            var8.wObjFlag |= 1;
         }

         tcbNow.md = 662;
         tcbNow.lp = 0;
         break;
      case 662:
         var2 = iPlayerNo;
         var10 = 1 - iPlayerNo;
         if (tcbNow._work[10] <= 24) {
            if (tcbNow._work[10] % 6 == 0) {
               if (pushCounter[var2] <= 50) {
                  var3 = tcbPlayer[var2].obj.x;
                  var2 = tcbPlayer[var2].obj.y >> 16;
                  var3 >>= 16;
               } else {
                  var3 = tcbPlayer[var10].obj.x;
                  var2 = tcbPlayer[var10].obj.y >> 16;
                  var3 >>= 16;
               }

               this.CreatePanelSingle(var1, 12624, 5, 76, 201, 0, CPURand[0] % 20 + var3 - 10, CPURand[0] % 20 + var2 - 10);
            }

            var7 = tcbNow._work;
            var10002 = var7[10]++;
         }

         if (iFade == 255 || iFade == 0) {
            iFadeR = 0;
            iFadeG = 0;
            iFadeB = 0;
            this._TLoop(var1, 64, 663);
         }
         break;
      case 663:
         var3 = iPlayerNo;
         var2 = 1 - iPlayerNo;
         if (pushCounter[var3] <= 50) {
            if (PlayerXPos[var3] < PlayerXPos[var2]) {
               PlayerWarpXPos[var2] = PlayerXPos[var3] + 13107200;
            } else {
               PlayerWarpXPos[var2] = PlayerXPos[var3] - 13107200;
            }

            PlayerWarpYPos[var2] = 15728640;
            tcbPlayer[var2].md = 869;
         } else {
            if (PlayerXPos[var3] < PlayerXPos[var2]) {
               PlayerWarpXPos[var3] = PlayerXPos[var2] - 13107200;
            } else {
               PlayerWarpXPos[var3] = PlayerXPos[var2] + 13107200;
            }

            PlayerWarpYPos[var3] = 15728640;
            tcbPlayer[var3].md = 869;
         }

         tcbNow.md = 664;
         tcbNow.lp = 0;
         break;
      case 664:
         this._TLoop(var1, 10, 665);
         break;
      case 665:
         this._SetObjFlag(var1, tcbPlayer[0].obj, 1, false);
         this._SetObjFlag(var1, tcbPlayer[1].obj, 1, false);
         this._TKilx(var1, 12624, 12634);
         iMarkVisible = 0;
         iCameraLock = -1;
         if ((iEventStatus & 512) != 0) {
            tcbNow.md = 519;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 630;
            tcbNow.lp = 0;
         }

         iEventStatus = 0;
         break;
      case 666:
         tcbNow._work[0] = tcbNow._work[0] * 60 - 1;
         iPushTimer = tcbNow._work[0];
         tcbNow.md = 667;
         tcbNow.lp = 0;
         break;
      case 667:
         var7 = tcbNow._work;
         var10002 = var7[0]--;
         if (tcbNow._work[0] <= 0) {
            iPushTimer = 0;
            this._TKill(var1);
         } else {
            iPushTimer = tcbNow._work[0] / 60 + 1;
         }
         break;
      case 668:
         var2 = iPlayerNo;
         var3 = iPlayerNo;
         tcbNow._work[0] = 0;
         tcbNow._work[0] = 0;
         tcbNow._work[1] = 0;
         bEventValueBuf[0] = 0;
         pushCounter[var2] = 50;
         pushCounter[1 - var3] = 50;
         tcbNow.md = 669;
         tcbNow.lp = 0;
         break;
      case 669:
         var3 = iPlayerNo;
         var10 = 1 - iPlayerNo;

         for(var2 = 0; var2 < 2; ++var2) {
            if (TouchesXPos[var2] != 0 && TouchesStatus[var2] != 0) {
               bEventValueBuf[0] = (byte)(CPURand[0] % 4 + 2);
               break;
            }
         }

         if (iPlayMode != 8) {
            tcbNow._work[0] = (tcbNow._work[0] + 1) % this.pGameData.piGameData[this.pGameData.piGameDataPos[147] + this.pGameData.piGameDataXSize[147] * 3 + CPULevel[var10]];
            if (tcbNow._work[0] == 0) {
               var5 = this.pGameData.piGameData[this.pGameData.piGameDataPos[147] + this.pGameData.piGameDataXSize[147] * 5 + CPULevel[var10]];
               short var6 = this.pGameData.piGameData[this.pGameData.piGameDataPos[147] + this.pGameData.piGameDataXSize[147] * 4 + CPULevel[var10]];
               var2 = CPURand[0];
               var4 = this.pGameData.piGameData[this.pGameData.piGameDataPos[147] + this.pGameData.piGameDataXSize[147] * 4 + CPULevel[var10]];
               bEventValueBuf[2] = (byte)(var2 % (var5 - var6) + var4);
            }

            var7 = pushCounter;
            var7[var3] += bEventValue[var3][0] - bEventValue[var3][2];
            bEventValue[var3][0] = 0;
            bEventValue[var3][2] = 0;
            if (pushCounter[var3] >= 100 || pushCounter[var3] <= 0) {
               if (pushCounter[0] > 100) {
                  pushCounter[0] = 100;
               } else if (pushCounter[0] < 0) {
                  pushCounter[0] = 0;
               }

               this._TKill(var1);
            }
         } else {
            var7 = pushCounter;
            var7[var3] += bEventValue[var3][0] - bEventValue[var10][0];
            bEventValue[var3][0] = 0;
            bEventValue[var10][0] = 0;
            if (pushCounter[var3] >= 100 || pushCounter[var3] <= 0 || pushCounter[var10] >= 100 || pushCounter[var10] <= 0) {
               if (pushCounter[var3] > 100) {
                  pushCounter[var3] = 100;
               } else if (pushCounter[var3] < 0) {
                  pushCounter[var3] = 0;
               }

               if (pushCounter[var10] > 100) {
                  pushCounter[var10] = 100;
               } else if (pushCounter[var10] < 0) {
                  pushCounter[var10] = 0;
               }

               this._TKill(var1);
            }
         }
         break;
      case 670:
         var3 = tcbNow.prio;
         this.CreatePanelSingle(var1, tcbNow.prio + 1, 5, 347, 12292, 0, 0, 264);

         for(var2 = 0; var2 < (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + tcbNow._work[0] * 2 * this.pGameData.piGameDataXSize[146] + 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + tcbNow._work[0] * 2 * this.pGameData.piGameDataXSize[146] + 2] & 255); ++var2) {
            this.CreatePanelSingle(var1, var3 + 2 + var2, 5, var2 + 261, 12293, 0, (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + tcbNow._work[0] * 2 * this.pGameData.piGameDataXSize[146] + ((var2 << 1) + 2) * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + tcbNow._work[0] * 2 * this.pGameData.piGameDataXSize[146] + ((var2 << 1) + 2) * 2] & 255), (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + tcbNow._work[0] * 2 * this.pGameData.piGameDataXSize[146] + ((var2 << 1) + 3) * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + tcbNow._work[0] * 2 * this.pGameData.piGameDataXSize[146] + ((var2 << 1) + 3) * 2] & 255));
         }

         tcbNow._work[10] = 0;
         iKeylockStatus = 0;
         tcbNow.md = 671;
         tcbNow.lp = 0;
         break;
      case 671:
         var3 = tcbNow.prio + 2;

         for(var2 = 0; var2 < (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + tcbNow._work[0] * 2 * this.pGameData.piGameDataXSize[146] + 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + tcbNow._work[0] * 2 * this.pGameData.piGameDataXSize[146] + 2] & 255); ++var2) {
            var5 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + tcbNow._work[0] * 2 * this.pGameData.piGameDataXSize[146] + ((var2 << 1) + 2) * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + tcbNow._work[0] * 2 * this.pGameData.piGameDataXSize[146] + ((var2 << 1) + 2) * 2] & 255);
            var4 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + tcbNow._work[0] * 2 * this.pGameData.piGameDataXSize[146] + ((var2 << 1) + 3) * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + tcbNow._work[0] * 2 * this.pGameData.piGameDataXSize[146] + ((var2 << 1) + 3) * 2] & 255);
            if (TouchesStatus[0] != 0 && TouchesXPos[0] >= var5 && TouchesXPos[0] <= var5 + 64 && TouchesYPos[0] >= var4 && TouchesYPos[0] <= var4 + 64) {
               if (var2 != tcbNow._work[10]) {
                  iKeylockStatus = -1;
                  this._TKilx(var1, tcbNow.prio, tcbNow.prio + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + this.pGameData.piGameDataXSize[146] * 0 + 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + this.pGameData.piGameDataXSize[146] * 0 + 2] & 255) + 2);
                  return;
               }

               if (var2 >= (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + tcbNow._work[0] * 2 * this.pGameData.piGameDataXSize[146] + 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + tcbNow._work[0] * 2 * this.pGameData.piGameDataXSize[146] + 2] & 255) - 1) {
                  iKeylockStatus = 1;
                  this._TKilx(var1, tcbNow.prio + 1, tcbNow.prio + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + this.pGameData.piGameDataXSize[146] * 0 + 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + this.pGameData.piGameDataXSize[146] * 0 + 2] & 255) + 2);
                  this.CreatePanelSingle(var1, tcbNow.prio + 1, 5, 348, 12292, 0, 0, 264);
                  tcbNow.md = 672;
                  tcbNow.lp = 0;
                  return;
               }

               this._TKilx(var1, tcbNow._work[10] + var3, tcbNow._work[10] + var3);
               this.CreatePanelSingle(var1, var3 + tcbNow._work[10], 5, 346, 12293, 0, var5, var4);
               var7 = tcbNow._work;
               var10002 = var7[10]++;
            }
         }

         return;
      case 672:
         this._TLoop(var1, 10, 673);
         break;
      case 673:
         this._TKilx(var1, tcbNow.prio, tcbNow.prio + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + this.pGameData.piGameDataXSize[146] * 0 + 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[146] + this.pGameData.piGameDataXSize[146] * 0 + 2] & 255) + 2);
      }

   }

   public void Game16(GlobalWork var1, int var2) {
      int var3;
      int var4;
      int var6;
      int[] var11;
      int var14;
      switch(var2) {
      case 0:
      case 1081:
      default:
         break;
      case 1082:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 24576, 24656);
            this.CreatePanelSingle(var1, 24576, 0, 12, 12278, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576, 0, 223, 12298, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576, 0, 84, 12298, 0, 8, 40);
            this.CreatePanelSingle(var1, 24576, 0, 10, 12329, 0, 0, 0);
            tcbNow._work[8] = 0;
            tcbNow._work[9] = 0;
            tcbNow._work[19] = this.GetCost(var1, 0);
            tcbNow._work[20] = 0;
            tcbNow._work[21] = PlayerType[0];
            tcbNow.md = 1083;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 1083:
         this.InitCharCard(var1, tcbNow._work[20], tcbNow._work[21], false, 0);
         LoadData[21] = tcbNow._work[21];

         for(var2 = 0; var2 < 8; ++var2) {
            var3 = this.GetCardNo(var1, tcbNow._work[21], var2);
            LoadData[var2 + 6] = var3 + 255;
         }

         this.SetLoad(var1, true);
         this._TKilx(var1, 24586, 24596);
         this.CreatePanelSingle(var1, 24596, 0, 224, 12298, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 0, this.ChrGameData[0 + 3].piGameData[this.ChrGameData[0 + 3].piGameDataPos[3] + this.ChrGameData[0 + 3].piGameDataXSize[3] * 0 + 9] + 6, 12338, 0, 16, 215);
         this.CreateValueObjectB(var1, 24596, 100, 221, this.GetLevel(var1, tcbNow._work[21]) + 1, 2, 14, 100, 12338, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 21, this.CharAct_Name[iLanguage + 4], 12338, 0, 136, 220);
         this.CreateValueObjectB(var1, 24596, 390, 221, this.GetExp(var1, tcbNow._work[21]), 2, 14, 100, 12338, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 0, 140, 12339, 0, 415, 221);
         short var15;
         if (this.GetLevel(var1, tcbNow._work[21]) == 98) {
            var15 = 0;
         } else {
            var15 = this.pGameData.piGameData[this.pGameData.piGameDataPos[43] + this.GetLevel(var1, tcbNow._work[21]) / 5 * this.pGameData.piGameDataXSize[43] + 0];
         }

         this.CreateValueObjectB(var1, 24596, 426, 221, var15, 2, 14, 100, 12338, 0, 0, 0);
         if (this.isMission(var1) == 0 && iPlayMode != 8) {
            this.CreatePanelSingle(var1, 24586, 0, 303, 12338, 0, 312, 176);
         } else {
            this.CreatePanelSingle(var1, 24586, 0, 250, 12338, 0, 312, 176);
         }

         if (this.CardPutCount(var1, tcbNow._work[21]) > 0) {
            this.CreatePanelSingle(var1, 24586, 0, 38, 12338, 0, 392, 280);
         } else {
            this.CreatePanelSingle(var1, 24586, 0, 39, 12338, 0, 392, 280);
         }

         if (PlayerCardFormationCount[tcbNow._work[20]] > 0) {
            this.CreatePanelSingle(var1, 24586, 0, 225, 12338, 0, 264, 56);
            this.CreatePanelSingle(var1, 24586, 0, 241, 12338, 0, 8, 275);
         } else {
            this.CreatePanelSingle(var1, 24586, 0, 240, 12338, 0, 8, 275);
         }

         tcbNow._work[14] = this.GetAttackSelect(var1, 0) + this.GetPutCardAttack(var1, tcbNow._work[21]) + this.GetCardAttackFmALL(var1, tcbNow._work[20]);
         tcbNow._work[15] = this.GetDeffenceSelect(var1, 0) + this.GetPutCardDefence(var1, tcbNow._work[21]) + this.GetCardDefenceFmALL(var1, tcbNow._work[20]);
         this.CreateValueObjectB(var1, 24596, 92, 249, tcbNow._work[14], 6, 14, 100, 12308, 1, 0, 0);
         this.CreateValueObjectB(var1, 24596, 330, 249, tcbNow._work[15], 6, 14, 100, 12308, 1, 0, 0);

         for(var2 = 0; var2 < 8; ++var2) {
            var4 = this.GetCardNo(var1, tcbNow._work[21], var2);
            var3 = this.GetCardLevel(var1, var4);
            if (var4 == 0) {
               var3 = 0;
            }

            this.CreatePanelSingle(var1, 24586, var2 + 6, var3 + 33, 12308, 0, var2 * 56 + 40, 130);
         }

         this._TKilx(var1, 24646, 24646);
         this.CreateValueObjectB(var1, 24646, 164, 48, this.GetPutCardCost(var1, tcbNow._work[21]), 2, 14, 100, 12338, 0, 0, 0);
         this.CreatePanelSingle(var1, 24646, 0, 140, 12339, 0, 189, 48);
         this.CreateValueObjectB(var1, 24646, 200, 48, tcbNow._work[19], 2, 14, 100, 12338, 0, 0, 0);
         if (tcbNow._work[8] == 0) {
            tcbNow.md = 1086;
            tcbNow.lp = 0;
         } else {
            tcbNow._work[8] = 0;

            for(var2 = 0; var2 < 8; ++var2) {
               this.CreatePanelSingle(var1, 24597, 0, 248, 12358, 0, var2 * 56 + 40, 130);
            }

            tcbNow.md = 1084;
            tcbNow.lp = 0;
         }
         break;
      case 1084:
         this._TLoop(var1, 8, 1085);
         break;
      case 1085:
         this._TKilx(var1, 24597, 24597);
         tcbNow.md = 1086;
         tcbNow.lp = 0;
         break;
      case 1086:
         if (this.CheckDownBtn(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            if (this.isMission(var1) == 0 && iPlayMode != 8) {
               if (iStage == 2) {
                  if (this.CardPutCount(var1, bCharIndex[tcbNow._work[0]]) < 2) {
                     tcbNow.md = 1093;
                     tcbNow.lp = 0;
                     break;
                  }
               } else if (this.CardPutCheck(var1, bCharIndex[tcbNow._work[0]], 1) == 0) {
                  tcbNow.md = 1094;
                  tcbNow.lp = 0;
                  break;
               }

               this._FILESave(var1);
               iReqSENo = 0;
               this.PushSE(var1, 0);
               tcbNow.md = 1087;
               tcbNow.lp = 0;
               this.CreateWipeInOut(var1, 1);
            } else if (this.CardPutCount(var1, tcbNow._work[21]) == 0) {
               tcbNow.md = 1096;
               tcbNow.lp = 0;
            } else {
               var2 = iPlayerNo;
               var3 = 1 - var2;
               if (iPlayMode == 2) {
                  this.InitCharCard(var1, iChrSelectPlayer, PlayerType[iChrSelectPlayer], false, 0);
                  if (iChrSelectPlayer == 1) {
                     Level[var2] = this.GetLevel(var1, PlayerType[var2]);
                     Level[var3] = this.GetLevel(var1, PlayerType[var3]);
                     this.CreateWipeInOut(var1, 1);
                     tcbNow.md = 1006;
                     tcbNow.lp = 0;
                  } else {
                     this.CreateWipeInOut(var1, 1);
                     tcbNow.md = 1007;
                     tcbNow.lp = 0;
                  }
               } else {
                  if (bDebugMode) {
                     this.DebugSetLevel(var1, PlayerType[var2], iDebugVal[0]);
                  }

                  Level[var2] = this.GetLevel(var1, PlayerType[var2]);
                  this.InitCharCard(var1, var2, PlayerType[var2], false, 0);
                  if (iPlayMode == 8) {
                     PlayerType[var3] = 0;
                     this.CreateWipeInOut(var1, 1);
                     tcbNow.md = 1005;
                     tcbNow.lp = 0;
                  } else {
                     this.CreateWipeInOut(var1, 1);
                     tcbNow.md = 1006;
                     tcbNow.lp = 0;
                  }
               }

               this._FILESave(var1);
               iReqSENo = 0;
               this.PushSE(var1, 0);
            }
         } else if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            if (this.isMission(var1) != 0) {
               iReqSENo = 0;
               this.PushSE(var1, 0);
               tcbNow.md = 1087;
               tcbNow.lp = 0;
               this.CreateWipeInOut(var1, 1);
            }
         } else {
            for(var2 = 0; var2 < 8; ++var2) {
               if (TouchesXPos[0] > var2 * 56 + 16 && TouchesXPos[0] < var2 * 56 + 64 && TouchesYPos[0] > 82 && TouchesYPos[0] < 154 && TouchesStatus[0] != 0) {
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  tcbNow._work[11] = var2;
                  tcbNow._work[12] = this.GetCardNo(var1, tcbNow._work[21], tcbNow._work[11]);
                  tcbNow._work[13] = tcbNow._work[12];
                  tcbNow._work[17] = 0;
                  tcbNow.md = 1091;
                  tcbNow.lp = 0;
                  return;
               }
            }

            if (TouchesXPos[0] <= 8 || TouchesXPos[0] >= 240 || TouchesYPos[0] <= 280 || TouchesYPos[0] >= 320 || TouchesStatus[0] == 0) {
               var3 = 328;

               for(var2 = 0; var2 < 1; ++var2) {
                  if (TouchesXPos[0] > var3 && TouchesXPos[0] < var3 + 150 && TouchesYPos[0] > 176 && TouchesYPos[0] < 210 && TouchesStatus[0] != 0) {
                     tcbNow._work[9] = var2;
                     tcbNow.md = 1099;
                     tcbNow.lp = 0;
                     return;
                  }

                  var3 += 160;
               }

               return;
            }

            tcbNow.md = 1088;
            tcbNow.lp = 0;
         }
         break;
      case 1087:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 24576, 24656);
            this._FILESave(var1);
            tcbNow.md = iReturnTask;
            tcbNow.lp = 0;
         }
         break;
      case 1088:
         if (iFade == 255 || iFade == 0) {
            this.InitCharCard(var1, tcbNow._work[20], tcbNow._work[21], false, 1);
            tcbNow.md = 1046;
            tcbNow.lp = 0;
         }
         break;
      case 1089:
         var2 = tcbNow._work[11] * 56 + 40;
         var3 = this.GetCardLevel(var1, tcbNow._work[12]);
         tcbNow._work[22] = var2 << 16;
         tcbNow._work[23] = 10747904;
         this._TKilx(var1, 24666, 24666);
         tcbEffect[1] = this.CreatePanelSingle(var1, 24666, tcbNow._work[11] + 6, var3 + 140, 12298, 0, var2, 164);
         tcbNow.md = 1090;
         tcbNow.lp = 0;
         break;
      case 1090:
         var2 = tcbNow._work[11];
         this.GetCardLevel(var1, tcbNow._work[12]);
         int[] var10 = tcbNow._work;
         var10[22] += (15728640 - (var2 * 56 + 40 << 16)) / 10;
         var10 = tcbNow._work;
         var10[23] += 65536;
         tcbEffect[1].obj.x = tcbNow._work[22];
         tcbEffect[1].obj.y = tcbNow._work[23];
         this._TLoop(var1, 9, 1091);
         break;
      case 1091:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 1092;
         tcbNow.lp = 0;
         break;
      case 1092:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 24666, 24666);
            tcbNow.md = 1102;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 1093:
         this.CreatePanelSingle(var1, 24676, 0, 266, 12368, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 76, 24676, 12370, 27, 140, 16);
         tcbNow.md = 1095;
         tcbNow.lp = 0;
         break;
      case 1094:
         this.CreatePanelSingle(var1, 24676, 0, 266, 12368, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 75, 24676, 12370, 27, 140, 16);
         tcbNow.md = 1095;
         tcbNow.lp = 0;
         break;
      case 1095:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            this._TKilx(var1, 24676, 24676);
            tcbNow.md = 1086;
            tcbNow.lp = 0;
         }
         break;
      case 1096:
         this.CreatePanelSingle(var1, 24676, 0, 266, 12368, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 76, 24676, 12370, 27, 140, 16);
         tcbNow.md = 1097;
         tcbNow.lp = 0;
         break;
      case 1097:
         this.CreatePanelSingle(var1, 24676, 0, 266, 12368, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 310, 24676, 12370, 27, 140, 16);
         tcbNow.md = 1098;
         tcbNow.lp = 0;
         break;
      case 1098:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            this._TKilx(var1, 24676, 24676);
            tcbNow.md = 1086;
            tcbNow.lp = 0;
         }
         break;
      case 1099:
         tcbNow._work[8] = 1;
         this.CreatePanelSingle(var1, 24676, 0, 266, 12368, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 254, 24676, 12370, 210, 140, 16);
         this.autoCardTask = null;
         this.autoCardTask = new AutoCardTask(this);
         this.autoCardTask.start(tcbNow._work[21], tcbNow._work[19], tcbNow._work[9]);
         tcbNow.md = 1100;
         tcbNow.lp = 0;
         break;
      case 1100:
         if (this.autoCardTask.isEnd()) {
            if (this.autoCardTask.getError() == 0) {
               for(var2 = 0; var2 < 8; ++var2) {
                  this.SetCardNo(var1, tcbNow._work[21], var2, this.autoCardTask.get(var2));
               }
            }

            this.autoCardTask = null;
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow.md = 1083;
            tcbNow.lp = 0;
            this._TKilx(var1, 24676, 24676);
         }
         break;
      case 1101:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 24576, 24676);
            this.CreatePanelSingle(var1, 24576, 0, 12, 12278, 0, 0, 0);
            if (iCardPreviewMode == 0) {
               this.CreatePanelSingle(var1, 24576, 5, 269, 12298, 0, 0, 0);
               this.CreatePanelSingle(var1, 24576, 0, 240, 12338, 0, 8, 270);
            } else if (iCardPreviewMode == 1) {
               this.CreatePanelSingle(var1, 24576, 5, 271, 12298, 0, 0, 0);
            } else {
               this.CreatePanelSingle(var1, 24576, 5, 275, 12298, 0, 0, 0);
            }

            tcbNow._work[17] = 0;
            this.CreatePanelSingle(var1, 24576, 0, 10, 12329, 0, 0, 0);
            tcbNow.md = 1102;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 1102:
         switch(iCardPreviewMode) {
         case 0:
            this.InitAutoCardBuf(var1, 10000, 0, tcbNow._work[17] + 1);
            break;
         case 1:
            this.InitAutoCardBuf(var1, 10000, -1, tcbNow._work[17] + 1);
            break;
         case 2:
            this.InitAutoCardBuf(var1, 10000, -2, tcbNow._work[17] + 1);
         }

         tcbNow._work[13] = 0;
         tcbNow._work[16] = (iCardBufCount + 11) / 12;
         tcbNow.md = 1103;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 1103:
         var3 = tcbNow._work[13] * 12;

         for(var2 = 0; var2 < 12; ++var2) {
            LoadData[var2 + 14] = iCardBuf[var3] + 255;
            ++var3;
            if (var3 >= iCardBufCount) {
               break;
            }
         }

         this.SetLoad(var1, true);
         this._TKilx(var1, 24586, 24596);
         if (iPlayMode == 7) {
            this.CreateValueObjectB(var1, 24586, 374, 16, tcbNow._work[13] + 1, 3, 14, 100, 12338, 0, 0, 0);
            this.CreatePanelSingle(var1, 24586, 0, 140, 12339, 0, 412, 16);
            this.CreateValueObjectB(var1, 24586, 424, 16, tcbNow._work[16], 3, 14, 100, 12338, 1, 0, 0);
         } else {
            this.CreateValueObjectB(var1, 24586, 374, 16, tcbNow._work[13] + 1, 3, 14, 100, 12338, 0, 0, 0);
            this.CreatePanelSingle(var1, 24586, 0, 140, 12339, 0, 412, 16);
            this.CreateValueObjectB(var1, 24586, 424, 16, tcbNow._work[16], 3, 14, 100, 12338, 1, 0, 0);
         }

         var4 = tcbNow._work[13] * 12;
         var2 = 100;
         var14 = 116;

         for(var3 = 0; var3 < 12; var14 = var6) {
            if (iPlayMode == 7) {
               this.CreatePanelSingle(var1, 24586, var3 + 14, bCardLevelBuf[var4] + 55, 12338, 0, var2, var14);
            } else if (this.CardPutCheck(var1, tcbNow._work[21], iCardBuf[var4]) != 0) {
               this.CreatePanelSingle(var1, 24586, var3 + 14, bCardLevelBuf[var4] + 33, 12338, 0, var2, var14);
               if (tcbNow._work[12] == iCardBuf[var4]) {
                  this.CreatePanelSingle(var1, 24586, 0, 244, 12340, 0, var2, var14);
               } else {
                  this.CreatePanelSingle(var1, 24586, 0, 243, 12340, 0, var2, var14);
               }
            } else {
               this.CreatePanelSingle(var1, 24586, var3 + 14, bCardLevelBuf[var4] + 55, 12338, 0, var2, var14);
            }

            var2 += 56;
            var6 = var14;
            if (var3 == 5) {
               var2 = 100;
               var6 = var14 + 88;
            }

            ++var4;
            if (var4 >= iCardBufCount) {
               break;
            }

            ++var3;
         }

         if (iCardBufCount > 12) {
            this.CreatePanelSingle(var1, 24586, 0, 27, 12338, 0, 16, 128);
            this.CreatePanelSingle(var1, 24586, 0, 29, 12338, 0, 464, 128);
            this.controller.Init();
            this.padID[1] = this.controller.AddPad(-50, 20, 120, 320, 5, 16640);
            this.padID[2] = this.controller.AddPad(430, 20, 120, 320, 5, 16640);
         }

         if (iPlayMode != 7) {
            this.CreatePanelSingle(var1, 24586, 0, 251, 12338, 0, 16, 272);
         }

         this.CreatePanelSingle(var1, 24586, 0, tcbNow._work[17] + 252, 12338, 0, 296, 272);
         tcbNow.md = 1104;
         tcbNow.lp = 0;
         break;
      case 1104:
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            if (iPlayMode == 7) {
               tcbNow.md = 418;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 1105;
               tcbNow.lp = 0;
            }
         } else {
            if (tcbNow._work[16] > 1) {
               if (this.controller.GetKey(this.padID[1], 0) != 0) {
                  tcbNow._work[13] = (tcbNow._work[13] + tcbNow._work[16] - 1) % tcbNow._work[16];
                  tcbNow.md = 1103;
                  tcbNow.lp = 0;
                  break;
               }

               if (this.controller.GetKey(this.padID[2], 0) != 0) {
                  tcbNow._work[13] = (tcbNow._work[13] + 1) % tcbNow._work[16];
                  tcbNow.md = 1103;
                  tcbNow.lp = 0;
                  break;
               }
            }

            if (iPlayMode == 7 && TouchesXPos[0] > 8 && TouchesXPos[0] < 240 && TouchesYPos[0] > 280 && TouchesYPos[0] < 320 && TouchesStatus[0] != 0) {
               tcbNow.md = 1114;
               tcbNow.lp = 0;
            } else if (TouchesXPos[0] > 296 && TouchesXPos[0] < 500 && TouchesYPos[0] > 272 && TouchesYPos[0] < 320 && TouchesStatus[0] != 0) {
               tcbNow._work[17] = (tcbNow._work[17] + 1) % 3;
               tcbNow.md = 1102;
               tcbNow.lp = 0;
            } else if (iPlayMode != 7 && TouchesXPos[0] > 16 && TouchesXPos[0] < 220 && TouchesYPos[0] > 272 && TouchesYPos[0] < 320 && TouchesStatus[0] != 0) {
               this.SetCardNo(var1, tcbNow._work[21], tcbNow._work[11], 0);
               tcbNow.md = 1105;
               tcbNow.lp = 0;
            } else {
               var2 = 74;
               var4 = 72;

               for(var3 = 0; var3 < 12; var4 = var14) {
                  if (TouchesXPos[0] > var2 && TouchesXPos[0] < var2 + 56 && TouchesYPos[0] > var4 && TouchesYPos[0] < var4 + 88 && TouchesStatus[0] != 0) {
                     tcbNow._work[18] = tcbNow._work[13] * 12 + var3;
                     if (tcbNow._work[18] < iCardBufCount) {
                        tcbNow._work[19] = 0;
                        if (iPlayMode != 7) {
                           tcbNow._work[19] = this.CardPutCheck(var1, tcbNow._work[21], iCardBuf[tcbNow._work[18]]);
                           this.SetCardNo(var1, tcbNow._work[21], tcbNow._work[11], iCardBuf[tcbNow._work[18]]);
                        }

                        tcbNow.md = 1107;
                        tcbNow.lp = 0;
                     }

                     return;
                  }

                  var2 += 56;
                  var14 = var4;
                  if (var3 == 5) {
                     var2 = 74;
                     var14 = var4 + 88;
                  }

                  ++var3;
               }

               return;
            }
         }
         break;
      case 1105:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 1106;
         tcbNow.lp = 0;
         break;
      case 1106:
         if (iFade == 255 || iFade == 0) {
            for(var2 = 0; var2 < 12; ++var2) {
               LoadData[var2 + 14] = -1;
            }

            this.SetLoad(var1, true);
            tcbNow.md = 1083;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 1107:
         this.DrawTextClear(var1, 0);
         this._TKilx(var1, 24606, 24616);
         if (iPlayMode == 7) {
            this.CreatePanelSingle(var1, 24616, 0, 291, 12358, 0, 0, 0);
         } else {
            this.CreatePanelSingle(var1, 24616, 0, 273, 12358, 0, 0, 0);
         }

         this.TextGDTString(var1, 0, iLanguage, 305, 24606, 12369, 340, 236, 16);
         if (iPlayMode == 7) {
            var3 = this.GetTicket(var1);
            short var13 = this.pGameData.piGameData[this.pGameData.piGameDataPos[136] + iCardBuf[tcbNow._work[18]] * this.pGameData.piGameDataXSize[136] + 2];
            var2 = this.GetCardLevel(var1, iCardBuf[tcbNow._work[18]]);
            switch(iCardPreviewMode) {
            case 0:
               tcbNow._work[19] = 1;
               this.TextGDTString(var1, 0, iLanguage, 305, 24606, 12369, 340, 236, 16);
               this.CreatePanelSingle(var1, 24606, tcbNow._work[18] % 12 + 14, bCardLevelBuf[tcbNow._work[18]] + 184, 12368, 0, 128, 128);
               break;
            case 1:
               if (var3 >= var13 && var2 < 10) {
                  tcbNow._work[19] = 0;
                  this.TextGDTString(var1, 0, iLanguage, 306, 24606, 12369, 90, 236, 16);
               } else {
                  tcbNow._work[19] = 1;
                  this.TextGDTString(var1, 0, iLanguage, 307, 24606, 12369, 90, 236, 16);
               }

               this.TextGDTString(var1, 0, iLanguage, 305, 24606, 12369, 340, 236, 16);
               this.CreatePanelSingle(var1, 24606, tcbNow._work[18] % 12 + 14, bCardLevelBuf[tcbNow._work[18]] + 184, 12368, 0, 128, 128);
            }
         } else {
            var2 = this.GetCost(var1, 0);
            var3 = this.GetPutCardCost(var1, tcbNow._work[21]);
            if (tcbNow._work[19] != 0) {
               this.TextGDTString(var1, 0, iLanguage, 304, 24606, 12369, 90, 236, 16);
               this.CreatePanelSingle(var1, 24606, tcbNow._work[18] % 12 + 14, bCardLevelBuf[tcbNow._work[18]] + 44, 12368, 0, 128, 128);
               this.CreatePanelSingle(var1, 24606, 0, 245, 12368, 0, 176, 144);
            } else if (var3 > var2) {
               this.TextGDTString(var1, 0, iLanguage, 304, 24606, 12369, 90, 236, 16);
               this.CreatePanelSingle(var1, 24606, tcbNow._work[18] % 12 + 14, bCardLevelBuf[tcbNow._work[18]] + 184, 12368, 0, 128, 128);
               this.CreatePanelSingle(var1, 24606, 0, 246, 12368, 0, 176, 144);
            } else {
               this.TextGDTString(var1, 0, iLanguage, 303, 24606, 12369, 90, 236, 16);
               this.CreatePanelSingle(var1, 24606, tcbNow._work[18] % 12 + 14, bCardLevelBuf[tcbNow._work[18]] + 184, 12368, 0, 128, 128);
            }
         }

         var2 = tcbNow._work[18] % 12 + 8;
         this.CardGDTString(var1, 0, iCardBuf[tcbNow._work[18]], var2, 0, this.CardData_TextPage[iLanguage * 2 + 0], 24606, 12369, 208, 72, 16);
         this.CardGDTString(var1, 0, iCardBuf[tcbNow._work[18]], var2, 0, this.CardData_TextPage[iLanguage * 2 + 1], 24606, 12369, 208, 90, 16);
         tcbNow.md = 1108;
         tcbNow.lp = 0;
         break;
      case 1108:
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            this._TKilx(var1, 24616, 24616);
            this.CreatePanelSingle(var1, 24616, 0, 168, 12358, 0, 0, 0);
            if (iPlayMode != 7) {
               this.SetCardNo(var1, tcbNow._work[21], tcbNow._work[11], tcbNow._work[12]);
            }

            tcbNow.md = 1111;
            tcbNow.lp = 0;
            break;
         } else {
            short var12 = 306;

            for(var2 = 0; var2 < 2; ++var2) {
               if (TouchesXPos[0] > var12 && TouchesXPos[0] < var12 + 120 && TouchesYPos[0] > 220 && TouchesYPos[0] < 220 + 50 && TouchesStatus[0] != 0) {
                  var3 = 0;
                  var4 = 0;
                  if (iPlayMode != 7) {
                     var3 = this.GetCost(var1, 0);
                     var4 = this.GetPutCardCost(var1, tcbNow._work[21]);
                  }

                  if (var2 != 1 || var4 <= var3 && tcbNow._work[19] == 0) {
                     this._TKilx(var1, 24616, 24616);
                     if (var2 == 0) {
                        if (iPlayMode == 7) {
                           this.CreatePanelSingle(var1, 24616, 0, 292, 12358, 0, 0, 0);
                        } else {
                           this.CreatePanelSingle(var1, 24616, 0, 168, 12358, 0, 0, 0);
                        }

                        if (iPlayMode != 7) {
                           this.SetCardNo(var1, tcbNow._work[21], tcbNow._work[11], tcbNow._work[12]);
                        }

                        tcbNow.md = 1111;
                        tcbNow.lp = 0;
                     } else {
                        this.CreatePanelSingle(var1, 24616, 0, 169, 12358, 0, 0, 0);
                        switch(iCardPreviewMode) {
                        case 0:
                           tcbNow.md = 1109;
                           tcbNow.lp = 0;
                           break;
                        case 1:
                           tcbNow.md = 1113;
                           tcbNow.lp = 0;
                        }
                     }

                     iReqSENo = 0;
                     this.PushSE(var1, 0);
                  }

                  return;
               }

               var12 = 60;
            }

            return;
         }
      case 1109:
         this._TLoop(var1, 10, 1110);
         break;
      case 1110:
         this._TKilx(var1, 24606, 24616);
         tcbNow._work[19] = this.GetCost(var1, 0);
         tcbNow.md = 1105;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 1111:
         this._TLoop(var1, 10, 1112);
         break;
      case 1112:
         if (iPlayMode != 7) {
            tcbNow._work[19] = this.GetCost(var1, 0);
         }

         tcbNow.md = 1103;
         tcbNow.lp = 0;
         this._TKilx(var1, 24606, 24616);
         this.Game(var1, tcbNow.md);
         break;
      case 1113:
         this.AddCard(var1, iCardBuf[tcbNow._work[18]], 1);
         this.AddTicket(var1, this.pGameData.piGameData[this.pGameData.piGameDataPos[136] + iCardBuf[tcbNow._work[18]] * this.pGameData.piGameDataXSize[136] + 2] * -1);
         this._FILESave(var1);
         if (this.GetCardLevel(var1, iCardBuf[tcbNow._work[18]]) >= 0) {
            iGetCardNo = iCardBuf[tcbNow._work[18]];
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 313;
            tcbNow.lp = 0;
         }
         break;
      case 1114:
         if (iFade == 255 || iFade == 0) {
            this.InitCharCard(var1, 0, 0, false, 2);
            tcbNow.md = 1046;
            tcbNow.lp = 0;
         }
         break;
      case 1115:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow._work[13] = iBallPreviewPage;
            tcbNow._work[14] = tcbNow._work[13];
            tcbNow._work[15] = 0;
            tcbNow._work[16] = 0;

            for(var2 = 1; var2 < 31; ++var2) {
               LoadData[var2] = -1;
            }

            LoadData[5] = 1;
            this.SetLoad(var1, true);
            this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576, 5, 273, 12290, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576, 0, 10, 12298, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576, 0, 27, 12338, 0, 16, 104);
            this.CreatePanelSingle(var1, 24576, 0, 29, 12338, 0, 464, 104);
            this.CreatePanelSingle(var1, 24576, 0, 89, 12328, 0, 8, 200);
            this.DrawTextClear(var1, 0);
            this.TextGDTString(var1, 0, iLanguage, 73, 24576, 12348, 32, 217, 16);
            this.controller.Init();
            this.padID[1] = this.controller.AddPad(-50, 20, 120, 320, 5, 16640);
            this.padID[2] = this.controller.AddPad(430, 20, 120, 320, 5, 16640);
            this.padID[3] = this.controller.AddPad(70, 20, 400, 320, 5, 16640);
            this.GdtBGM(var1, 45);
            tcbNow.md = 1116;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 1116:
         this._TKilx(var1, 24586, 24596);
         this.CreateValueObjectB(var1, 24586, 374, 16, tcbNow._work[13] + 1, 3, 14, 100, 12338, 0, 0, 0);
         this.CreatePanelSingle(var1, 24586, 0, 140, 12339, 0, 412, 16);
         this.CreateValueObjectB(var1, 24586, 424, 16, 11, 3, 14, 100, 12338, 1, 0, 0);
         var2 = tcbNow._work[15];

         for(var3 = 0; var3 < 2; ++var3) {
            this.CreatePanelSingle(var1, 24586, 5, 289, 12328, 0, var2 + 250, 120);
            boolean var5 = true;
            var6 = tcbNow._work[14 - var3];

            for(var4 = 0; var4 < 7; ++var4) {
               int var7 = this.GetBall(var1, var4);
               int var9 = this.BallPos[var4 << 1];
               int var8 = this.BallPos[(var4 << 1) + 1];
               if (var6 >= var7 && var6 < 11) {
                  this.CreatePanelSingle(var1, 24586, 5, var4 + 211, 12348, 0, var9 + var2, var8);
                  var5 = false;
               } else {
                  this.CreatePanelSingle(var1, 24586, 5, var4 + 201, 12348, 0, var9 + var2, var8);
               }
            }

            if (var5) {
               this.CreatePanelSingle(var1, 24586, 5, 277, 12368, 0, var2 + 0, 0);
            }

            if (tcbNow._work[13] == tcbNow._work[14]) {
               break;
            }

            if (tcbNow._work[13] > tcbNow._work[14]) {
               var2 += 600;
            } else {
               var2 -= 600;
            }
         }

         if (tcbNow._work[15] == tcbNow._work[16]) {
            tcbNow.md = 1117;
            tcbNow.lp = 0;
         } else if (tcbNow._work[16] > 0) {
            var11 = tcbNow._work;
            var11[15] += 30;
         } else {
            var11 = tcbNow._work;
            var11[15] -= 30;
         }
         break;
      case 1117:
         if (bResume) {
            this.controller.Init();
            this.padID[1] = this.controller.AddPad(-50, 20, 120, 320, 5, 16640);
            this.padID[2] = this.controller.AddPad(430, 20, 120, 320, 5, 16640);
            this.padID[3] = this.controller.AddPad(70, 20, 400, 320, 5, 16640);
         }

         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            tcbNow.md = 1118;
            tcbNow.lp = 0;
         } else {
            int var10002;
            if (this.controller.GetKey(this.padID[1], 0) != 0) {
               if (tcbNow._work[13] > 0) {
                  tcbNow._work[14] = tcbNow._work[13];
                  var11 = tcbNow._work;
                  var10002 = var11[13]--;
                  tcbNow._work[15] = 0;
                  tcbNow._work[16] = 600;
                  tcbNow.md = 1116;
                  tcbNow.lp = 0;
               }
            } else if (this.controller.GetKey(this.padID[2], 0) != 0) {
               if (tcbNow._work[13] < 10) {
                  tcbNow._work[14] = tcbNow._work[13];
                  var11 = tcbNow._work;
                  var10002 = var11[13]++;
                  tcbNow._work[15] = 0;
                  tcbNow._work[16] = -600;
                  tcbNow.md = 1116;
                  tcbNow.lp = 0;
               }
            } else if (this.controller.GetKey(this.padID[3], 0) != 0) {
               tcbNow.md = 1120;
               tcbNow.lp = 0;
            }

            iBallPreviewPage = tcbNow._work[13];
         }
         break;
      case 1118:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 1119;
         tcbNow.lp = 0;
         break;
      case 1119:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 418;
            tcbNow.lp = 0;
         }
         break;
      case 1120:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 1121;
         tcbNow.lp = 0;
         break;
      case 1121:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow._work[12] = tcbNow._work[13];
            tcbNow.md = 373;
            tcbNow.lp = 0;
         }
      }

   }

   public void Game17(GlobalWork var1, int var2) {
      int var3;
      int var4;
      ObjReq var23;
      ObjReq var26;
      int[] var27;
      int var30;
      switch(var2) {
      case 0:
      case 1:
      case 15:
      default:
         break;
      case 2:
         tcbBack[0] = tcbNow;
         tcbBack[1] = this._TaskMake(var1, 8, 16130);
         tcbBack[2] = this._TaskMake(var1, 10, 16130);
         this._TaskMake(var1, 12, 16130);
         this._TaskMake(var1, 6, 16130);
         var3 = this.ChrGameData[1].piGameDataXSize[0];
         var2 = var3;
         if (var3 > 6) {
            var2 = 6;
         }

         iMapWidthMax = var2 * 512;

         for(var3 = 0; var3 < var2; ++var3) {
            TCB var33 = this._TaskMake(var1, 4, 16131);
            var33._work[0] = 0;
            var33._work[1] = this.ChrGameData[1].piGameData[this.ChrGameData[1].piGameDataPos[0] + this.ChrGameData[1].piGameDataXSize[0] * 0 + var3] * 3;
            var33._work[2] = var3 * 512;
            var33 = this._TaskMake(var1, 4, 16131);
            var33._work[0] = 2;
            var33._work[1] = this.ChrGameData[1].piGameData[this.ChrGameData[1].piGameDataPos[0] + this.ChrGameData[1].piGameDataXSize[0] * 0 + var3] * 3 + 1;
            var33._work[2] = var3 * 512;
            var33 = this._TaskMake(var1, 4, 16131);
            var33._work[0] = 1;
            var33._work[1] = this.ChrGameData[1].piGameData[this.ChrGameData[1].piGameDataPos[0] + this.ChrGameData[1].piGameDataXSize[0] * 0 + var3] * 3 + 2;
            var33._work[2] = var3 * 512;
         }

         tcbNow._work[6] = iBackYPos >> 16;
         tcbNow._work[7] = 0;
         this._SetAct(var1, 1, 0);
         this._SetObj(var1, 14);
         this._ActReq(var1);
         tcbNow.md = 3;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 3:
         var2 = iBackYPos;
         if (iBackYScroll != 0) {
            var2 = iBackYScroll;
         } else if (tcbPlayer[0] != null) {
            if (iBackYOffset < -40) {
               var2 = iBackYOffset * 2 / 3 + 13;
            } else {
               var2 = 0;
            }
         } else {
            var2 >>= 16;
         }

         var3 = var2;
         if (iBackShake != 0) {
            var2 += this.BackShakePos[iBackShakeType * 7 + iBackShake / 2];
            var3 = var2;
            if (var2 > 0) {
               var3 = 0;
            }
         }

         var2 = var3;
         if (var3 > 0) {
            var2 = 0;
         }

         iBackYPos = var2 << 16;
         if (!bBlackOut && !bEffectFullScreen && bBackVisible) {
            var23 = objExec;
            var23.wObjFlag &= -2;
         } else {
            var23 = objExec;
            var23.wObjFlag |= 1;
         }

         var3 = (iBackYPos >> 16) - 240 - objExec.oy;
         this._SetXY(var1, -8388608, -var3 << 16);
         objExec.ox = iBackXOffset + iBackXPos;
         var23 = objExec;
         var23.wObjFlag |= 2;
         tcbNow._work[6] = iBackYPos >> 16;
         tcbNow._work[7] = iBackXOffset;
         if (iZoomBase != 100) {
            var2 = iBackXPos;
            var3 = -var3;
            var30 = iZoomXCenter;
            var4 = iZoomYCenter;
            this._SetXY(var1, 15728640 + ((var2 - 8388608 - var30 >> 16) * iZoomBase / 100 << 16), 10485760 + (((var3 << 16) - var4 >> 16) * iZoomBase / 100 << 16));
         }

         objExec.iXZoomObj = iZoomBase;
         objExec.iYZoomObj = iZoomBase;
         break;
      case 4:
         this._SetAct(var1, 1, 0);
         this._SetObj(var1, tcbBack[tcbNow._work[0]].obj.prio);
         this.SpriteSet(objExec, tcbNow._work[1]);
         tcbNow.md = 5;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 5:
         var2 = tcbNow._work[2];
         var2 = tcbNow._work[3];
         objExec.img = tcbBack[tcbNow._work[0]].obj.img;
         objExec.acttype = tcbBack[tcbNow._work[0]].obj.acttype;
         objExec.ano = tcbBack[tcbNow._work[0]].obj.ano;
         objExec.wObjFlag = tcbBack[tcbNow._work[0]].obj.wObjFlag;
         objExec.prio = tcbBack[tcbNow._work[0]].obj.prio;
         objExec.y = tcbBack[tcbNow._work[0]].obj.y - 2621440;
         objExec.Work[0] = tcbNow._work[2];
         if (tcbNow._work[0] == 0) {
            var2 = iBackXOffset + iBackXPosSprite[tcbNow._work[0]];
         } else if (tcbNow._work[0] == 1) {
            var2 = (iBackXOffset + iBackXPosSprite[tcbNow._work[0]]) / 3;
         } else {
            var2 = (iBackXOffset + iBackXPosSprite[tcbNow._work[0]]) / 2;
         }

         var3 = tcbNow._work[2];
         objExec.x = var3 - (var2 >> 16) - 40 << 16;
         objExec.iXZoomObj = tcbBack[tcbNow._work[0]].obj.iXZoomObj;
         objExec.iYZoomObj = tcbBack[tcbNow._work[0]].obj.iYZoomObj;
         if (!bBlackOut && !bEffectFullScreen && bBackVisible) {
            var26 = objExec;
            var26.wObjFlag &= -2;
         } else {
            var26 = objExec;
            var26.wObjFlag |= 1;
         }

         this.SpriteRun(objExec);
         break;
      case 6:
         this._SetAct(var1, 4096, 0);
         objExec.pal = 16777215;
         this._SetObj(var1, 15);
         this._SetSize(var1, 0, 0, 31457280, 20971520);
         tcbNow.md = 7;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 7:
         if (((PlayerState[0] & 1) != 0 || (PlayerState[1] & 1) != 0) && !bBlackOut) {
            _cameraPrio = 1;
            var26 = objExec;
            var26.wObjFlag &= -2;
         } else {
            if (tcbPlayer[0].md != 926 && tcbPlayer[0].md != 923 && tcbPlayer[0].md != 927 && tcbPlayer[0].md != 928 && tcbPlayer[1].md != 926 && tcbPlayer[1].md != 927 && tcbPlayer[1].md != 928 && tcbPlayer[1].md != 923) {
               _cameraPrio = 0;
            }

            var26 = objExec;
            var26.wObjFlag |= 1;
         }
         break;
      case 8:
         this._SetAct(var1, 1, 2);
         this._SetObj(var1, 12);
         this._ActReq(var1);
         tcbNow._work[6] = iBackYPos >> 16;
         tcbNow.md = 9;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 9:
         if (!bBlackOut && !bEffectFullScreen && bBackVisible && (PlayerState[0] & 1) == 0 && (PlayerState[1] & 1) == 0) {
            var23 = objExec;
            var23.wObjFlag &= -2;
         } else {
            var23 = objExec;
            var23.wObjFlag |= 1;
         }

         var3 = (iBackYPos * 3 / 5 >> 16) - 240 - objExec.oy;
         this._SetXY(var1, -8388608, -var3 << 16);
         objExec.ox = (iBackXOffset + iBackXPos) / 3;
         if (iZoomBase != 100) {
            var2 = iBackXPos;
            var4 = -var3;
            var3 = iZoomXCenter;
            var30 = iZoomYCenter;
            this._SetXY(var1, 15728640 + ((var2 - 8388608 - var3 >> 16) * iZoomBase / 100 << 16), 10485760 + (((var4 << 16) - var30 >> 16) * iZoomBase / 100 << 16));
         }

         var26 = objExec;
         var26.wObjFlag |= 2;
         tcbNow._work[6] = iBackYPos >> 16;
         objExec.iXZoomObj = iZoomBase;
         objExec.iYZoomObj = iZoomBase;
         break;
      case 10:
         this._SetAct(var1, 1, 1);
         this._SetObj(var1, 13);
         this._ActReq(var1);
         tcbNow._work[6] = iBackYPos >> 16;
         tcbNow.md = 11;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 11:
         if (!bBlackOut && !bEffectFullScreen && bBackVisible && (PlayerState[0] & 1) == 0 && (PlayerState[1] & 1) == 0) {
            var23 = objExec;
            var23.wObjFlag &= -2;
         } else {
            var23 = objExec;
            var23.wObjFlag |= 1;
         }

         var3 = (iBackYPos * 6 / 7 >> 16) - 230 - objExec.oy;
         this._SetXY(var1, -8388608, -var3 << 16);
         objExec.ox = (iBackXOffset + iBackXPos) / 2;
         if (iZoomBase != 100) {
            var2 = iBackXPos;
            var3 = -var3;
            var4 = iZoomXCenter;
            var30 = iZoomYCenter;
            this._SetXY(var1, 15728640 + ((var2 - 8388608 - var4 >> 16) * iZoomBase / 100 << 16), 10485760 + (((var3 << 16) - var30 >> 16) * iZoomBase / 100 << 16));
         }

         var26 = objExec;
         var26.wObjFlag |= 2;
         tcbNow._work[6] = iBackYPos >> 16;
         objExec.iXZoomObj = iZoomBase;
         objExec.iYZoomObj = iZoomBase;
         break;
      case 12:
         tcbNow._work[1] = 0;
         this._SetAct(var1, 5, 7);
         tcbNow.md = 13;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 13:
         var3 = tcbNow._work[0];
         if (!bBlackOut && (PlayerState[0] & 1) == 0 && (PlayerState[1] & 1) == 0) {
            if (!bBlackOut && iBackMode != 0) {
               var23 = objExec;
               var23.wObjFlag &= -2;

               for(var2 = 0; var2 < objExec.iLinkNum; ++var2) {
                  var23 = objExec.lnk[var2];
                  var23.wObjFlag &= -2;
               }

               this._SetAct(var1, 5, 7);
               this._SetObj(var1, 18);
               if (var3 == 0) {
                  var2 = tcbNow._work[1];
               } else {
                  var2 = -128 - tcbNow._work[1];
               }

               this._SetXY(var1, var2 << 16, -524288);
               var27 = tcbNow._work;
               var27[1] -= 16;
               if (tcbNow._work[1] <= -128) {
                  tcbNow._work[1] = 0;
               }
            } else {
               var26 = objExec;
               var26.wObjFlag |= 1;
            }
         } else {
            tcbNow.md = 14;
            tcbNow.lp = 0;
            var26 = objExec;
            var26.wObjFlag |= 1;
         }
         break;
      case 14:
         if ((PlayerState[0] & 1) == 0 && (PlayerState[1] & 1) == 0) {
            _cameraPrio = 0;
            this._TKilx(var1, 16129, 16129);
            tcbNow.md = 13;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 16:
         if (bBlackOut) {
            _cameraPrio = 0;
            var23 = objExec;
            var23.wObjFlag |= 1;
            this._SetAct(var1, 5, 0);
            this._SetXY(var1, 0, 0);
         } else {
            _cameraPrio = 1;
            var23 = objExec;
            var23.wObjFlag &= -2;
            this._ActReq(var1);
         }
         break;
      case 17:
         this._SetAct(var1, 5, 61);
         this._SetObj(var1, 20);
         this._ActReq(var1);
         tcbNow._work[6] = iBackYPos >> 16;
         tcbNow.md = 18;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 18:
         if (bBlackOut) {
            var23 = objExec;
            var23.wObjFlag |= 1;
            this._SetAct(var1, 5, 0);
            this._ActReq(var1);
            this._SetAct(var1, 5, 61);
         } else {
            var23 = objExec;
            var23.wObjFlag &= -2;

            for(var2 = 0; var2 < objExec.iLinkNum; ++var2) {
               var23 = objExec.lnk[var2];
               var23.wObjFlag &= -2;
            }

            var2 = iBackYPos;
            this._ActReq(var1);
            this._SetXY(var1, -tcbNow._work[0] * 480 << 16, 8 - (var2 >> 16) - 4 << 16);
         }
         break;
      case 19:
         int var8 = 0;
         byte var9 = 0;
         var4 = -1;
         int[] var32 = new int[2];
         int[] var24 = new int[2];
         boolean var5 = false;
         boolean var6 = false;
         if (iBackXSize != 0) {
            int[] var25;
            for(var2 = 0; var2 <= 1; ++var2) {
               if (CPUGuardTime[var2] != 0) {
                  var25 = CPUGuardTime;
                  int var10002 = var25[var2]--;
               }

               var3 = tcbPlayer[var2].obj.ano;
               if ((tcbPlayer[var2].iHitStop == 0 || tcbPlayer[var2].md != 876) && (PlayerState[var2] & 16777216) == 0 && var3 != 74 && var3 != 75 && iBackXSize != 0 && !ScrollCheckOff[var2]) {
                  var24[var2] = PlayerXPos[var2] - PlayerOldXPos[var2];
               } else {
                  var24[var2] = 0;
               }
            }

            int var7;
            int var10;
            int var11;
            for(var2 = 0; var2 <= 1; ++var2) {
               var11 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 3] / 2 << 16;
               var3 = iBackXPos + var11;
               var7 = iBackXPos + 31391744 - var11;
               var10 = 1 - var2;
               if (MaxComboCount[var2] < ComboCount[var2]) {
                  MaxComboCount[var2] = ComboCount[var2];
                  if (MaxComboCount[var2] > MaxComboCountSave[var2]) {
                     MaxComboCountSave[var2] = MaxComboCount[var2];
                  }
               }

               if ((tcbPlayer[var2].md < 911 || tcbPlayer[var2].md > 915) && iBackXOffset == 0 && tcbPlayer[var2].obj.ano != 88 && !ScreenEdgeOff[var2] && (iBaseXPos == 0 && PlayerXPos[var2] < var3 || iBaseXPos == 62849024 && PlayerXPos[var2] > var7)) {
                  if (PlayerXPos[var2] < iBackXPos - var11) {
                     tcbPlayer[var2].md = 932;
                  } else if (PlayerXPos[var2] >= iBackXPos + 31457280 + var11) {
                     tcbPlayer[var2].md = 933;
                  } else if (PlayerXPos[var2] < var3) {
                     if (HitTarget[var2] == 0 && PlayerOldXPos[var2] > PlayerXPos[var2] && CancelTime[var10] != 0 && PlayerAttack[var10] != 0) {
                        var25 = PlayerXPos;
                        var25[var10] += (PlayerOldXPos[var2] - PlayerXPos[var2]) * 4 / 5;
                     }

                     PlayerXPos[var2] = var3;
                  } else if (PlayerXPos[var2] > var7) {
                     if (HitTarget[var2] == 0 && PlayerOldXPos[var2] < PlayerXPos[var2] && CancelTime[var10] != 0 && PlayerAttack[var10] != 0) {
                        var25 = PlayerXPos;
                        var25[var10] += (PlayerOldXPos[var2] - PlayerXPos[var2]) * 4 / 5;
                     }

                     PlayerXPos[var2] = var7;
                  }
               }
            }

            if (PlayerYPos[0] >= 15728640 - (this.ChrGameData[3].piGameData[this.ChrGameData[3].piGameDataPos[3] + this.ChrGameData[3].piGameDataXSize[3] * 0 + 4] << 16) && PlayerYPos[1] >= 15728640 - (this.ChrGameData[4].piGameData[this.ChrGameData[4].piGameDataPos[3] + this.ChrGameData[4].piGameDataXSize[3] * 0 + 4] << 16) && (tcbPlayer[0].obj.wObjFlag & 8) == 0 && (tcbPlayer[1].obj.wObjFlag & 8) == 0 && (SpecialKind[0] & 16) == 0 && (SpecialKind[1] & 16) == 0) {
               var10 = (this.ChrGameData[3].piGameData[this.ChrGameData[3].piGameDataPos[3] + this.ChrGameData[3].piGameDataXSize[3] * 0 + 3] + this.ChrGameData[4].piGameData[this.ChrGameData[4].piGameDataPos[3] + this.ChrGameData[4].piGameDataXSize[3] * 0 + 3]) / 2 << 16;
               var2 = 0;

               label693:
               while(true) {
                  int var12;
                  if (var2 > 1) {
                     var2 = 0;

                     while(true) {
                        if (var2 > 1) {
                           break label693;
                        }

                        var3 = 1 - var2;
                        if ((tcbPlayer[var2].md < 911 || tcbPlayer[var2].md > 915) && PlayerXPos[var2] > PlayerXPos[var3] - var10 && PlayerXPos[var2] < PlayerXPos[var3] + var10 && iBackXOffset == 0) {
                           int var14 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 3] / 2;
                           var12 = iBackXPos;
                           int var20 = iBackXOffset;
                           int var19 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 3] / 2;
                           int var22 = iBackXPos;
                           int var17 = iBackXOffset;
                           int var15 = this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[3] + this.ChrGameData[var3 + 3].piGameDataXSize[3] * 0 + 3] / 2;
                           var7 = iBackXPos;
                           int var21 = iBackXOffset;
                           int var18 = this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[3] + this.ChrGameData[var3 + 3].piGameDataXSize[3] * 0 + 3] / 2;
                           var11 = iBackXPos;
                           int var16 = iBackXOffset;
                           int var13 = tcbPlayer[var2].obj.ano;
                           if (PlayerXPos[var2] == 31391744 - (var19 << 16) + var22 + var17 && PlayerYPos[var2] == 15728640 && (tcbPlayer[var2].obj.wObjFlag & 16) != 0) {
                              PlayerXPos[var3] = PlayerXPos[var2] - var10;
                              break label693;
                           }

                           if (PlayerXPos[var2] == (var14 << 16) + var12 + var20 && PlayerYPos[var2] == 15728640 && (tcbPlayer[var2].obj.wObjFlag & 16) == 0) {
                              PlayerXPos[var3] = PlayerXPos[var2] + var10;
                              break label693;
                           }

                           if (PlayerXPos[var3] == 31391744 - (var18 << 16) + var11 + var16 && var13 != 88) {
                              PlayerXPos[var2] = PlayerXPos[var3] - var10;
                              break label693;
                           }

                           if (PlayerXPos[var3] == (var15 << 16) + var7 + var21 && var13 != 88) {
                              PlayerXPos[var2] = PlayerXPos[var3] + var10;
                              break label693;
                           }

                           if (PlayerXPos[var2] < PlayerXPos[var3]) {
                              PlayerXPos[var3] = PlayerXPos[var2] + var10;
                           } else {
                              PlayerXPos[var3] = PlayerXPos[var2] - var10;
                           }

                           if (var2 == 1) {
                              var7 = (this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[3] + this.ChrGameData[var3 + 3].piGameDataXSize[3] * 0 + 3] / 2 << 16) + iBackXPos + iBackXOffset;
                              var11 = 31391744 - (this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[3] + this.ChrGameData[var3 + 3].piGameDataXSize[3] * 0 + 3] / 2 << 16) + iBackXPos + iBackXOffset;
                              if (PlayerXPos[var3] >= var11) {
                                 PlayerXPos[var3] = var11;
                                 PlayerXPos[var2] = PlayerXPos[var3] - var10;
                              } else if (PlayerXPos[var3] <= var7) {
                                 PlayerXPos[var3] = var7;
                                 PlayerXPos[var2] = PlayerXPos[var3] + var10;
                              }
                           }

                           var24[var3] = PlayerXPos[var3] - PlayerOldXPos[var3];
                           break label693;
                        }

                        ++var2;
                     }
                  }

                  if (tcbPlayer[var2].md < 911 || tcbPlayer[var2].md > 915) {
                     var11 = 1 - var2;
                     var12 = tcbPlayer[var11].md;
                     var7 = PlayerOldXPos[var2] - PlayerXPos[var2];
                     var3 = var7;
                     if (var12 != 876) {
                        var3 = var7;
                        if (var12 != 877) {
                           var3 = var7;
                           if (var12 != 908) {
                              var3 = (var7 >> 16) / 2 << 16;
                           }
                        }
                     }

                     if (PlayerOldXPos[var2] > PlayerXPos[var2]) {
                        if (PlayerXPos[var2] > PlayerXPos[var11] && PlayerXPos[var2] < PlayerXPos[var11] + var10) {
                           var25 = PlayerXPos;
                           var25[var2] &= -128;
                           var25 = PlayerXPos;
                           var25[var11] &= -128;
                           PlayerXPos[var2] = PlayerXPos[var11] + var10 - var3;
                           PlayerXPos[var11] -= var3;
                           var24[var11] = PlayerXPos[var11] - PlayerOldXPos[var11];
                           var24[var2] = PlayerXPos[var2] - PlayerOldXPos[var2];
                        }
                     } else if (PlayerOldXPos[var2] < PlayerXPos[var2] && PlayerXPos[var2] < PlayerXPos[var11] && PlayerXPos[var2] > PlayerXPos[var11] - var10) {
                        var25 = PlayerXPos;
                        var25[var2] &= -128;
                        var25 = PlayerXPos;
                        var25[var11] &= -128;
                        PlayerXPos[var2] = PlayerXPos[var11] - var10 - var3;
                        PlayerXPos[var11] -= var3;
                        var24[var11] = PlayerXPos[var11] - PlayerOldXPos[var11];
                        var24[var2] = PlayerXPos[var2] - PlayerOldXPos[var2];
                     }
                  }

                  ++var2;
               }
            }

            iBackXAdd = 0;

            for(var2 = 0; var2 <= 1; ++var2) {
               var3 = PlayerXPos[var2];
               if (iBackXOffset != 0) {
                  var24[var2] = 0;
               } else {
                  var7 = 1 - var2;
                  var11 = PlayerXPos[var7];
                  var10 = this.ChrGameData[var7 + 3].piGameData[this.ChrGameData[var7 + 3].piGameDataPos[3] + this.ChrGameData[var7 + 3].piGameDataXSize[3] * 0 + 3] / 2;
                  if (iBaseXPos + var24[var2] <= 0) {
                     var24[var2] = -iBaseXPos;
                  }

                  if (iBaseXPos + var24[var2] >= 62849024) {
                     var24[var2] = 62849024 - iBaseXPos;
                  }

                  if (!bScrollLock && !bBlackOut) {
                     if (!ThrowDamage[var2] && !ThrowDamage[var7] && iBackXOffset == 0) {
                        if (var3 >= iBackXPos + 4587520) {
                           if (var3 >= iBackXPos + 26869760) {
                              if (var24[var2] < 0 && var11 >= iBackXPos + 4587520 && Life[var2] > 0) {
                                 var24[var2] = 0;
                              } else if (var24[var2] > 0 && var11 <= iBackXPos + (var10 << 16) && Life[var2] > 0) {
                                 var24[var2] = 0;
                              }
                           } else {
                              var24[var2] = 0;
                           }
                        } else if ((var24[var2] > 0 && var11 < iBackXPos + 26869760 || var24[var2] < 0 && var11 >= iBackXPos + (480 - var10 - 1 << 16)) && Life[var2] > 0) {
                           var24[var2] = 0;
                        }
                     } else {
                        var24[var2] = 0;
                     }
                  } else {
                     var24[var2] = 0;
                  }
               }
            }

            bScrollLock = false;

            for(var2 = 0; var2 <= 1; ++var2) {
               var7 = PlayerXPos[var2];
               if ((tcbPlayer[var2].obj.wObjFlag & 16) == 0) {
                  var3 = 4587520;
               } else {
                  var3 = 26869760;
               }

               if (var7 < iBackXPos + var3 && var24[var2] > 0 || var7 >= iBackXPos + 26869760 && var24[var2] < 0) {
                  var24[var2] >>= 1;
               }

               iBackXScroll += var24[var2];
            }

            iBaseXPos += iBackXScroll;
            iBackXPos += iBackXScroll;
            var24 = iBackXPosSprite;
            var24[0] += iBackXScroll;
            var24 = iBackXPosSprite;
            var24[1] += iBackXScroll;
            var24 = iBackXPosSprite;
            var24[2] += iBackXScroll;
            iBackXScroll = 0;
            var2 = var4;
            int var28;
            if (tcbPlayer[1] != null) {
               var2 = 0;
               var5 = var6;

               boolean var29;
               while(true) {
                  var29 = var5;
                  var7 = var4;
                  var28 = var9;
                  if (var2 > 1) {
                     break;
                  }

                  boolean var31 = false;
                  var8 = tcbPlayer[var2].md;
                  var3 = tcbPlayer[var2].obj.wObjFlag;
                  if (var8 == 876) {
                     var6 = var31;
                     var29 = var5;
                     switch(this.pGameData.piGameData[this.pGameData.piGameDataPos[DamageType[var2] + 10] + DamageIndex[var2] * this.pGameData.piGameDataXSize[DamageType[var2] + 10] + 12]) {
                     case 1:
                        var6 = var31;
                        var29 = var5;
                        if (DamageWall[var2]) {
                           var6 = true;
                           var29 = var5;
                        }
                     case 2:
                        break;
                     case 3:
                        var29 = true;
                        iBaseXPos += iBackXOffset;
                        var6 = var31;
                        break;
                     default:
                        var29 = var5;
                        var6 = var31;
                     }
                  } else {
                     var6 = var31;
                     var29 = var5;
                     if (var8 == 877) {
                        switch(this.ChrGameData[1 - var2 + 3].piGameData[this.ChrGameData[1 - var2 + 3].piGameDataPos[DamageType[var2] + 14] + DamageIndex[var2] * this.ChrGameData[1 - var2 + 3].piGameDataXSize[DamageType[var2] + 14] + 12]) {
                        case 1:
                           var6 = var31;
                           var29 = var5;
                           if (DamageWall[var2]) {
                              var6 = true;
                              var29 = var5;
                           }
                           break;
                        case 2:
                        default:
                           var6 = var31;
                           var29 = var5;
                           break;
                        case 3:
                           var29 = true;
                           iBaseXPos += iBackXOffset;
                           var6 = var31;
                        }
                     }
                  }

                  if (var6 && DamageWall[var2]) {
                     var28 = PlayerXPos[var2] - iBackXPos - 15728640;
                     var7 = var2;
                     break;
                  }

                  if (tcbPlayer[var2].md == 918) {
                     var4 = var2;
                  }

                  ++var2;
                  var5 = var29;
               }

               if (iScrollTarget != -1) {
                  var7 = iScrollTarget;
               }

               if (var7 != -1) {
                  var28 = PlayerXPos[var7] - iBackXPos - 15728640;
               }

               var5 = var29;
               var2 = var7;
               var8 = var28;
               if (var28 == 0) {
                  label835: {
                     if (iBackXOffset == 0 && Life[0] > 0) {
                        var5 = var29;
                        var2 = var7;
                        var8 = var28;
                        if (Life[1] > 0) {
                           break label835;
                        }
                     }

                     iBackXPos += iBackXOffset;
                     var24 = iBackXPosSprite;
                     var24[0] += iBackXOffset;
                     var24 = iBackXPosSprite;
                     var24[1] += iBackXOffset;
                     var24 = iBackXPosSprite;
                     var24[2] += iBackXOffset;
                     iBackXOffset = 0;
                     var8 = var28;
                     var2 = var7;
                     var5 = var29;
                  }
               }
            }

            if (iBackXOffset <= var8 - 1048576) {
               iBackXOffset += 786432;
            } else if (iBackXOffset <= var8 - 786432) {
               iBackXOffset += 524288;
            } else if (iBackXOffset <= var8 - 393216) {
               iBackXOffset += 262144;
            } else if (iBackXOffset <= var8 - 262144) {
               iBackXOffset += 131072;
            } else if (iBackXOffset < var8) {
               iBackXOffset = var8;
            } else if (iBackXOffset >= 1048576 + var8) {
               iBackXOffset -= 786432;
            } else if (iBackXOffset >= 786432 + var8) {
               iBackXOffset -= 524288;
            } else if (iBackXOffset >= 393216 + var8) {
               iBackXOffset -= 262144;
            } else if (iBackXOffset >= 262144 + var8) {
               iBackXOffset -= 131072;
            } else if (iBackXOffset > var8) {
               iBackXOffset = var8;
            }

            if (iBackXSize != 0) {
               if (iBackXPos < iBackXSize << 16) {
                  iBackXAdd = iBackXSize * 3 << 16;
               }

               if (iBackXPos >> 16 >= iBackXSize * 7) {
                  iBackXAdd = -(iBackXSize * 3 << 16);
               }
            }

            iBackXPos += iBackXAdd;

            for(var3 = 0; var3 <= 1; ++var3) {
               var24 = PlayerXPos;
               var24[var3] += iBackXAdd;
            }

            if (var2 != -1) {
               iBackYOffset = PlayerYPos[var2] - 15728640 >> 16;
            } else {
               for(var3 = 0; var3 <= 1; ++var3) {
                  var32[var3] = PlayerYPos[var3] - 15728640 >> 16;
                  if (var32[var3] > 240) {
                     var32[var3] = 240;
                  }
               }

               if (var32[0] < var32[1]) {
                  iBackYOffset = var32[0];
               } else {
                  iBackYOffset = var32[1];
               }

               iBackYOffset = (var32[0] + var32[1]) / 2;
            }

            if (iBackXOffset == 0 && var2 == -1) {
               for(var2 = 0; var2 <= 1; ++var2) {
                  var3 = PlayerXPos[var2] - iBackXPos;
                  var30 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 3] / 2 << 16;
                  var4 = 31391744 - var30;
                  if ((tcbPlayer[var2].md < 911 || tcbPlayer[var2].md > 915) && !ScreenEdgeOff[var2]) {
                     var28 = 1 - var2;
                     if (var3 < var30 && Life[var28] > 0) {
                        if (ThrowDamage[var2]) {
                           var32 = PlayerXPos;
                           var32[var28] += iBackXPos + var30 - PlayerXPos[var2];
                        }

                        PlayerXPos[var2] = iBackXPos + var30;
                     }

                     if (var3 > var4 && Life[var28] > 0) {
                        if (ThrowDamage[var2]) {
                           var32 = PlayerXPos;
                           var32[var28] += iBackXPos + var4 - PlayerXPos[var2];
                        }

                        PlayerXPos[var2] = iBackXPos + var4;
                     }
                  }
               }
            } else if (!var5) {
               iBaseXPos = 31457280;
            }

            for(var2 = 0; var2 <= 1; ++var2) {
               PlayerOldXPos[var2] = PlayerXPos[var2];
               if ((iBackMode & 1 << var2) != 0) {
                  var3 = tcbPlayer[var2].obj.ano;
                  if (SpecialType[var2] < 9 || PlayerAttack[var2] == 0) {
                     this._TKilx(var1, var2 + 13632, var2 + 13632);
                     this._TKilx(var1, var2 + 13640, var2 + 13640);
                     this._TKilx(var1, var2 + 13648, var2 + 13648);
                     iBackMode &= ~(1 << var2);
                  }
               }
            }

            if (iBackXPosSprite[0] < 0) {
               var27 = iBackXPosSprite;
               var27[0] += iBackXSize << 16;
            } else if (iBackXPosSprite[0] > iBackXSize << 16) {
               var27 = iBackXPosSprite;
               var27[0] %= iBackXSize << 16;
            }

            if (iBackXPosSprite[1] < 0) {
               var27 = iBackXPosSprite;
               var27[1] += iBackXSize * 3 << 16;
            } else if (iBackXPosSprite[1] > iBackXSize * 3 << 16) {
               var27 = iBackXPosSprite;
               var27[1] %= iBackXSize * 3 << 16;
            }

            if (iBackXPosSprite[2] < 0) {
               var27 = iBackXPosSprite;
               var27[2] += iBackXSize * 2 << 16;
            } else if (iBackXPosSprite[2] > iBackXSize * 2 << 16) {
               var27 = iBackXPosSprite;
               var27[2] %= iBackXSize * 2 << 16;
            }
         }
         break;
      case 20:
         this._SetAct(var1, 1, 1);
         this._SetObj(var1, 13);
         this._ActReq(var1);
         tcbNow.md = 21;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 21:
         this._SetXY(var1, 31981568, 9961472);
         var26 = objExec;
         var26.wObjFlag |= 2;
         break;
      case 22:
         tcbNow._work[1] = 0;
         this._SetAct(var1, 5, 19);
         tcbNow.md = 23;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 23:
         if (!bBlackOut && (PlayerState[0] & 1) == 0 && (PlayerState[1] & 1) == 0) {
            var23 = objExec;
            var23.wObjFlag &= -2;
            this._SetObj(var1, 18);
            this._SetXY(var1, 0, tcbNow._work[1] + 0 - 96 << 16);

            for(var2 = 0; var2 < objExec.iLinkNum; ++var2) {
               var26 = objExec.lnk[var2];
               var26.wObjFlag &= -2;
            }

            var27 = tcbNow._work;
            var27[1] -= 4;
            if (tcbNow._work[1] <= 0) {
               tcbNow._work[1] = 48;
            }
         } else {
            tcbNow.md = 12;
            tcbNow.lp = 0;
            var26 = objExec;
            var26.wObjFlag |= 1;
         }
      }

   }

   public void Game2(GlobalWork var1, int var2) {
      short var3;
      int var5;
      int var6;
      int[] var11;
      int var12;
      int var13;
      byte var16;
      int var10002;
      switch(var2) {
      case 0:
      case 731:
      case 785:
      default:
         break;
      case 732:
         this._TLoop(var1, 60, 733);
         break;
      case 733:
         var2 = tcbPlayer[0].md;
         var12 = tcbPlayer[1].md;
         if ((Life[0] == 0 || var2 == 864 || var2 == 908 || var2 == 872) && (Life[1] == 0 || var12 == 864 || var12 == 908 || var12 == 872) && (PlayerYPos[0] == 15728640 || PlayerAir[0]) && (PlayerYPos[1] == 15728640 || PlayerAir[1]) && !bBlackOut && iBackXOffset == 0 && iBackMode == 0) {
            iBackMode = 0;
            this._TKilx(var1, 13744, 13744);
            this._TLoop(var1, 40, 734);
         }
         break;
      case 734:
         if (Life[0] < Life[1] || WinPoint[0] == 0) {
            this._TKilx(var1, 20480, 20480);
         }

         tcbNow.md = 748;
         tcbNow.lp = 0;
         break;
      case 735:
         if ((iEventStatus & 1) == 0) {
            this.CreatePanel(var1, 20480, 4096, 16777215, 12288, 0, -6553600, 0, 0, 0, 0, 0, 0, 0, 44564480, 20971520);
            tcbNow.md = 736;
            tcbNow.lp = 0;
         }
         break;
      case 736:
         bTaskNext = true;
         this._TKilx(var1, 20480, 20480);
         this._TKilx(var1, 13056, 13056);
         this._TKilx(var1, 13184, 13185);
         if (this.isMission(var1) != 0 || this.isMission(var1) == 0 && iStage > 3 || iPlayMode == 8) {
            this.CreatePanelSingle(var1, 20480, 5, 20, 12304, 0, 120, 104);
         }

         bClrBack = true;
         iClrR = 0;
         iClrG = 0;
         iClrB = 0;
         PlayerKey[0] = 0;
         PlayerKey[1] = 0;
         Dash[0] = 0;
         Dash[1] = 0;
         tcbNow.md = 737;
         tcbNow.lp = 0;
         break;
      case 737:
         if (tcbNow.lp == 0) {
            iTaskSleep = 3;
         }

         tcbNow._work[0] = 3;
         this._TLoop(var1, 6, 738);
         break;
      case 738:
         if (tcbNow.lp == 0) {
            iTaskSleep = 2;
         }

         this._TLoop(var1, 4, 739);
         break;
      case 739:
         if (tcbNow._work[0] != 0) {
            var11 = tcbNow._work;
            var10002 = var11[0]--;
            tcbNow.md = 738;
            tcbNow.lp = 0;
            bTaskRepeat = true;
         } else {
            this._TKilx(var1, 24576, 24576);
            if (this.isMission(var1) == 0 && iStage <= 3 && iPlayMode != 8) {
               this.CreatePanelSingle(var1, 20480, 5, 380, 12304, 0, 120, 104);
            }

            tcbNow.md = 740;
            tcbNow.lp = 0;
         }
         break;
      case 740:
         if (((PlayerState[0] & 16777216) != 0 || (Life[0] == 0 || tcbPlayer[0].md == 864 || tcbPlayer[0].md == 872) && (PlayerYPos[0] == 15728640 || PlayerAir[0])) && ((PlayerState[1] & 16777216) != 0 || (Life[1] == 0 || tcbPlayer[1].md == 864 || tcbPlayer[1].md == 872) && (PlayerYPos[1] == 15728640 || PlayerAir[1])) && iBackXOffset == 0 && !bBlackOut && iBackMode == 0) {
            iBackMode = 0;
            this._TKilx(var1, 13744, 13744);
            this._TLoop(var1, 50, 741);
         }
         break;
      case 741:
         tcbNow.md = 742;
         tcbNow.lp = 0;
         break;
      case 742:
         var2 = iPlayerNo;
         this._TKilx(var1, 20480, 20480);
         if (this.MissionClearCheck(var1, 0, iStage) == 0 || iPlayMode == 8) {
            if (Life[0] <= Life[1]) {
               var2 = 1;
            } else {
               var2 = 0;
            }
         }

         bWin = false;
         if (iPlayerNo == var2) {
            bWin = true;
         } else {
            StageLose = 1;
            RoundLose = 1;
            bWin = false;
         }

         if (tcbPlayer[var2].md == 864 || tcbPlayer[var2].md == 872) {
            tcbPlayer[var2].md = 918;
         }

         tcbNow.md = 745;
         tcbNow.lp = 0;
         break;
      case 743:
         if (iBackYScroll == 0) {
            this._TLoop(var1, 40, 744);
         } else {
            iBackYScroll += 4;
         }
         break;
      case 744:
         bStartAction[1] = true;
         tcbNow.md = 721;
         tcbNow.lp = 0;
         break;
      case 745:
         var12 = iStage;
         var2 = var12;
         if (var12 > 7) {
            var2 = 7;
         }

         PlayerKey[0] = 0;
         PlayerKey[1] = 0;
         this._TKilx(var1, 13056, 13056);
         this._TKilx(var1, 13184, 13185);
         this._TKilx(var1, 20480, 20480);
         if (bWin) {
            var12 = iPlayerNo;
         } else {
            var12 = 1 - iPlayerNo;
         }

         if (tcbPlayer[var12].obj.ano == 15) {
            int[] var18 = WinPoint;
            var10002 = var18[var12]++;
            var18 = StageTime;
            var18[var12] += 60 - iTimer;
            TotalTime += 60 - iTimer;
            ClearTime += 60 - iTimer;
            if (Life[var12] == PlayerLife[var12]) {
               var18 = PerfectNum;
               var10002 = var18[var12]++;
            }

            byte var15;
            if (bWin) {
               if (WinPoint[var12] < iStagePoint) {
                  tcbNow.md = 749;
                  tcbNow.lp = 0;
               } else {
                  StageWin = 1;
               }

               var15 = 8;
            } else {
               var15 = 9;
               tcbNow.md = 749;
               tcbNow.lp = 0;
            }

            if ((this.isMission(var1) == 0 && iStage > 3 || this.isMission(var1) != 0 || iPlayMode == 8) && var15 != -1) {
               if (var15 == 8) {
                  this.CreatePanelSingle(var1, 20480, 5, 246, 400, 0, 0, 0);
               } else {
                  this.CreatePanelSingle(var1, 20480, 5, 247, 400, 0, 0, 0);
               }
            }

            if (WinPoint[0] < iStagePoint && WinPoint[1] >= iStagePoint) {
            }

            if (bWin && WinPoint[var12] >= iStagePoint) {
               var5 = iPlayerNo;

               for(var12 = 1; var12 < 19; ++var12) {
                  StageBonus[var12] = 0;
               }

               var12 = PlayerType[var5];
               var6 = this.GetLevel(var1, var12);
               StageBonus[6] = var6 + 1;
               StageBonus[7] = this.GetExp(var1, var12);
               var18 = StageBonus;
               short var17;
               if (var6 == 98) {
                  var17 = 0;
               } else {
                  var17 = this.pGameData.piGameData[this.pGameData.piGameDataPos[43] + var6 / 5 * this.pGameData.piGameDataXSize[43] + 0];
               }

               var18[8] = var17;
               var12 = PlayerLife[var5];
               int var7 = iRound;
               var13 = TotalDamage[var5];
               tcbNow._work[2] = (var12 * (var7 + 1) - var13) * 100 * WinPoint[var5] / (PlayerLife[var5] * (iRound + 1));
               tcbNow._work[3] = WinPoint[var5] * 60 - StageTime[var5];
               tcbNow._work[4] = StageBonus[7] + var6 * 1000;
               StageBonus[0] = tcbNow._work[2] / 2 * 100;
               if (StageBonus[0] < 0) {
                  StageBonus[0] = 0;
               }

               if (PerfectNum[var5] != 0) {
                  var18 = StageBonus;
                  var18[0] += PerfectNum[var5] * 10000;
               }

               StageBonus[1] = tcbNow._work[3] / 2 * 100;
               if (StageBonus[1] < 0) {
                  StageBonus[1] = 0;
               }

               StageBonus[2] = MaxComboCount[var5] * 300;
               var13 = 0;

               for(var12 = 0; var12 < 4; ++var12) {
                  var13 += StageBonus[var12];
               }

               StageBonus[4] = var13;
               StageBonus[2] = 300;
               StageBonus[3] = MaxComboCount[var5];
               tcbNow._work[0] = 0;
               tcbNow._work[1] = 0;
               var7 = tcbNow._work[2];
               var13 = tcbNow._work[3];
               if (iPlayMode != 5) {
                  if (iPlayMode == 0) {
                     if (this.isMission(var1) == 0) {
                        StageBonus[10] = 0;
                        StageBonus[9] = this.pGameData.piGameData[this.pGameData.piGameDataPos[4] + this.pGameData.piGameDataXSize[4] * 11 + iStage];
                     } else {
                        for(var12 = 9; var12 >= 0; --var12) {
                           if (var7 * var13 >= (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[0] + var12 * 2 * this.pGameData.piGameDataXSize[0] + 0 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[0] + var12 * 2 * this.pGameData.piGameDataXSize[0] + 0] & 255) * 100) {
                              StageBonus[9] = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[0] + var12 * 2 * this.pGameData.piGameDataXSize[0] + (iDifficulty + 1) * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[0] + var12 * 2 * this.pGameData.piGameDataXSize[0] + (iDifficulty + 1) * 2] & 255);
                              break;
                           }
                        }

                        StageBonus[10] = this.pGameData.piGameData[this.pGameData.piGameDataPos[41] + this.pGameData.piGameDataXSize[41] * var2 + iDifficulty] * 10;
                        var18 = StageBonus;
                        var18[9] += this.pGameData.piGameData[this.pGameData.piGameDataPos[4] + (iDifficulty + 6) * this.pGameData.piGameDataXSize[4] + var2];
                     }
                  } else if (iPlayMode == 1 && iStage % 5 == 4) {
                     StageBonus[10] = this.pGameData.piGameData[this.pGameData.piGameDataPos[42] + iStage / 5 * this.pGameData.piGameDataXSize[42] + 0] * 10;
                  }

                  if (StageBonus[9] > 99000) {
                     StageBonus[9] = 99000;
                  }

                  if (StageBonus[10] > 999000) {
                     StageBonus[10] = 999000;
                  }

                  StageBonus[11] = 0;
                  if (StageBonus[12] > 99999) {
                     StageBonus[12] = 99999;
                  }

                  this.AddBP(var1, StageBonus[10]);
                  if (var6 < 98) {
                     this.AddExp(var1, var5, StageBonus[9]);
                  }

                  this.AddRP(var1, var5, StageBonus[12]);
                  if (var6 >= 98) {
                     StageBonus[9] = 0;
                  }

                  if (iPlayMode == 0) {
                     if (MaxComboCount[var5] >= 13) {
                        var16 = 0;
                     } else if (MaxComboCount[var5] >= 8) {
                        var16 = 1;
                     } else if (PerfectNum[var5] != 0) {
                        var16 = 2;
                     } else {
                        var16 = -1;
                     }

                     if (var16 != -1) {
                        var12 = 0;
                        var13 = 0;

                        for(var5 = (int)(this.genrand_int32(var1) % 100L); var13 < 100; ++var12) {
                           var13 += this.pGameData.piGameData[this.pGameData.piGameDataPos[53] + this.pGameData.piGameDataXSize[53] * var12 + iDifficulty * 3 + var16];
                           if (var5 < var13) {
                              break;
                           }
                        }

                        var2 = 0;
                        if (var12 >= 1 && var12 <= 4) {
                           var2 = var12 + 256;
                        } else if (var12 >= 5 && var12 <= 7) {
                           var2 = var12 + 16 - 4;
                        } else if (var12 == 8) {
                           var2 = 545;
                        }

                        StageBonus[11] = var2;
                     }
                  }
               }

               tcbNow.md = 749;
               tcbNow.lp = 0;
            }
         }
         break;
      case 746:
         this._TLoop(var1, 60, 749);
         break;
      case 747:
         var12 = tcbNow._work[1];
         this._TKilx(var1, var12 + 20608, var12 + 20608);
         if (tcbNow._work[3] == tcbNow._work[5]) {
            var2 = tcbNow._work[6];
         } else {
            var2 = var12 + 20608;
         }

         this.CreateValueObject(var1, var2, tcbNow._work[5], tcbNow._work[4], StageBonus[var12], tcbNow._work[2], 8, 153, 12417, 0);
         if (tcbNow._work[3] == tcbNow._work[5]) {
            this._TKill(var1);
         } else {
            var11 = tcbNow._work;
            var11[5] -= 32;
            if (tcbNow._work[5] <= tcbNow._work[3]) {
               tcbNow._work[5] = tcbNow._work[3];
            }
         }
         break;
      case 748:
         var12 = Life[0];
         var2 = Life[1];
         if ((Life[0] == 0 || tcbPlayer[0].md == 864 || tcbPlayer[0].md == 872) && (Life[1] == 0 || tcbPlayer[1].md == 864 || tcbPlayer[1].md == 872) && (PlayerYPos[0] == 15728640 || PlayerAir[0]) && (PlayerYPos[1] == 15728640 || PlayerAir[1]) && iBackXOffset == 0 && !bBlackOut && iBackMode == 0) {
            this._TKilx(var1, 13728, 13728);
            this._TKilx(var1, 13808, 13823);
            byte var19;
            if (var12 > var2) {
               var19 = 0;
            } else {
               var19 = 1;
            }

            if (tcbPlayer[var19].md == 864 || tcbPlayer[var19].md == 872) {
               tcbPlayer[var19].md = 918;
            }

            if (tcbPlayer[1 - var19].md == 864 || tcbPlayer[1 - var19].md == 872) {
               tcbPlayer[1 - var19].md = 920;
            }

            if (iPlayerNo == var19) {
               bWin = true;
            } else {
               bWin = false;
            }

            tcbNow.md = 745;
            tcbNow.lp = 0;
         }
         break;
      case 749:
         if (bWin) {
            var2 = iPlayerNo;
         } else {
            var2 = 1 - iPlayerNo;
         }

         ++iRound;
         tcbNow._work[0] = 0;
         tcbNow._work[1] = 0;
         if (bWin && iPlayMode != 0) {
            if (iPlayMode != 5) {
               tcbNow._work[var2] = iTimer * this.pGameData.piGameData[this.pGameData.piGameDataPos[3] + this.pGameData.piGameDataXSize[3] * 4 + CPULevel[1]] / 100;
            }

            var11 = PlayerOrder;
            var2 = 1 - var2;
            var10002 = var11[var2]++;
         } else {
            var11 = PlayerOrder;
            var2 = iPlayerNo;
            var10002 = var11[var2]++;
         }

         tcbNow._work[2] = 120;
         tcbNow.md = 750;
         tcbNow.lp = 0;
         break;
      case 750:
         if (iPlayMode == 8) {
            if (tcbNow._work[2] != 0) {
               var11 = tcbNow._work;
               var10002 = var11[2]--;
            }

            if (tcbNow._work[2] == 0) {
               PlayerLife[0] = Life[0];
               PlayerLife[1] = Life[1];
               if (WinPoint[0] < iStagePoint && WinPoint[1] < iStagePoint) {
                  tcbNow.md = 751;
                  tcbNow.lp = 0;
               } else {
                  iPlayBGMNo = -1;
                  tcbNow.md = 753;
                  tcbNow.lp = 0;
               }
            }
         } else {
            for(var2 = 0; var2 < 2; ++var2) {
               if (tcbNow._work[var2] != 0) {
                  if (Life[var2] < PlayerLife[var2]) {
                     var11 = Life;
                     var10002 = var11[var2]++;
                     var11 = tcbNow._work;
                     var10002 = var11[var2]--;
                  } else {
                     tcbNow._work[var2] = 0;
                  }

                  if (tcbNow._work[0] == 0 && tcbNow._work[1] == 0) {
                     tcbNow._work[2] = 20;
                  }
               }
            }

            if (tcbNow._work[2] != 0) {
               var11 = tcbNow._work;
               var10002 = var11[2]--;
            }

            if (tcbNow._work[0] == 0 && tcbNow._work[1] == 0 && tcbNow._work[2] == 0) {
               PlayerLife[0] = Life[0];
               PlayerLife[1] = Life[1];
               if (WinPoint[0] < iStagePoint && WinPoint[1] < iStagePoint) {
                  tcbNow.md = 751;
                  tcbNow.lp = 0;
               } else {
                  iPlayBGMNo = -1;
                  tcbNow.md = 753;
                  tcbNow.lp = 0;
               }
            }
         }
         break;
      case 751:
         if (iPlayMode == 8) {
            bEventValueBuf[0] = 2;
            if (bEventValue[0][0] == 2 && bEventValue[1][0] == 2) {
               this.CreateWipeInOut(var1, 1);
               tcbNow.md = 752;
               tcbNow.lp = 0;
            }
         } else {
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 752;
            tcbNow.lp = 0;
         }
         break;
      case 752:
         if (iFade != 0) {
            if (iFade >= 254) {
               this._TKilx(var1, 8193, 65535);
               iFade = 0;
            }
         } else {
            tcbNow.md = 717;
            tcbNow.lp = 0;
            bDrawSkip = true;
         }
         break;
      case 753:
         if (iPlayMode == 8) {
            bEventValueBuf[0] = 2;
            if (bEventValue[0][0] == 2 && bEventValue[1][0] == 2) {
               this.CreateWipeInOut(var1, 1);
               tcbNow.md = 754;
               tcbNow.lp = 0;
            }
         } else {
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 754;
            tcbNow.lp = 0;
         }
         break;
      case 754:
         var2 = iPlayerNo;
         if (iFade != 0) {
            if (iFade < 254) {
               break;
            }

            iFade = 0;
            this._TKilx(var1, 8193, 65535);
            if (iPlayMode == 8) {
               this.BTReset(var1, true);
            }
         }

         iBackKeyType = 1;
         if (iPlayMode != 8) {
            ++iStage;
         }

         tcbNow.md = 196;
         tcbNow.lp = 0;
         break;
      case 755:
         this._TKilx(var1, 8193, 65535);
         bClrBack = true;
         iClrR = 0;
         iClrG = 0;
         iClrB = 0;
         PlayerType[1] = -1;
         TCB var10 = this._TaskMake(var1, 808, 24576);
         var10._work[0] = 11;
         this.CREATE_STRING(var1, 101, 24576, 0, 40, 12304, 0, 1048576, 7864320, 0, 0, 0, 0, 0, 0, 16);
         var10._work[1] = 12288;
         var10 = this._TaskMake(var1, 839, 20488);
         var10._work[0] = 49;
         var10._work[1] = 12304;
         var10._work[2] = 0;
         this.CreatePanel(var1, 20488, 4096, 16750080, 12289, 0, 0, 9633792, 0, 0, 0, 0, 0, 0, 15728640, 6094848);
         this.CreatePanel(var1, 20488, 4096, 16777215, 12290, 0, 0, 9633792, 0, 0, 0, 0, 0, 0, 15728640, 196608);
         this._TaskMake(var1, 20, 20480);
         tcbNow.md = 756;
         tcbNow.lp = 0;
         break;
      case 756:
         if (wSystemFlag > 2) {
            this._TKilx(var1, 8193, 65535);
            if (iPlayMode == 5) {
               tcbNow.md = 759;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 757;
               tcbNow.lp = 0;
            }
         }
         break;
      case 757:
         this.GdtBGM(var1, 28);
         tcbNow._work[0] = 0;
         tcbNow._work[1] = 1;
         tcbNow._work[2] = 0;
         tcbNow._work[3] = 0;
         tcbNow.md = 758;
         tcbNow.lp = 0;
         break;
      case 758:
         bClrBack = true;
         iClrR = 0;
         iClrG = 0;
         iClrB = 0;
         if ((JoyTrig[0] & 16640) != 0) {
            tcbNow.md = 759;
            tcbNow.lp = 0;
         } else {
            if (tcbNow._work[0] % 40 == 0) {
               if (tcbNow._work[2] < 40) {
                  var2 = tcbNow._work[1] % 8 + 20480;
                  this._TKilx(var1, var2, var2);
                  this.CreatePanel(var1, var2, 8192, tcbNow._work[2] + 460, 16384, 16777215, 0, 22609920, 0, -9175040, 0, -65536, 0, 0, 0, 0);
                  tcbNow._work[1] = (tcbNow._work[1] + 1) % 8;
                  var11 = tcbNow._work;
                  var10002 = var11[2]++;
               } else {
                  tcbNow.md = 759;
                  tcbNow.lp = 0;
               }
            }

            var11 = tcbNow._work;
            var10002 = var11[0]++;
         }
         break;
      case 759:
         this._TKilx(var1, 8193, 65535);
         iSystemFix = -1;
         bClrBack = true;
         iClrR = 0;
         iClrG = 0;
         iClrB = 0;
         break;
      case 760:
         for(var2 = 0; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         LoadData[1] = 0;
         this.SetLoad(var1, true);
         this._TKilx(var1, 8193, 65535);
         iBTErrMess = 0;
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 1, 51, 12288 + 6, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 10, 12288 + 10, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 10, 24576 + 1, 12288 + 25, 144, 112, 16);
         this.TextGDTString(var1, 0, iLanguage, 11, 24576 + 1, 12288 + 25, 98, 236, 16);
         this.TextGDTString(var1, 0, iLanguage, 12, 24576 + 1, 12288 + 25, 340, 236, 16);
         tcbNow._work[14] = -1;
         this.CreatePanelSingle(var1, 24576 + 2, 0, 274, 12288 + 23, 0, 0, 0);
         tcbNow.md = 761;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 761:
         var2 = tcbNow._work[14];
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            this._TKilx(var1, 24576 + 1, 24576 + 2);
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 764;
            tcbNow.lp = 0;
         } else {
            var3 = 306;

            for(var2 = 0; var2 < 2; ++var2) {
               if (TouchesXPos[0] > var3 && TouchesXPos[0] < var3 + 120 && TouchesYPos[0] > 220 && TouchesYPos[0] < 220 + 50 && TouchesStatus[0] != 0) {
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  tcbNow._work[14] = var2;
                  tcbNow.md = 762;
                  tcbNow.lp = 0;
                  break;
               }

               var3 = 60;
            }

            if (tcbNow._work[14] >= 0) {
               this._TKilx(var1, 24576 + 2, 24576 + 2);
               this.CreatePanelSingle(var1, 24576 + 2, 0, tcbNow._work[14] + 255, 12288 + 23, 0, 0, 0);
            }
         }
         break;
      case 762:
         this._TLoop(var1, 45, 763);
         break;
      case 763:
         if (tcbNow._work[14] == 1) {
            this._TKilx(var1, 8193, 65535);
            bDrawSkip = true;
            tcbNow.md = 765;
            tcbNow.lp = 0;
         } else {
            this._TKilx(var1, 24576 + 1, 24576 + 2);
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 764;
            tcbNow.lp = 0;
         }
         break;
      case 764:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8192, 65535);
            this._TaskMake(var1, 260, 8192);
            this.GdtBGM(var1, 0);
         }
         break;
      case 765:
         bDrawSkip = true;
         tcbNow.md = 766;
         tcbNow.lp = 0;
         break;
      case 766:
         bDrawSkip = true;
         this.ReleaseFramebuffer(var1);
         var1.glview.BluetoothStart();
         tcbNow.md = 767;
         tcbNow.lp = 0;
         break;
      case 767:
         var16 = 0;
         boolean var9 = false;
         bDrawSkip = true;
         boolean var8;
         if (var1.iBluetoothOK == 1) {
            var16 = 1;
            var8 = BluetoothManajer.getInstance().isServer();
            this.CreateFramebuffer(var1, var1.iFrameScalWidth, var1.iFrameScalHeight);
         } else {
            var8 = var9;
            if (var1.iBluetoothOK == -1) {
               var16 = -1;
               this.CreateFramebuffer(var1, var1.iFrameScalWidth, var1.iFrameScalHeight);
               var8 = var9;
            }
         }

         if (var16 == -1) {
            bDrawSkip = false;
            tcbNow.md = 792;
            tcbNow.lp = 0;
         } else if (var16 == 1) {
            this.DrawTextClear(var1, 0);
            this.DrawTextClear(var1, 1);
            bDrawSkip = false;
            if (var8) {
               iPlayerNo = 0;
            } else {
               iPlayerNo = 1;
               iControlType[1] = iControlType[0];
            }

            tcbNow.md = 768;
            tcbNow.lp = 0;
         }
         break;
      case 768:
         this._TKilx(var1, 8193, 65535);
         iBTErrMess = 0;
         iAppVersion = -1;
         this.BTDataSet(var1, 1);
         tcbNow.md = 769;
         tcbNow.lp = 0;
         break;
      case 769:
         if (1 != iAppVersion) {
            iBTErrMess = 1;
            tcbNow.md = 792;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 770;
            tcbNow.lp = 0;
         }
         break;
      case 770:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 771;
         tcbNow.lp = 0;
         break;
      case 771:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 1003;
            tcbNow.lp = 0;
            iChrSelectMode = 0;
         }
         break;
      case 772:
         var2 = iPlayerNo;
         this._TKilx(var1, 8193, 65535);
         this.CreatePanelSingle(var1, 24576, 0, 266, 12288 + 1, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 19, 24576 + 1, 12288 + 5, 44, 140, 16);
         tcbNow.md = 773;
         tcbNow.lp = 0;
         break;
      case 773:
         this._TLoop(var1, 30, 774);
         break;
      case 774:
         this.BTDataSet(var1, 1);
         tcbNow.md = 775;
         tcbNow.lp = 0;
         break;
      case 775:
         iRound = 0;
         WinPoint[0] = 0;
         WinPoint[1] = 0;
         this.BTDataSet(var1, 2);
         tcbNow._work[10] = 0;

         for(var2 = 0; var2 < 8; ++var2) {
            iCardCheck[0][var2] = 0;
            iCardCheck[1][var2] = 0;
         }

         tcbNow.md = 776;
         tcbNow.lp = 0;
         break;
      case 776:
         this._TLoop(var1, 60, 777);
         break;
      case 777:
         var12 = iPlayerNo;
         var13 = 1 - iPlayerNo;

         for(var2 = 0; var2 < PlayerCardCount[var13]; ++var2) {
            if (!this.CheckCardFiles(var1, PlayerCard[var13][var2]) || PlayerCardVersion[var13][var2] > this.GetCardVersion(var1, PlayerCard[var13][var2])) {
               iCardCheck[var12][var2] = PlayerCard[var13][var2];
            }
         }

         tcbNow.md = 778;
         tcbNow.lp = 0;
         break;
      case 778:
         tcbNow._work[10] = 0;
         this.BTDataSet(var1, 7);
         tcbNow.md = 779;
         tcbNow.lp = 0;
         break;
      case 779:
         var6 = iPlayerNo;
         var5 = 1 - iPlayerNo;
         boolean var4 = false;
         var12 = 0;

         boolean var14;
         while(true) {
            var14 = var4;
            if (var12 >= 8) {
               break;
            }

            if (iCardCheck[var6][var12] != 0 || iCardCheck[var5][var12] != 0) {
               var14 = true;
               break;
            }

            ++var12;
         }

         if (DataVersion[var5] != this.GetCharVersion(var1, PlayerType[var5])) {
            var14 = true;
         }

         if (var14) {
            tcbNow.md = 792;
            tcbNow.lp = 0;
            iBTErrMess = 3;
         } else {
            tcbNow.md = 780;
            tcbNow.lp = 0;
         }
         break;
      case 780:
         this._TKilx(var1, 8193, 65535);
         bDrawLoading = false;
         tcbNow.md = 781;
         tcbNow.lp = 0;
         break;
      case 781:
         this._TLoop(var1, 120, 782);
         break;
      case 782:
         bDrawLoading = true;
         tcbNow.md = 783;
         tcbNow.lp = 0;
         break;
      case 783:
         this._TLoop(var1, 90, 784);
         break;
      case 784:
         bDrawLoading = false;
         tcbNow.md = 249;
         tcbNow.lp = 0;
         break;
      case 786:
         this._TKilx(var1, 8193, 65535);

         for(var2 = 0; var2 < 31; ++var2) {
            LoadData[var2] = -1;
         }

         LoadData[1] = 0;
         this.SetLoad(var1, true);
         tcbNow._work[14] = -1;
         this.CreatePanelSingle(var1, 24576 + 2, 0, 275, 12288 + 3, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 1, 51, 12288 + 6, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 14, 24576 + 1, 12288 + 5, 144, 128, 16);
         this.TextGDTString(var1, 0, iLanguage, 11, 24576 + 1, 12288 + 5, 98, 236, 16);
         this.TextGDTString(var1, 0, iLanguage, 12, 24576 + 1, 12288 + 5, 340, 236, 16);
         tcbNow.md = 787;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 787:
         var2 = tcbNow._work[14];
         var3 = 306;

         for(var2 = 0; var2 < 2; ++var2) {
            if (TouchesXPos[0] > var3 && TouchesXPos[0] < var3 + 120 && TouchesYPos[0] > 220 && TouchesYPos[0] < 220 + 50 && TouchesStatus[0] != 0) {
               iReqSENo = 0;
               this.PushSE(var1, 0);
               tcbNow._work[14] = var2;
               tcbNow.md = 788;
               tcbNow.lp = 0;
               break;
            }

            var3 = 60;
         }

         if (tcbNow._work[14] >= 0) {
            this._TKilx(var1, 24576 + 2, 24576 + 2);
            this.CreatePanelSingle(var1, 24576 + 2, 0, tcbNow._work[14] + 260, 12288 + 3, 0, 0, 0);
         }
         break;
      case 788:
         this._TLoop(var1, 45, 789);
         break;
      case 789:
         if (tcbNow._work[14] == 1) {
            iPlayMode = 8;
            Score[0] = 0;
            Score[1] = 0;
            this._TKilx(var1, 24576 + 1, 24576 + 2);
            tcbNow.md = 790;
            tcbNow.lp = 0;
         } else {
            iPlayerNo = 0;
            this.BTDispose(var1);
            this._TKilx(var1, 24576 + 1, 24576 + 2);
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 764;
            tcbNow.lp = 0;
         }
         break;
      case 790:
         if (iFade == 255 || iFade == 0) {
            for(var2 = 0; var2 < 31; ++var2) {
               LoadData[var2] = -1;
            }

            LoadData[1] = 0;
            this.SetLoad(var1, true);
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 771;
            tcbNow.lp = 0;
         }
         break;
      case 791:
         this._TKilx(var1, 8193, 65535);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 146, 12288 + 1, 0, 0, 0);
         break;
      case 792:
         this._TKilx(var1, 8193, 65535);
         iPlayerNo = 0;
         iPlayMode = 6;
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 1, 51, 12288 + 1, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 89, 12288 + 1, 0, 8, 200);
         this.DrawTextClear(var1, 0);
         switch(iBTErrMess) {
         case 0:
            this.TextGDTString(var1, 0, iLanguage, 13, 24576 + 1, 12288 + 5, 32, 217, 16);
            break;
         case 1:
            this.TextGDTString(var1, 0, iLanguage, 17, 24576 + 1, 12288 + 5, 32, 217, 16);
            break;
         case 2:
            this.TextGDTString(var1, 0, iLanguage, 18, 24576 + 1, 12288 + 5, 32, 217, 16);
            break;
         case 3:
            this.TextGDTString(var1, 0, iLanguage, 260, 24576 + 1, 12288 + 5, 32, 217, 16);
         }

         tcbNow.md = 793;
         tcbNow.lp = 0;
         break;
      case 793:
         this._TLoop(var1, 20, 794);
         break;
      case 794:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            this._TKilx(var1, 8192, 65535);
            this._TaskMake(var1, 260, 8192);
            this.GdtBGM(var1, 0);
            this.BTDispose(var1);
         }
      }

   }

   public void Game3(GlobalWork var1, int var2) {
      short var3;
      int var4;
      int var5;
      int var6;
      int[] var9;
      boolean var11;
      short var12;
      int var16;
      int var10002;
      byte var23;
      switch(var2) {
      case 0:
      case 998:
      default:
         break;
      case 999:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 24576, 24616);
            iBackNo = 0;
            bDebugMode = false;
            if (iPlayMode == 0 && this.pGameData.piGameData[this.pGameData.piGameDataPos[167] + this.pGameData.piGameDataXSize[167] * 0 + 0] != 0) {
               bDebugMode = true;
            }

            tcbNow.md = 1003;
            tcbNow.lp = 0;
            iChrSelectMode = 0;
         }
         break;
      case 1000:
         this._TKilx(var1, 24576, 24616);
         tcbNow.md = 1001;
         tcbNow.lp = 0;
         break;
      case 1001:
         var2 = iPlayerNo;
         var12 = 306;

         for(var2 = 0; var2 < 2; ++var2) {
            if (TouchesXPos[0] > var12 && TouchesXPos[0] < var12 + 120 && TouchesYPos[0] > 220 && TouchesYPos[0] < 220 + 50 && TouchesStatus[0] != 0) {
               bDrawSkip = true;
               if (var2 == 0) {
                  bDebugMode = false;
               }

               this._TKilx(var1, 24626, 24626);
               tcbNow.md = 1002;
               tcbNow.lp = 0;
               return;
            }

            var12 = 60;
         }

         if (TouchesXPos[0] > 0 && TouchesXPos[0] < 48 && TouchesYPos[0] > 40 && TouchesYPos[0] < 240 && TouchesStatus[0] != 0) {
            if (iDebugVal[0] > 0) {
               var9 = iDebugVal;
               var10002 = var9[0]--;
            }
         } else if (TouchesXPos[0] > 432 && TouchesXPos[0] < 480 && TouchesYPos[0] > 40 && TouchesYPos[0] < 240 && TouchesStatus[0] != 0 && iDebugVal[0] < 98) {
            var9 = iDebugVal;
            var10002 = var9[0]++;
         }

         if (iDebugVal[0] != iDebugVal[1]) {
            this._TKilx(var1, 24626, 24626);
            iDebugVal[1] = iDebugVal[0];
            this.CreateValueObjectB(var1, 24626, 240, 160, iDebugVal[0], 2, 14, 100, 12338, 0, 0, 0);
            this.CreatePanelSingle(var1, 24626, 0, 27, 12388, 0, 16, 128);
            this.CreatePanelSingle(var1, 24626, 0, 29, 12388, 0, 464, 128);
            this.CreatePanelSingle(var1, 24626, 0, 274, 12328, 0, 0, 0);
            this.DrawTextClear(var1, 1);
            this.TextGDTString(var1, 1, iLanguage, 11, 24626, 12398, 98, 236, 16);
            this.TextGDTString(var1, 1, iLanguage, 12, 24626, 12398, 340, 236, 16);
         }
         break;
      case 1002:
         bDrawSkip = false;
         this.CreateWipeInOut(var1, 1);
         iReturnTask = 1003;
         tcbNow.md = 1082;
         tcbNow.lp = 0;
         break;
      case 1003:
         this.GdtBGM(var1, 12);
         iChrSelectPlayer = 0;
         tcbNow._work[0] = 0;
         this._TKilx(var1, 24576, 24616);
         tcbNow.md = 1011;
         tcbNow.lp = 0;
         break;
      case 1004:
         var16 = iPlayerNo;
         var2 = 1 - var16;
         if (this.isMission(var1) == 0 && iPlayMode != 8) {
            PlayerType[var16] = bCharIndex[tcbNow._work[0]];
            AICtrl[var16] = false;
            AICtrl[var2] = true;
            AirType[var16] = true;
            AirType[var2] = true;
            CPULevel[var2] = 0;

            for(var2 = 0; var2 < 10; ++var2) {
               iCPUNo[var2] = -1;
            }

            Level[var16] = this.GetLevel(var1, PlayerType[var16]);
            this.InitCharCard(var1, var16, PlayerType[var16], false, 0);
            iStageMax = 90;
            this.CardRefresh(var1, bCharIndex[tcbNow._work[0]]);
            PlayerType[iPlayerNo] = bCharIndex[tcbNow._work[0]];
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 1006;
            tcbNow.lp = 0;
         } else {
            if (iPlayMode == 2) {
               PlayerType[iChrSelectPlayer] = bCharIndex[tcbNow._work[0]];
               this.CardRefresh(var1, bCharIndex[tcbNow._work[0]]);
               if (iChrSelectPlayer == 1) {
                  this.CardRefresh(var1, PlayerType[0]);
                  this.InitCharCard(var1, 0, PlayerType[0], false, 0);
                  this.InitCharCard(var1, iChrSelectPlayer, bCharIndex[tcbNow._work[0]], false, 0);
                  this.CreateWipeInOut(var1, 1);
                  Level[var16] = this.GetLevel(var1, PlayerType[var16]);
                  Level[var2] = this.GetLevel(var1, PlayerType[var2]);
                  tcbNow.md = 1006;
                  tcbNow.lp = 0;
                  break;
               }
            } else {
               this.CardRefresh(var1, bCharIndex[tcbNow._work[0]]);
               PlayerType[var16] = bCharIndex[tcbNow._work[0]];
               AICtrl[var16] = false;
               AICtrl[var2] = true;
               AirType[var16] = true;
               AirType[var2] = true;
               CPULevel[var2] = 0;
               Level[var16] = this.GetLevel(var1, PlayerType[var16]);
               if (iPlayMode == 8) {
                  PlayerType[var2] = bCharIndex[tcbNow._work[0]];
                  AICtrl[var16] = false;
                  AICtrl[var2] = false;
               } else {
                  PlayerType[var2] = 0;

                  for(var2 = 0; var2 < 10; ++var2) {
                     iCPUNo[var2] = -1;
                  }

                  iStageMax = 0;
                  if (this.isMission(var1) == 0) {
                     iStageMax = 90;
                  } else {
                     iStageMax = 90;
                  }
               }
            }

            if (bDebugMode) {
               iDebugVal[0] = Level[var16];
               iDebugVal[1] = -1;
               tcbNow.md = 1000;
               tcbNow.lp = 0;
            } else {
               this.CreateWipeInOut(var1, 1);
               iReturnTask = 1003;
               tcbNow.md = 1082;
               tcbNow.lp = 0;
            }
         }
         break;
      case 1005:
         if (iFade == 255 || iFade == 0) {
            for(var2 = 1; var2 < 31; ++var2) {
               LoadData[var2] = -1;
            }

            this.SetLoad(var1, true);
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 772;
            tcbNow.lp = 0;
         }
         break;
      case 1006:
         if (iFade == 255 || iFade == 0) {
            for(var2 = 1; var2 < 31; ++var2) {
               LoadData[var2] = -1;
            }

            this.SetLoad(var1, true);
            this._TKilx(var1, 24576, 24656);
            if (iPlayMode == 2) {
               tcbNow.md = 245;
               tcbNow.lp = 0;
            } else if (this.isMission(var1) == 0 && iPlayMode != 8) {
               tcbNow.md = 300;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 185;
               tcbNow.lp = 0;
            }
         }
         break;
      case 1007:
         if (iFade == 255 || iFade == 0) {
            iChrSelectPlayer = 1;
            tcbNow._work[0] = 0;
            this._TKilx(var1, 24576, 24656);
            tcbNow.md = 1011;
            tcbNow.lp = 0;
         }
         break;
      case 1008:
         if (iFade == 255 || iFade == 0) {
            iChrSelectPlayer = 0;
            tcbNow._work[0] = 0;
            this._TKilx(var1, 24576, 24626);
            tcbNow.md = 1011;
            tcbNow.lp = 0;
         }
         break;
      case 1009:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 24576, 24626);
            tcbNow.md = 260;
            tcbNow.lp = 0;
         }
         break;
      case 1010:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 24576, 24626);
            iChrSelectMode = 0;
            tcbNow.md = 418;
            tcbNow.lp = 0;
         }
         break;
      case 1011:
         this.GdtBGM(var1, 12);
         iSmapReturnMD = 272;
         var23 = 15;
         if (cstatusCount <= 0) {
         }

         if (iChrSelectMode != 0) {
            var23 = -18;
         }

         this.controller.Init();
         this.padID[0] = this.controller.AddPad(100, 0, 280, 320, 3, 0);
         if (cstatusCount > 1) {
            this.padID[1] = this.controller.AddPad(-50, 20, 120, 320, 5, 16640);
            this.padID[2] = this.controller.AddPad(430, 20, 120, 320, 5, 16640);
         }

         if (iChrSelectMode == 0) {
            this.padID[4] = this.controller.AddPad(240, 140, 360, 90, 4, 16640);
         }

         tcbNow._work[0] = 0;
         tcbNow._work[1] = 0;
         tcbNow._work[2] = 0;
         tcbNow._work[3] = 0;
         LoadData[1] = 0;
         LoadData[5] = 0;
         LoadData[6] = -1;
         LoadData[7] = -1;
         LoadData[8] = -1;
         LoadData[9] = -1;
         LoadData[10] = -1;
         this.SetLoad(var1, true);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         if (cstatusCount > 1) {
            this.CreatePanelSingle(var1, 24576, 0, 27, 12338, 0, 16, 128);
            this.CreatePanelSingle(var1, 24576, 0, 29, 12338, 0, 464, 128);
         }

         this.CreatePanelSingle(var1, 24576, 0, 10, 12329, 0, 0, 0);
         if (iChrSelectMode == 0) {
            this.CreatePanelSingle(var1, 24576, 0, 0, 12328, 0, 0, var23 + 224);
         } else {
            this.CreatePanelSingle(var1, 24576, 0, 257, 12329, 0, 0, 0);
         }

         if (iChrSelectMode == 0) {
            this.CreatePanelSingle(var1, 24576, 1, 0, 12328, 0, 0, 0);
         } else {
            this.CreatePanelSingle(var1, 24576, 1, 60, 12328, 0, 0, 0);
         }

         this.CreatePanelSingle(var1, 24576, 0, 0, 12328, 0, 0, var23 + 224);
         if (this.isMission(var1) != 0 && (iPlayMode == 0 || iPlayMode == 2)) {
            this.CreatePanelSingle(var1, 24576, 0, 302, 12329, 0, 404, 176);
            this.padID[7] = this.controller.AddPad(404, 176, 74, 74, 5, 16640);
         }

         tcbNow.md = 1012;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 1012:
         LoadData[6] = bCharIndex[(tcbNow._work[0] + cstatusCount - 1) % cstatusCount];
         LoadData[7] = bCharIndex[tcbNow._work[0]];
         LoadData[8] = bCharIndex[(tcbNow._work[0] + 1) % cstatusCount];
         LoadData[3] = bCharIndex[tcbNow._work[0]];
         LoadFilter[3] = 187;
         this.SetLoad(var1, true);
         tcbNow.md = 1013;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 1013:
         if (iChrSelectMode != 0) {
            var23 = -18;
         } else {
            var23 = 15;
         }

         this._TKilx(var1, 24586, 24626);
         if (tcbNow._work[2] == 0) {
            tcbNow._work[1] = 0;
            this._TKilx(var1, 24586, 24606);
            this.CreatePanelSingle(var1, 24586, 6, 2, 12298, 0, 144, 56);
            this.CreatePanelSingle(var1, 24586, 7, 2, 12298, 0, 630, 56);
            tcbNow._work[2] = 7;
            tcbNow.md = 1018;
            tcbNow.lp = 0;
            if (iChrSelectPlayer == 1) {
               this.CreatePanelSingle(var1, 24616, 0, 222, 12349, 0, 0, 0);
               this.TextGDTString(var1, 0, iLanguage, 15, 24616, 12351, 112, 144, 16);
            }

            this.InitCharCard(var1, 0, bCharIndex[tcbNow._work[0]], false, 0);
            this.CreateWipeInOut(var1, 2);
         } else {
            this.CreateValueObjectB(var1, 24626, 374, 16, tcbNow._work[0] + 1, 3, 14, 100, 12338, 0, 0, 0);
            this.CreatePanelSingle(var1, 24626, 0, 140, 12339, 0, 412, 16);
            this.CreateValueObjectB(var1, 24626, 424, 16, cstatusCount, 3, 14, 100, 12338, 1, 0, 0);
            this.CreatePanelSingle(var1, 24586, 7, 1, 12298, 0, 144, 56);
            this.CreatePanelSingle(var1, 24596, 7, 10, 12298, 0, 320, 320);
            this.CreatePanelSingle(var1, 24626, 7, this.CharAct_Name[iLanguage + 4], 12329, 0, 136, var23 + 231);
            if (iChrSelectMode == 0) {
            }

            this.CreatePanelSingle(var1, 24626, 0, this.ChrGameData[3].piGameData[this.ChrGameData[3].piGameDataPos[3] + this.ChrGameData[3].piGameDataXSize[3] * 0 + 9] + 6, 12338, 0, 16, var23 + 226);
            var16 = this.GetLevel(var1, bCharIndex[tcbNow._work[0]]);
            Level[0] = var16;
            this.CreateValueObjectB(var1, 24626, 98, var23 + 231, var16 + 1, 2, 14, 100, 12338, 0, 0, 0);
            this.CreateValueObjectB(var1, 24626, 390, var23 + 231, this.GetExp(var1, bCharIndex[tcbNow._work[0]]), 2, 14, 100, 12338, 0, 0, 0);
            this.CreatePanelSingle(var1, 24626, 0, 141, 12339, 0, 415, var23 + 230);
            if (var16 == 98) {
               var3 = 0;
            } else {
               var3 = this.pGameData.piGameData[this.pGameData.piGameDataPos[43] + var16 / 5 * this.pGameData.piGameDataXSize[43] + 0];
            }

            this.CreateValueObjectB(var1, 24626, 426, var23 + 231, var3, 2, 14, 100, 12338, 0, 0, 0);
            this.CreateValueObjectB(var1, 24626, 105, var23 + 261, this.GetAttackSelect(var1, 0), 6, 14, 100, 12338, 0, 0, 0);
            this.CreateValueObjectB(var1, 24626, 338, var23 + 261, this.GetDeffenceSelect(var1, 0), 6, 14, 100, 12338, 0, 0, 0);
            if (iChrSelectMode != 0) {
               this.DrawTextClear(var1, 0);
               this.CharGDTString(var1, 0, 0, this.CharData_TextPage[iLanguage], 0, 24626, 12338, 32, 272, 16);
            }

            tcbNow.md = 1014;
            tcbNow.lp = 0;
         }

         this.Game(var1, tcbNow.md);
         break;
      case 1014:
         if (bResume) {
            this.controller.Init();
            this.padID[0] = this.controller.AddPad(100, 0, 280, 320, 3, 0);
            if (cstatusCount > 1) {
               this.padID[1] = this.controller.AddPad(-50, 20, 120, 320, 5, 16640);
               this.padID[2] = this.controller.AddPad(430, 20, 120, 320, 5, 16640);
            }

            if (iChrSelectMode == 0) {
               this.padID[4] = this.controller.AddPad(240, 140, 360, 90, 4, 16640);
            }
         }

         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            this.CreateWipeInOut(var1, 1);
            if (iChrSelectMode == 0) {
               if (iPlayMode == 2) {
                  if (iChrSelectPlayer == 1) {
                     tcbNow.md = 1008;
                     tcbNow.lp = 0;
                  } else {
                     tcbNow.md = 1009;
                     tcbNow.lp = 0;
                  }
               } else {
                  if (iPlayMode == 8) {
                     this.BTDispose(var1);
                  }

                  tcbNow.md = 1009;
                  tcbNow.lp = 0;
               }
            } else {
               tcbNow.md = 1010;
               tcbNow.lp = 0;
            }
         } else {
            var2 = this.controller.GetKey(this.padID[0], 2);
            if (this.controller.GetKey(this.padID[7], 0) != 0) {
               this.CreateWipeInOut(var1, 1);
               tcbNow.md = 1015;
               tcbNow.lp = 0;
            } else if (this.controller.GetKey(this.padID[1], 0) == 0 && (var2 & 4) == 0) {
               if (this.controller.GetKey(this.padID[2], 0) == 0 && (var2 & 8) == 0) {
                  if (this.controller.GetKey(this.padID[3], 0) == 0 && this.controller.GetKey(this.padID[4], 0) == 0) {
                     if (this.controller.GetKey(this.padID[5], 0) != 0) {
                     }
                  } else {
                     this.CardRefresh(var1, bCharIndex[tcbNow._work[0]]);
                     this._TKilx(var1, 24586, 24606);
                     this.CreatePanelSingle(var1, 24586, 7, 5, 12298, 0, 144, 56);
                     this.CreatePanelSingle(var1, 24596, 7, 9, 12298, 0, 320, 320);
                     this.Voice(var1, 0, 0, 8);
                     tcbNow.md = 1016;
                     tcbNow.lp = 0;
                  }
               } else {
                  tcbNow._work[1] = 0;
                  this._TKilx(var1, 24586, 24606);
                  tcbNow._work[0] = (tcbNow._work[0] + 1) % cstatusCount;
                  this.CreatePanelSingle(var1, 24586, 7, 2, 12298, 0, 144, 56);
                  this.CreatePanelSingle(var1, 24596, 7, 12, 12298, 0, 320, 320);
                  this.CreatePanelSingle(var1, 24586, 8, 2, 12298, 0, 630, 56);
                  tcbNow._work[2] = 8;
                  tcbNow.md = 1017;
                  tcbNow.lp = 0;
                  iReqSENo = 1;
                  this.PushSE(var1, 1);
               }
            } else {
               tcbNow._work[1] = 0;
               this._TKilx(var1, 24586, 24606);
               tcbNow._work[0] = (tcbNow._work[0] + cstatusCount - 1) % cstatusCount;
               this.CreatePanelSingle(var1, 24586, 6, 3, 12298, 0, -342, 56);
               this.CreatePanelSingle(var1, 24586, 7, 3, 12298, 0, 144, 56);
               this.CreatePanelSingle(var1, 24596, 7, 12, 12298, 0, 320, 320);
               tcbNow._work[2] = 6;
               tcbNow.md = 1017;
               tcbNow.lp = 0;
               iReqSENo = 1;
               this.PushSE(var1, 1);
            }
         }
         break;
      case 1015:
         if (iFade == 255 || iFade == 0) {
            var1.iAppFree = this.GetAppFree(var1);
            var1.glview.SmapStart();
            tcbNow.md = 276;
            tcbNow.lp = 0;
            this._TKilx(var1, 8193, 65535);
         }
         break;
      case 1016:
         this._TLoop(var1, 60, 1004);
         break;
      case 1017:
         var23 = 15;
         if (iChrSelectMode != 0) {
            var23 = -18;
         }

         this._TKilx(var1, 24626, 24626);
         LoadData[4] = bCharIndex[tcbNow._work[0]];
         LoadFilter[4] = 251;
         LoadFilter[3] = 251;
         this.SetLoad(var1, true);
         this.InitCharCard(var1, 0, bCharIndex[tcbNow._work[0]], false, 0);
         this.CreateValueObjectB(var1, 24626, 374, 16, tcbNow._work[0] + 1, 3, 14, 100, 12338, 0, 0, 0);
         this.CreatePanelSingle(var1, 24626, 0, 140, 12339, 0, 412, 16);
         this.CreateValueObjectB(var1, 24626, 424, 16, cstatusCount, 3, 14, 100, 12338, 1, 0, 0);
         this.CreatePanelSingle(var1, 24626, tcbNow._work[2], this.CharAct_Name[iLanguage + 4], 12329, 0, 136, var23 + 231);
         this.CreatePanelSingle(var1, 24626, 0, this.ChrGameData[1 - iPlayerNo + 3].piGameData[this.ChrGameData[1 - iPlayerNo + 3].piGameDataPos[3] + this.ChrGameData[1 - iPlayerNo + 3].piGameDataXSize[3] * 0 + 9] + 6, 12338, 0, 16, var23 + 226);
         var16 = this.GetLevel(var1, bCharIndex[tcbNow._work[0]]);
         Level[1] = var16;
         this.CreateValueObjectB(var1, 24626, 98, var23 + 231, var16 + 1, 2, 14, 100, 12338, 0, 0, 0);
         this.CreateValueObjectB(var1, 24626, 390, var23 + 231, this.GetExp(var1, bCharIndex[tcbNow._work[0]]), 2, 14, 100, 12338, 0, 0, 0);
         this.CreatePanelSingle(var1, 24626, 0, 141, 12339, 0, 415, var23 + 230);
         if (var16 == 98) {
            var3 = 0;
         } else {
            var3 = this.pGameData.piGameData[this.pGameData.piGameDataPos[43] + var16 / 5 * this.pGameData.piGameDataXSize[43] + 0];
         }

         this.CreateValueObjectB(var1, 24626, 426, var23 + 231, var3, 2, 14, 100, 12338, 0, 0, 0);
         this.CreateValueObjectB(var1, 24626, 105, var23 + 261, this.GetAttackSelect(var1, 1), 6, 14, 100, 12338, 0, 0, 0);
         this.CreateValueObjectB(var1, 24626, 338, var23 + 261, this.GetDeffenceSelect(var1, 1), 6, 14, 100, 12338, 0, 0, 0);
         tcbNow.md = 1018;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 1018:
         if (tcbNow._work[1] == 30) {
            this._TKilx(var1, 24596, 24596);
            this.CreatePanelSingle(var1, 24596, tcbNow._work[2], 11, 12298, 0, 320, 320);
         }

         if (tcbNow._work[1] == 42) {
            this._TKilx(var1, 24606, 24606);
         }

         if (tcbNow._work[1] >= 60) {
            if (tcbNow._work[2] == 6) {
               this.SwapGameData(var1, 7, 8);
               this.SwapGameData(var1, 6, 7);
            } else if (tcbNow._work[2] == 8) {
               this.SwapGameData(var1, 6, 7);
               this.SwapGameData(var1, 7, 8);
            }

            if (iChrSelectPlayer == 1 && tcbNow._work[3] == 0) {
               tcbNow.md = 1019;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 1012;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
            }
         }

         int[] var10 = tcbNow._work;
         var10002 = var10[1]++;
         break;
      case 1019:
         if (TouchesXPos[0] > 0) {
            tcbNow._work[3] = 1;
            this._TKilx(var1, 24616, 24616);
            tcbNow.md = 1012;
            tcbNow.lp = 0;
         }
         break;
      case 1020:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 24576, 24656);
            this.CreatePanelSingle(var1, 24576, 0, 12, 12278, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576, 0, 223, 12298, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576, 0, 224, 12298, 0, 0, 0);
            this.CreatePanelSingle(var1, 24576, 0, 10, 12329, 0, 0, -8);
            tcbNow._work[8] = 0;
            tcbNow._work[9] = 0;
            tcbNow._work[19] = this.GetCost(var1, 0);
            tcbNow._work[20] = 0;
            tcbNow._work[21] = PlayerType[0];
            tcbNow.md = 1021;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 1021:
         this.InitCharCard(var1, tcbNow._work[20], tcbNow._work[21], false, 0);
         LoadData[21] = tcbNow._work[21];

         for(var2 = 0; var2 < 8; ++var2) {
            var16 = this.GetCardNo(var1, tcbNow._work[21], var2);
            LoadData[var2 + 6] = var16 + 255;
         }

         this.SetLoad(var1, true);
         this._TKilx(var1, 24586, 24596);
         this.CreatePanelSingle(var1, 24596, 0, this.ChrGameData[0 + 3].piGameData[this.ChrGameData[0 + 3].piGameDataPos[3] + this.ChrGameData[0 + 3].piGameDataXSize[3] * 0 + 9] + 6, 12338, 0, 16, 30);
         this.CreateValueObjectB(var1, 24596, 100, 36, this.GetLevel(var1, tcbNow._work[21]) + 1, 2, 14, 100, 12338, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 21, this.CharAct_Name[iLanguage + 4], 12338, 0, 136, 35);
         this.CreateValueObjectB(var1, 24596, 390, 36, this.GetExp(var1, tcbNow._work[21]), 2, 14, 100, 12338, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 0, 140, 12339, 0, 415, 36);
         short var22;
         if (this.GetLevel(var1, tcbNow._work[21]) == 98) {
            var22 = 0;
         } else {
            var22 = this.pGameData.piGameData[this.pGameData.piGameDataPos[43] + this.GetLevel(var1, tcbNow._work[21]) / 5 * this.pGameData.piGameDataXSize[43] + 0];
         }

         this.CreateValueObjectB(var1, 24596, 426, 36, var22, 2, 14, 100, 12338, 0, 0, 0);
         this.CreatePanelSingle(var1, 24586, 0, 250, 12338, 0, 8, 204);
         this.CreatePanelSingle(var1, 24586, 0, 251, 12338, 0, 168, 204);
         this.CreatePanelSingle(var1, 24586, 0, 252, 12338, 0, 328, 204);
         this.CreatePanelSingle(var1, 24586, 0, 38, 12338, 0, 392, 280);
         this.CreatePanelSingle(var1, 24586, 0, 225, 12338, 0, 8, 88);
         this.CreateValueObjectB(var1, 24586, 154, 86, PlayerCardFormationCount[tcbNow._work[20]], 2, 14, 230, 12338, 0, 0, 0);
         tcbNow._work[14] = this.GetAttackSelect(var1, 0) + this.GetPutCardAttack(var1, tcbNow._work[21]) + this.GetCardAttackFmALL(var1, tcbNow._work[20]);
         tcbNow._work[15] = this.GetDeffenceSelect(var1, 0) + this.GetPutCardDefence(var1, tcbNow._work[21]) + this.GetCardDefenceFmALL(var1, tcbNow._work[20]);
         this.CreateValueObjectB(var1, 24596, 92, 64, tcbNow._work[14], 6, 14, 100, 12308, 1, 0, 0);
         this.CreateValueObjectB(var1, 24596, 330, 64, tcbNow._work[15], 6, 14, 100, 12308, 1, 0, 0);

         for(var2 = 0; var2 < 8; ++var2) {
            var4 = this.GetCardNo(var1, tcbNow._work[21], var2);
            var16 = this.GetCardLevel(var1, var4);
            if (var4 == 0) {
               var16 = 0;
            }

            this.CreatePanelSingle(var1, 24586, var2 + 6, var16 + 33, 12308, 0, var2 * 56 + 40, 164);
         }

         this._TKilx(var1, 24646, 24646);
         this.CreateValueObjectB(var1, 24646, 390, 248, this.GetPutCardCost(var1, tcbNow._work[21]), 2, 14, 100, 12338, 0, 0, 0);
         this.CreatePanelSingle(var1, 24646, 0, 140, 12339, 0, 415, 248);
         this.CreateValueObjectB(var1, 24646, 426, 248, tcbNow._work[19], 2, 14, 100, 12338, 0, 0, 0);
         if (tcbNow._work[8] == 0) {
            tcbNow.md = 1024;
            tcbNow.lp = 0;
         } else {
            tcbNow._work[8] = 0;

            for(var2 = 0; var2 < 8; ++var2) {
               this.CreatePanelSingle(var1, 24597, 0, 248, 12358, 0, var2 * 56 + 40, 164);
            }

            tcbNow.md = 1022;
            tcbNow.lp = 0;
         }
         break;
      case 1022:
         this._TLoop(var1, 8, 1023);
         break;
      case 1023:
         this._TKilx(var1, 24597, 24597);
         tcbNow.md = 1024;
         tcbNow.lp = 0;
         break;
      case 1024:
         if (this.CheckDownBtn(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            if (this.isMission(var1) == 0 && iPlayMode != 8) {
               if (iStage == 2) {
                  if (this.CardPutCount(var1, bCharIndex[tcbNow._work[0]]) < 2) {
                     tcbNow.md = 1030;
                     tcbNow.lp = 0;
                     break;
                  }
               } else if (this.CardPutCheck(var1, bCharIndex[tcbNow._work[0]], 1) == 0) {
                  tcbNow.md = 1031;
                  tcbNow.lp = 0;
                  break;
               }

               this._FILESave(var1);
               iReqSENo = 0;
               this.PushSE(var1, 0);
               tcbNow.md = 1025;
               tcbNow.lp = 0;
               this.CreateWipeInOut(var1, 1);
            } else {
               var2 = iPlayerNo;
               var16 = 1 - var2;
               if (iPlayMode == 2) {
                  this.InitCharCard(var1, iChrSelectPlayer, PlayerType[iChrSelectPlayer], false, 0);
                  if (iChrSelectPlayer == 1) {
                     Level[var2] = this.GetLevel(var1, PlayerType[var2]);
                     Level[var16] = this.GetLevel(var1, PlayerType[var16]);
                     this.CreateWipeInOut(var1, 1);
                     tcbNow.md = 1006;
                     tcbNow.lp = 0;
                  } else {
                     this.CreateWipeInOut(var1, 1);
                     tcbNow.md = 1007;
                     tcbNow.lp = 0;
                  }
               } else {
                  Level[var2] = this.GetLevel(var1, PlayerType[var2]);
                  this.InitCharCard(var1, var2, PlayerType[var2], false, 0);
                  if (iPlayMode == 8) {
                     PlayerType[var16] = 0;
                     this.CreateWipeInOut(var1, 1);
                     tcbNow.md = 1005;
                     tcbNow.lp = 0;
                  } else {
                     this.CreateWipeInOut(var1, 1);
                     tcbNow.md = 1006;
                     tcbNow.lp = 0;
                  }
               }

               this._FILESave(var1);
               iReqSENo = 0;
               this.PushSE(var1, 0);
            }
         } else if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            if (this.isMission(var1) != 0) {
               iReqSENo = 0;
               this.PushSE(var1, 0);
               tcbNow.md = 1025;
               tcbNow.lp = 0;
               this.CreateWipeInOut(var1, 1);
            }
         } else {
            for(var2 = 0; var2 < 8; ++var2) {
               if (TouchesXPos[0] > var2 * 56 + 16 && TouchesXPos[0] < var2 * 56 + 64 && TouchesYPos[0] > 116 && TouchesYPos[0] < 188 && TouchesStatus[0] != 0) {
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  tcbNow._work[11] = var2;
                  tcbNow._work[12] = this.GetCardNo(var1, tcbNow._work[21], tcbNow._work[11]);
                  tcbNow._work[13] = tcbNow._work[12];
                  this._TKilx(var1, 24586, 24586);

                  for(var2 = 0; var2 < 8; ++var2) {
                     var4 = this.GetCardNo(var1, tcbNow._work[21], var2);
                     var16 = this.GetCardLevel(var1, var4);
                     if (var4 == 0) {
                        var16 = 0;
                     }

                     this.CreatePanelSingle(var1, 24586, var2 + 6, var16 + 55, 12298, 0, var2 * 56 + 40, 164);
                  }

                  tcbNow.md = 1027;
                  tcbNow.lp = 0;
                  return;
               }
            }

            if (TouchesXPos[0] <= 0 || TouchesXPos[0] >= 216 || TouchesYPos[0] <= 80 || TouchesYPos[0] >= 120 || TouchesStatus[0] == 0 || PlayerCardFormationCount[tcbNow._work[20]] <= 0) {
               var16 = 8;

               for(var2 = 0; var2 < 3; ++var2) {
                  if (TouchesXPos[0] > var16 && TouchesXPos[0] < var16 + 150 && TouchesYPos[0] > 204 && TouchesYPos[0] < 238 && TouchesStatus[0] != 0) {
                     tcbNow._work[9] = var2;
                     tcbNow.md = 1033;
                     tcbNow.lp = 0;
                     return;
                  }

                  var16 += 160;
               }

               return;
            }

            tcbNow.md = 1026;
            tcbNow.lp = 0;
         }
         break;
      case 1025:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 24576, 24656);
            this._FILESave(var1);
            tcbNow.md = iReturnTask;
            tcbNow.lp = 0;
         }
         break;
      case 1026:
         if (iFade == 255 || iFade == 0) {
            tcbNow.md = 1046;
            tcbNow.lp = 0;
         }
         break;
      case 1027:
         var2 = tcbNow._work[11] * 56 + 40;
         var16 = this.GetCardLevel(var1, tcbNow._work[12]);
         tcbNow._work[22] = var2 << 16;
         tcbNow._work[23] = 10747904;
         this._TKilx(var1, 24666, 24666);
         tcbEffect[1] = this.CreatePanelSingle(var1, 24666, tcbNow._work[11] + 6, var16 + 140, 12298, 0, var2, 164);
         tcbNow.md = 1028;
         tcbNow.lp = 0;
         break;
      case 1028:
         var2 = tcbNow._work[11];
         this.GetCardLevel(var1, tcbNow._work[12]);
         var9 = tcbNow._work;
         var9[22] += (15728640 - (var2 * 56 + 40 << 16)) / 10;
         var9 = tcbNow._work;
         var9[23] += 65536;
         tcbEffect[1].obj.x = tcbNow._work[22];
         tcbEffect[1].obj.y = tcbNow._work[23];
         this._TLoop(var1, 9, 1029);
         break;
      case 1029:
         this._TKilx(var1, 24666, 24666);
         tcbNow.md = 1035;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 1030:
         this.CreatePanelSingle(var1, 24676, 0, 266, 12368, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 76, 24676, 12370, 27, 140, 16);
         tcbNow.md = 1032;
         tcbNow.lp = 0;
         break;
      case 1031:
         this.CreatePanelSingle(var1, 24676, 0, 266, 12368, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 75, 24676, 12370, 27, 140, 16);
         tcbNow.md = 1032;
         tcbNow.lp = 0;
         break;
      case 1032:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            this._TKilx(var1, 24676, 24676);
            tcbNow.md = 1024;
            tcbNow.lp = 0;
         }
         break;
      case 1033:
         tcbNow._work[8] = 1;
         this.autoCardTask = null;
         this.autoCardTask = new AutoCardTask(this);
         this.autoCardTask.start(tcbNow._work[21], tcbNow._work[19], tcbNow._work[9]);
         tcbNow.md = 1034;
         tcbNow.lp = 0;
         break;
      case 1034:
         if (this.autoCardTask.isEnd()) {
            if (this.autoCardTask.getError() == 0) {
               for(var2 = 0; var2 < 8; ++var2) {
                  this.SetCardNo(var1, tcbNow._work[21], var2, this.autoCardTask.get(var2));
               }
            }

            this.autoCardTask = null;
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow.md = 1021;
            tcbNow.lp = 0;
            this._TKilx(var1, 24676, 24676);
         }
         break;
      case 1035:
         LoadData[15] = -1;
         LoadData[14] = tcbNow._work[13] + 255;
         this.SetLoad(var1, true);
         var16 = this.GetPutCardCost(var1, tcbNow._work[21]);
         this._TKilx(var1, 24616, 24636);
         var4 = tcbNow._work[13];
         var2 = this.GetCardLevel(var1, var4);
         if (tcbNow._work[13] == 0) {
            var2 = 0;
         }

         this.CreatePanelSingle(var1, 24626, 14, var2 + 44, 12338, 0, 240, 174);
         this.DrawTextClear(var1, 0);
         this.CardGDTString(var1, 0, var4, 8, 0, this.CardData_TextPage[iLanguage * 2 + 0], 24616, 12338, 40, 246, 16);
         this.CardGDTString(var1, 0, var4, 8, 0, this.CardData_TextPage[iLanguage * 2 + 1], 24616, 12318, 40, 278, 16);
         this.CreatePanelSingle(var1, 24616, 0, 240, 12348, 0, 240, 174);
         this.CreatePanelSingle(var1, 24616, 0, 243, 12348, 0, 0, 0);
         if (var16 > tcbNow._work[19]) {
            this.CreatePanelSingle(var1, 24616, 0, 246, 12348, 0, 240, 174);
            this._TKilx(var1, 24646, 24646);
            this.CreateValueObjectB(var1, 24646, 390, 245, var16, 2, 14, 110, 12338, 0, 0, 0);
            this.CreatePanelSingle(var1, 24646, 0, 140, 12339, 0, 415, 245);
            this.CreateValueObjectB(var1, 24646, 426, 245, tcbNow._work[19], 2, 14, 100, 12338, 0, 0, 0);
         } else {
            this._TKilx(var1, 24646, 24646);
            this.CreateValueObjectB(var1, 24646, 390, 245, var16, 2, 14, 100, 12338, 0, 0, 0);
            this.CreatePanelSingle(var1, 24646, 0, 140, 12339, 0, 415, 245);
            this.CreateValueObjectB(var1, 24646, 426, 245, tcbNow._work[19], 2, 14, 100, 12338, 0, 0, 0);
         }

         var16 = this.GetAttackSelect(var1, 0) + this.GetPutCardAttack(var1, tcbNow._work[21]) + this.GetCardAttackFmALL(var1, 0);
         var2 = this.GetDeffenceSelect(var1, 0) + this.GetPutCardDefence(var1, tcbNow._work[21]) + this.GetCardDefenceFmALL(var1, 0);
         if (var16 > tcbNow._work[14]) {
            this.CreatePanelSingle(var1, 24616, 0, 253, 12348, 0, 403, 186);
         } else if (var16 < tcbNow._work[14]) {
            this.CreatePanelSingle(var1, 24616, 0, 254, 12348, 0, 403, 186);
         }

         this.CreateValueObjectB(var1, 24616, 338, 186, Math.abs(var16 - tcbNow._work[14]), 5, 14, 100, 12358, 0, 0, 0);
         if (var2 > tcbNow._work[15]) {
            this.CreatePanelSingle(var1, 24616, 0, 253, 12348, 0, 403, 215);
         } else if (var2 < tcbNow._work[15]) {
            this.CreatePanelSingle(var1, 24616, 0, 254, 12348, 0, 403, 215);
         }

         this.CreateValueObjectB(var1, 24616, 338, 215, Math.abs(var2 - tcbNow._work[15]), 5, 14, 100, 12358, 0, 0, 0);
         tcbNow.md = 1036;
         tcbNow.lp = 0;
         break;
      case 1036:
         var12 = 0;

         for(var2 = 0; var2 < 2; ++var2) {
            if (TouchesXPos[0] > 160 && TouchesXPos[0] < 320 && TouchesYPos[0] > var12 && TouchesYPos[0] < var12 + 80 && TouchesStatus[0] != 0) {
               iReqSENo = 0;
               this.PushSE(var1, 0);
               tcbNow._work[10] = var2;
               tcbNow.md = 1037;
               tcbNow.lp = 0;
               return;
            }

            var12 = 245;
         }

         if (TouchesXPos[0] > 192 && TouchesXPos[0] < 288 && TouchesYPos[0] > 92 && TouchesYPos[0] < 236 && TouchesStatus[0] != 0) {
            if (this.GetPutCardCost(var1, tcbNow._work[21]) > tcbNow._work[19]) {
               iReqSENo = 0;
               this.PushSE(var1, 0);
               tcbNow.md = 1043;
               tcbNow.lp = 0;
            } else {
               iReqSENo = 0;
               this.PushSE(var1, 0);
               tcbNow.md = 1042;
               tcbNow.lp = 0;
            }
         } else if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0 || this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow.md = 1041;
            tcbNow.lp = 0;
         }
         break;
      case 1037:
         var2 = tcbNow._work[13];
         var16 = 0;

         while(true) {
            if (var16 < 90) {
               if (tcbNow._work[10] == 0) {
                  var4 = var2 - 1;
                  var2 = var4;
                  if (var4 < 0) {
                     var2 = 89;
                  }
               } else {
                  var2 = (var2 + 1) % 90;
               }

               if ((this.GetCardLevel(var1, var2) < 0 || this.CardPutCheck(var1, tcbNow._work[21], var2) != 0) && var2 != 0) {
                  ++var16;
                  continue;
               }

               tcbNow._work[23] = tcbNow._work[13];
               tcbNow.md = 1039;
               tcbNow.lp = 0;
               tcbNow._work[13] = var2;
               tcbNow._work[22] = 174;
               this.SetCardNo(var1, tcbNow._work[21], tcbNow._work[11], tcbNow._work[13]);
               LoadData[15] = tcbNow._work[13] + 255;
               this.SetLoad(var1, true);
               return;
            }

            tcbNow.md = 1038;
            tcbNow.lp = 0;
            return;
         }
      case 1038:
         this._TLoop(var1, 30, 1035);
         break;
      case 1039:
         var2 = this.GetCardLevel(var1, tcbNow._work[13]);
         this._TKilx(var1, 24626, 24636);
         var9 = tcbNow._work;
         var9[22] -= 16;
         if (tcbNow._work[22] < 0) {
            tcbNow._work[22] = 0;
            tcbNow.md = 1040;
            tcbNow.lp = 0;
         }

         if (tcbNow._work[10] == 0) {
            this.CreatePanelSingle(var1, 24626, 15, var2 + 44, 12343, 0, 240, 174 - tcbNow._work[22]);
            this.CreatePanelSingle(var1, 24626, 15, var2 + 44, 12343, 0, 240, 174 - tcbNow._work[22]);
            if (tcbNow._work[22] != 0) {
               if (tcbNow._work[22] == 0) {
               }

               this.CreatePanelSingle(var1, 24636, 14, this.GetCardLevel(var1, tcbNow._work[23]) + 44, 12338, 0, 240, 348 - tcbNow._work[22]);
            }
         } else {
            this.CreatePanelSingle(var1, 24626, 15, var2 + 44, 12338, 0, 240, tcbNow._work[22] + 174);
            if (tcbNow._work[22] != 0) {
               var2 = this.GetCardLevel(var1, tcbNow._work[23]);
               if (tcbNow._work[23] == 0) {
                  var2 = 0;
               }

               this.CreatePanelSingle(var1, 24636, 14, var2 + 44, 12343, 0, 240, tcbNow._work[22] + 0);
            }
         }
         break;
      case 1040:
         tcbNow.md = 1035;
         tcbNow.lp = 0;
         break;
      case 1041:
         this.SetCardNo(var1, tcbNow._work[21], tcbNow._work[11], tcbNow._work[12]);
         this._TKilx(var1, 24616, 24636);
         tcbNow.md = 1021;
         tcbNow.lp = 0;
         break;
      case 1042:
         this.SetCardNo(var1, tcbNow._work[21], tcbNow._work[11], tcbNow._work[13]);
         this._TKilx(var1, 24616, 24636);
         tcbNow.md = 1021;
         tcbNow.lp = 0;
         break;
      case 1043:
         this._TKilx(var1, 24636, 24636);
         this.CreatePanelSingle(var1, 24636, 0, 245, 12368, 0, 0, 0);
         this.TextGDTString(var1, 0, iLanguage, 16, 24636, 12369, 128, 160, 16);
         tcbNow.md = 1044;
         tcbNow.lp = 0;
         break;
      case 1044:
         this._TLoop(var1, 10, 1045);
         break;
      case 1045:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            this._TKilx(var1, 24636, 24636);
            tcbNow.md = 1035;
            tcbNow.lp = 0;
         }
         break;
      case 1046:
         this._TKilx(var1, 24576, 24656);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 219, 12289, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 0, 10, 12329, 0, 0, 0);
         tcbNow._work[10] = 0;
         tcbNow._work[11] = -1;
         tcbNow.md = 1047;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 1047:
         var2 = tcbNow._work[10];
         this._TKilx(var1, 24586, 24586);
         this.controller.Init();
         this.padID[0] = this.controller.AddPad(100, 0, 280, 320, 3, 0);
         tcbNow.md = 1048;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 1048:
         boolean var21 = false;
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            if (iPlayMode == 7) {
               tcbNow.md = 1101;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 1082;
               tcbNow.lp = 0;
            }

            for(var2 = 0; var2 < 8; ++var2) {
               LoadData[var2 + 14] = -1;
            }

            this.SetLoad(var1, true);
            this.CreateWipeInOut(var1, 1);
         } else {
            var11 = var21;
            if (PlayerCardFormationCount[0] > 4) {
               var16 = 0;

               while(true) {
                  var11 = var21;
                  if (var16 >= 2) {
                     break;
                  }

                  if (TouchesXPos[0] > 200 && TouchesXPos[0] < 280 && TouchesYPos[0] > var16 * 256 + 24 && TouchesYPos[0] < var16 * 256 + 64 && TouchesStatus[0] != 0) {
                     if (var16 == 0) {
                        var11 = var21;
                        if (tcbNow._work[10] > 0) {
                           var9 = tcbNow._work;
                           var10002 = var9[10]--;
                           var11 = true;
                        }
                     } else {
                        var11 = var21;
                        if (tcbNow._work[10] < PlayerCardFormationCount[0] - 3) {
                           var9 = tcbNow._work;
                           var10002 = var9[10]++;
                           var11 = true;
                        }
                     }
                     break;
                  }

                  ++var16;
               }
            }

            if (!var11) {
               var16 = 71;

               for(var2 = 0; var2 < 3; ++var2) {
                  if (TouchesXPos[0] > 0 && TouchesXPos[0] < 480 && TouchesYPos[0] > var16 && TouchesYPos[0] < 80 + var16 && TouchesStatus[0] != 0) {
                     if (tcbNow._work[10] + var2 < PlayerCardFormationCount[0]) {
                        this.CreateWipeInOut(var1, 1);
                        iReqSENo = 0;
                        this.PushSE(var1, 0);
                        tcbNow._work[12] = tcbNow._work[10] + var2;
                        tcbNow.md = 1049;
                        tcbNow.lp = 0;
                     }

                     return;
                  }

                  var16 += 80;
               }
            }

            if (tcbNow._work[10] != tcbNow._work[11]) {
               tcbNow._work[11] = tcbNow._work[10];
               this._TKilx(var1, 24596, 24596);
               this.DrawTextClear(var1, 0);
               var16 = 0;

               for(var2 = 71; var16 < 3 && tcbNow._work[10] + var16 < PlayerCardFormationCount[0]; var2 += 80) {
                  var4 = (tcbNow._work[10] + var16) / 32;
                  var5 = tcbNow._work[10];
                  if ((PlayerCardFormationOK[0][var4] & 1 << (var5 + var16) % 32) != 0) {
                     this.CreatePanelSingle(var1, 24596, 0, 268, 12338, 0, 0, var2 - 15);
                  } else {
                     this.CreatePanelSingle(var1, 24596, 0, 221, 12338, 0, 0, var2 - 15);
                  }

                  this.GDTString(var1, 0, this.GameData_TextPage[iLanguage * 3 + 0], PlayerCardFormation[0][tcbNow._work[10] + var16], 24596, 12339, 24, var2 - 9, 16);
                  this.CreateValueObjectB(var1, 24596, 290, var2 - 7, this.GetCardAttackFm(var1, 0, tcbNow._work[10] + var16), 6, 14, 100, 12379, 1, 0, 0);
                  this.CreateValueObjectB(var1, 24596, 396, var2 - 7, this.GetCardDefenceFm(var1, 0, tcbNow._work[10] + var16), 6, 14, 100, 12379, 1, 0, 0);
                  var6 = 0;
                  if (this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[0][tcbNow._work[10] + var16] * this.pGameData.piGameDataXSize[50] + 1] != 0) {
                     for(var4 = 0; var4 < 8; ++var4) {
                        short var18 = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[0][tcbNow._work[10] + var16] * this.pGameData.piGameDataXSize[50] + 5 + var4];
                        if (var18 <= 0) {
                           break;
                        }

                        if (this.GetCardLevel(var1, var18) < 0) {
                           this.CreatePanelSingle(var1, 24596, 29, var18 + 200, 12329, 0, var4 * 40 + 24, var2 + 15);
                        } else {
                           this.CreatePanelSingle(var1, 24596, 29, var18, 12329, 0, var4 * 40 + 24, var2 + 15);
                        }
                     }
                  } else {
                     for(var4 = 0; var4 < 3; ++var4) {
                        for(var5 = 0; var5 < this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[0][tcbNow._work[10] + var16] * this.pGameData.piGameDataXSize[50] + 2 + var4]; ++var5) {
                           this.CreatePanelSingle(var1, 24596, 29, var4 + 400, 12329, 0, var6 + 24, var2 + 15);
                           var6 += 40;
                        }
                     }
                  }

                  ++var16;
               }

               if (PlayerCardFormationCount[0] > 3) {
                  if (tcbNow._work[10] > 0) {
                     this.CreatePanelSingle(var1, 24596, 0, 270, 12348, 0, 240, 30);
                  }

                  if (tcbNow._work[10] < PlayerCardFormationCount[0] - 3) {
                     this.CreatePanelSingle(var1, 24596, 0, 271, 12348, 0, 240, 276);
                  }
               }
            }
         }
         break;
      case 1049:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 24596, 24596);
            tcbNow.md = 1050;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 1050:
         var16 = 0;
         var4 = 0;
         var5 = tcbNow._work[12];
         this._TKilx(var1, 24586, 24586);
         this.DrawTextClear(var1, 0);
         this.CreatePanelSingle(var1, 24586, 0, 221, 12338, 0, 0, 45);
         this.GDTString(var1, 0, this.GameData_TextPage[iLanguage * 3 + 0], PlayerCardFormation[0][var5], 24586, 12339, 24, 49, 16);
         this.CreateValueObjectB(var1, 24596, 290, 53, this.GetCardAttackFm(var1, 0, var5), 6, 14, 100, 12368, 1, 0, 0);
         this.CreateValueObjectB(var1, 24596, 396, 53, this.GetCardDefenceFm(var1, 0, var5), 6, 14, 100, 12368, 1, 0, 0);
         if (this.isMission(var1) != 0 && (iPlayMode == 0 || iPlayMode == 2 || iPlayMode == 7 && iCardPreviewMode == 0)) {
            this.CreatePanelSingle(var1, 24596, 0, 302, 12349, 0, 404, 248);
         }

         this.CreatePanelSingle(var1, 24586, 0, 90, 12338, 0, 8, 206 - 8);
         this.GDTString(var1, 0, this.GameData_TextPage[iLanguage * 3 + 1], PlayerCardFormation[0][var5], 24586, 12339, 32, 206 + 10, 16);
         LoadData[13] = 255;

         for(var2 = 0; var2 < 8; ++var2) {
            short var17 = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[0][var5] * this.pGameData.piGameDataXSize[50] + 5 + var2];
            LoadData[var2 + 14] = -1;
            if (var17 > 0) {
               LoadData[var2 + 14] = var17 + 255;
            }
         }

         this.SetLoad(var1, true);
         if (this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[0][var5] * this.pGameData.piGameDataXSize[50] + 1] != 0) {
            for(var2 = 0; var2 < 8; ++var2) {
               short var20 = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[0][var5] * this.pGameData.piGameDataXSize[50] + 5 + var2];
               if (var20 != 0) {
                  this.CreatePanelSingle(var1, 24586, var2 + 14, 33, 12343, 0, var16 + 40, 137);
                  if (iPlayMode == 7) {
                     if (this.GetCardLevel(var1, var20) < 0) {
                        this.CreatePanelSingle(var1, 24586, 0, 287, 12348, 0, var16 + 40, 137);
                     }
                  } else if (this.GetCardLevel(var1, var20) < 0) {
                     this.CreatePanelSingle(var1, 24586, 0, 287, 12348, 0, var16 + 40, 137);
                  }

                  var16 += 56;
               }
            }
         } else {
            for(var2 = 0; var2 < 3; ++var2) {
               for(var16 = 0; var16 < this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[0][var5] * this.pGameData.piGameDataXSize[50] + 2 + var2]; ++var16) {
                  this.CreatePanelSingle(var1, 24586, 13, var2 + 34, 12343, 0, var4 + 40, 137);
                  var4 += 56;
               }
            }
         }

         tcbNow.md = 1051;
         tcbNow.lp = 0;
         break;
      case 1051:
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow._work[11] = -1;
            tcbNow.md = 1052;
            tcbNow.lp = 0;
         }

         if (TouchesXPos[0] > 404 && TouchesXPos[0] < 488 && TouchesYPos[0] > 248 && TouchesYPos[0] < 322 && TouchesStatus[0] != 0 && this.isMission(var1) != 0 && (iPlayMode == 0 || iPlayMode == 2 || iPlayMode == 7 && iCardPreviewMode == 0)) {
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 1053;
            tcbNow.lp = 0;
         }
         break;
      case 1052:
         this._TLoop(var1, 4, 1047);
         break;
      case 1053:
         if (iFade == 255 || iFade == 0) {
            var1.iAppFree = this.GetAppFree(var1);
            var1.glview.SmapStart();
            tcbNow.md = 276;
            tcbNow.lp = 0;
            this._TKilx(var1, 8193, 65535);
            iSmapReturnMD = 272;
         }
         break;
      case 1054:
         tcbNow._work[10] = 0;
         tcbNow.md = 1055;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 1055:
         if (iCardPreviewMode == 0) {
            this.InitAutoCardBuf(var1, 100000, 0, 0);
         } else if (iCardPreviewMode == 1) {
            this.InitAutoCardBuf(var1, 100000, -1, 0);
         } else {
            this.InitAutoCardBuf(var1, 100000, -2, 0);
         }

         if (iCardPreviewMode == 2) {
            this._TKilx(var1, 8193, 28672);
         } else {
            this._TKilx(var1, 8193, 65535);
         }

         this.controller.Init();
         this.padID[0] = this.controller.AddPad(100, 0, 280, 320, 3, 0);
         if (iCardPreviewMode == 0) {
            this.CreatePanelSingle(var1, 24576, 5, 269, 12288 + 2, 0, 0, 0);
         } else if (iCardPreviewMode == 1) {
            this.CreatePanelSingle(var1, 24576, 5, 271, 12288 + 2, 0, 0, 0);
         } else if (iCardPreviewMode == 2) {
            this.CreatePanelSingle(var1, 24576, 5, 275, 12288 + 2, 0, 0, 0);
         }

         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         if (iCardBufCount <= 0) {
            tcbNow.md = 1060;
            tcbNow.lp = 0;
         } else {
            this.CreatePanelSingle(var1, 24576 + 1, 0, 89, 12288 + 2, 0, 8, 200);
            this.CreatePanelSingle(var1, 24576 + 1, 0, 27, 12288 + 100, 0, 16, 128);
            this.CreatePanelSingle(var1, 24576 + 1, 0, 29, 12288 + 100, 0, 464, 128);
            this.CreatePanelSingle(var1, 24576, 0, 10, 12288 + 5, 0, 0, 0);
            if (iCardPreviewMode == 1) {
               this.CreatePanelSingle(var1, 24576 + 50, 5, 270, 12288 + 48, 0, 240, 168);
               this.CreateValueObjectB(var1, 24576 + 50, 400, 168, this.GetTicket(var1), 3, 14, 230, 12288 + 50, 0, 0, 0);
            } else if (iCardPreviewMode == 2) {
            }

            var2 = iCardBufCount;
            if (var2 < 9) {
               while(var2 < 9) {
                  iCardBuf[iCardBufCount] = 0;
                  ++iCardBufCount;
                  ++var2;
               }
            }

            tcbNow.md = 1056;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 1056:
         var4 = this.GetTicket(var1);

         for(var2 = 0; var2 < 9; ++var2) {
            LoadData[var2 + 6] = -1;
            tcbNow._work[var2 + 0] = 0;
         }

         LoadData[5] = 1;
         LoadData[10] = iCardBuf[tcbNow._work[10]] + 255;
         tcbNow._work[4] = iCardBuf[tcbNow._work[10]];

         for(var2 = 0; var2 < 4; ++var2) {
            var16 = (tcbNow._work[10] + 1 + var2) % iCardBufCount;
            LoadData[var2 + 11] = iCardBuf[var16] + 255;
            tcbNow._work[var2 + 5] = iCardBuf[var16];
         }

         for(var2 = 0; var2 < 4; ++var2) {
            var16 = (tcbNow._work[10] + iCardBufCount - 1 - var2) % iCardBufCount;
            LoadData[9 - var2] = iCardBuf[var16] + 255;
            tcbNow._work[3 - var2] = iCardBuf[var16];
         }

         this._TKilx(var1, 24576 + 10, 24576 + 10);

         for(var2 = 0; var2 < 9; ++var2) {
            var16 = var2 + 1 << 1;
            var5 = this.CardSelectPos[var16];
            var6 = this.CardSelectPos[var16 + 1];
            var16 = this.GetCardLevel(var1, tcbNow._work[var2 + 0]);
            if (iCardPreviewMode == 1 || tcbNow._work[var2 + 0] == 0) {
               var16 = 0;
            }

            short var19 = this.pGameData.piGameData[this.pGameData.piGameDataPos[136] + tcbNow._work[var2 + 0] * this.pGameData.piGameDataXSize[136] + 2];
            if (iCardPreviewMode == 1 && var19 > var4) {
               this.CreatePanelSingle(var1, 24576 + 10, var2 + 6, this.CardSelectAno[var2 + 27] + var16, 12288 + 20, 0, var5, var6);
            } else {
               this.CreatePanelSingle(var1, 24576 + 10, var2 + 6, this.CardSelectAno[var2] + var16, 12288 + 20, 0, var5, var6);
            }

            tcbEffect[var2] = null;
         }

         tcbNow._work[20] = 0;
         this.SetLoad(var1, true);
         tcbNow.md = 1057;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 1057:
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            iReqSENo = 0;
            this.PushSE(var1, 0);
            if (iCardPreviewMode == 2) {
               tcbNow.md = 1064;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 1066;
               tcbNow.lp = 0;
            }
         } else {
            if (iCardPreviewMode != 0) {
               if (iCardPreviewMode == 1) {
                  if (TapPullXPos[0] > 190 && TapPullXPos[0] < 290 && TapPullYPos[0] > 40 && TapPullYPos[0] < 200 && tcbNow._work[4] != 0) {
                     tcbNow.md = 1070;
                     tcbNow.lp = 0;
                     break;
                  }
               } else {
                  var2 = this.CardSelectPos[10];
                  var16 = this.CardSelectPos[11];
                  if (TapPullXPos[0] > var2 - 48 && TapPullXPos[0] < var2 + 48 && TapPullYPos[0] > var16 - 72 && TapPullYPos[0] < var16 + 72) {
                     if (tcbNow._work[4] != 0) {
                        tcbNow.md = 161;
                        tcbNow.lp = 0;
                     }
                     break;
                  }
               }
            }

            if (iCardBufCount > 1) {
               if (tcbNow._work[21] == 0) {
                  if (TouchesXPos[0] > 0) {
                     var9 = tcbNow._work;
                     var10002 = var9[22]++;
                  } else {
                     tcbNow._work[22] = 0;
                  }
               }

               if (tcbNow._work[22] >= 11 || tcbNow._work[22] == 1 || tcbNow._work[21] > 0 || tcbNow._work[21] < 0) {
                  if (tcbNow._work[21] < 0) {
                     var9 = tcbNow._work;
                     var10002 = var9[21]++;
                  }

                  if (tcbNow._work[21] > 0) {
                     var9 = tcbNow._work;
                     var10002 = var9[21]--;
                  }

                  if (TouchesXPos[0] > 0 && TouchesXPos[0] < 48 && TouchesYPos[0] > 40 && TouchesYPos[0] < 240 || tcbNow._work[21] < 0) {
                     tcbNow._work[16] = 1;
                     tcbNow._work[17] = 0;
                     this._TKilx(var1, 24576 + 10, 24576 + 10);
                     tcbNow.md = 1058;
                     tcbNow.lp = 0;
                     this.Game(var1, tcbNow.md);
                     break;
                  }

                  if (TouchesXPos[0] > 432 && TouchesXPos[0] < 480 && TouchesYPos[0] > 40 && TouchesYPos[0] < 240 || tcbNow._work[21] > 0) {
                     tcbNow._work[16] = 0;
                     tcbNow._work[17] = 0;
                     this._TKilx(var1, 24576 + 10, 24576 + 10);
                     tcbNow.md = 1058;
                     tcbNow.lp = 0;
                     this.Game(var1, tcbNow.md);
                     break;
                  }
               }
            }

            if (tcbNow._work[20] == 0) {
               tcbNow._work[20] = 1;
               this.DrawTextClear(var1, 0);
               if (tcbNow._work[4] != 0) {
                  this.CardGDTString(var1, 0, tcbNow._work[4], 4, 0, this.CardData_TextPage[iLanguage * 2 + 0], 24576 + 10, 12288 + 30, 32, 217, 16);
                  this.CardGDTString(var1, 0, tcbNow._work[4], 4, 0, this.CardData_TextPage[iLanguage * 2 + 1], 24576 + 10, 12288 + 30, 32, 235, 16);
                  if (iCardPreviewMode == 1) {
                     this.CreatePanelSingle(var1, 24576 + 10, 5, 272, 12288 + 30, 0, 248, 280);
                     this.CreateValueObjectB(var1, 24576 + 10, 400, 280, this.pGameData.piGameData[this.pGameData.piGameDataPos[136] + tcbNow._work[4] * this.pGameData.piGameDataXSize[136] + 2], 3, 14, 230, 12288 + 30, 0, 0, 0);
                  }
               }
            }
         }
         break;
      case 1058:
         byte var14 = 8;
         var5 = this.GetTicket(var1);
         byte var15 = var14;
         if (tcbNow._work[21] != 0) {
            if (Math.abs(tcbNow._work[21]) == 2) {
               var15 = 12;
            } else {
               var15 = var14;
               if (Math.abs(tcbNow._work[21]) == 1) {
                  var15 = 16;
               }
            }
         }

         var9 = tcbNow._work;
         var10002 = var9[17]++;
         if (tcbNow._work[17] > var15) {
            tcbNow.md = 1059;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
            break;
         } else {
            for(var16 = 0; var16 < 9; ++var16) {
               if (LoadData[var16 + 6] >= 0) {
                  var4 = var16 + 1 << 1;
                  var6 = this.CardSelectPos[var4];
                  int var7 = this.CardSelectPos[var4 + 1];
                  if (tcbNow._work[16] == 0) {
                     var4 = var16 << 1;
                  } else {
                     var4 = var16 + 2 << 1;
                  }

                  int var8 = (this.CardSelectPos[var4] - var6) * 500 / var15 * tcbNow._work[17] / 500;
                  if (tcbEffect[var16] != null) {
                     tcbEffect[var16].obj.x = var6 + var8 << 16;
                  } else {
                     var4 = this.GetCardLevel(var1, tcbNow._work[var16 + 0]);
                     if (iCardPreviewMode == 1 || tcbNow._work[var16 + 0] == 0) {
                        var4 = 0;
                     }

                     if (iCardPreviewMode == 1) {
                        if (this.pGameData.piGameData[this.pGameData.piGameDataPos[136] + tcbNow._work[var16 + 0] * this.pGameData.piGameDataXSize[136] + 2] > var5) {
                           tcbEffect[var16] = this.CreatePanelSingle(var1, 24576 + 10, var16 + 6, this.CardSelectAno[var16 + 27 + 9 + tcbNow._work[16] * 9] + var4, 12288 + 20, 0, var6 + var8, var7);
                        } else {
                           tcbEffect[var16] = this.CreatePanelSingle(var1, 24576 + 10, var16 + 6, this.CardSelectAno[var16 + 9 + tcbNow._work[16] * 9] + var4, 12288 + 20, 0, var6 + var8, var7);
                        }
                     } else {
                        tcbEffect[var16] = this.CreatePanelSingle(var1, 24576 + 10, var16 + 6, this.CardSelectAno[var16 + 9 + tcbNow._work[16] * 9] + var4, 12288 + 20, 0, var6 + var8, var7);
                     }
                  }
               }
            }

            return;
         }
      case 1059:
         if (tcbNow._work[16] == 0) {
            tcbNow._work[10] = (tcbNow._work[10] + 1) % iCardBufCount;

            for(var2 = 0; var2 < 8; ++var2) {
               this.SwapGameData(var1, var2 + 6, var2 + 7);
            }
         } else {
            tcbNow._work[10] = (tcbNow._work[10] + iCardBufCount - 1) % iCardBufCount;

            for(var2 = 0; var2 < 8; ++var2) {
               this.SwapGameData(var1, 13 - var2, 14 - var2);
            }
         }

         tcbNow.md = 1056;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 1060:
         this.CreatePanelSingle(var1, 24576, 0, 89, 12288 + 3, 0, 8, 200);
         tcbNow.md = 1061;
         tcbNow.lp = 0;
         break;
      case 1061:
         this._TLoop(var1, 10, 1062);
         break;
      case 1062:
         this._TKilx(var1, 24576 + 30, 24576 + 30);
         this.DrawTextClear(var1, 0);
         this.TextGDTStringAlpha(var1, 0, iLanguage, 262, 24576 + 30, 12288 + 30, 32, 217, 16, 1);
         this.CreatePanelSingle(var1, 24576 + 30, 0, 272, 12288 + 3, 0, 424, 288);
         tcbNow.md = 1063;
         tcbNow.lp = 0;
         break;
      case 1063:
         var11 = false;
         if (this.CheckBack(var1, TouchesXPos[0], TouchesYPos[0], TouchesStatus[0])) {
            var11 = true;
         }

         boolean var13 = var11;
         if (TouchesXPos[0] > 0) {
            var13 = var11;
            if (TouchesStatus[0] != 0) {
               var13 = true;
            }
         }

         if (var13) {
            if (iCardPreviewMode == 2) {
               tcbNow.md = 1064;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 1066;
               tcbNow.lp = 0;
            }
         }
         break;
      case 1064:
         if (iCardPreviewMode == 2) {
            bBTSend = false;
            bBTDataSetOK = false;
            iBTReadDataIndex = 0;
            iBTReadDataBufIndex = 0;
            this.BTReset(var1, true);
         }

         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 1065;
         tcbNow.lp = 0;
         break;
      case 1065:
         if (iFade == 255 || iFade == 0) {
            if (iCardPreviewMode == 2) {
               this.BTDispose(var1);
               iCardPreviewMode = 0;
            }

            iPlayMode = 7;
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 418;
            tcbNow.lp = 0;
         }
         break;
      case 1066:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 1067;
         tcbNow.lp = 0;
         break;
      case 1067:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            if (iCardPreviewMode == 0) {
               tcbNow.md = 418;
               tcbNow.lp = 0;
            } else if (iCardPreviewMode == 1) {
               tcbNow.md = 418;
               tcbNow.lp = 0;
            }
         }
         break;
      case 1068:
         this.CreateWipeInOut(var1, 1);
         tcbNow.md = 1069;
         tcbNow.lp = 0;
         break;
      case 1069:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            iCardPreviewMode = 1;
            tcbNow.md = 1054;
            tcbNow.lp = 0;
         }
         break;
      case 1070:
         this.GetTicket(var1);
         short var10000 = this.pGameData.piGameData[this.pGameData.piGameDataPos[136] + tcbNow._work[4] * this.pGameData.piGameDataXSize[136] + 2];
         this.GetCardLevel(var1, tcbNow._work[4]);
         if (tcbNow._work[4] > 0) {
            tcbNow._work[21] = -1;
            this.CreatePanelSingle(var1, 24576 + 30, 0, 275, 12288 + 105, 0, 0, 0);
            this.TextGDTString(var1, 0, iLanguage, 68, 24576 + 20, 12288 + 115, 32, 112, 16);
            this.TextGDTString(var1, 0, iLanguage, 11, 24576 + 20, 12288 + 115, 98, 236, 16);
            this.TextGDTString(var1, 0, iLanguage, 12, 24576 + 20, 12288 + 115, 340, 236, 16);
            tcbNow.md = 1071;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 1071:
         var12 = 306;

         for(var2 = 0; var2 < 2; ++var2) {
            if (TouchesXPos[0] > var12 && TouchesXPos[0] < var12 + 120 && TouchesYPos[0] > 220 && TouchesYPos[0] < 220 + 50 && TouchesStatus[0] != 0) {
               iReqSENo = 0;
               this.PushSE(var1, 0);
               tcbNow._work[21] = var2;
               tcbNow.md = 1072;
               tcbNow.lp = 0;
               break;
            }

            var12 = 60;
         }

         if (tcbNow._work[21] >= 0) {
            this._TKilx(var1, 24576 + 30, 24576 + 30);
            this.CreatePanelSingle(var1, 24576 + 30, 0, tcbNow._work[21] + 260, 12288 + 105, 0, 0, 0);
         }
         break;
      case 1072:
         this._TLoop(var1, 45, 1073);
         break;
      case 1073:
         var2 = this.GetTicket(var1);
         var3 = this.pGameData.piGameData[this.pGameData.piGameDataPos[136] + tcbNow._work[4] * this.pGameData.piGameDataXSize[136] + 2];
         var4 = this.GetCardLevel(var1, tcbNow._work[4]);
         if (tcbNow._work[21] == 1) {
            this._TKilx(var1, 24576 + 20, 24576 + 30);
            if (var2 < var3) {
               this.CreatePanelSingle(var1, 24576 + 30, 0, 262, 12288 + 115, 0, 0, 0);
               this.TextGDTString(var1, 0, iLanguage, 69, 24576 + 30, 12288 + 120, 32, 139, 16);
               tcbNow.md = 1074;
               tcbNow.lp = 0;
            } else if (var4 >= 10) {
               this.CreatePanelSingle(var1, 24576 + 30, 0, 262, 12288 + 115, 0, 0, 0);
               this.TextGDTString(var1, 0, iLanguage, 70, 24576 + 30, 12288 + 120, 32, 139, 16);
               tcbNow.md = 1074;
               tcbNow.lp = 0;
            } else {
               this.AddCard(var1, tcbNow._work[4], 1);
               this.AddTicket(var1, this.pGameData.piGameData[this.pGameData.piGameDataPos[136] + tcbNow._work[4] * this.pGameData.piGameDataXSize[136] + 2] * -1);
               this._FILESave(var1);
               if (this.GetCardLevel(var1, tcbNow._work[4]) >= 0) {
                  iGetCardNo = tcbNow._work[4];
                  this.CreateWipeInOut(var1, 1);
                  tcbNow.md = 313;
                  tcbNow.lp = 0;
               }
            }
         } else {
            this._TKilx(var1, 24576 + 20, 24576 + 30);
            tcbNow.md = 1056;
            tcbNow.lp = 0;
         }
         break;
      case 1074:
         this._TLoop(var1, 10, 1075);
         break;
      case 1075:
         if (TouchesXPos[0] > 0) {
            this._TKilx(var1, 24576 + 20, 24576 + 30);
            tcbNow.md = 1056;
            tcbNow.lp = 0;
         }
         break;
      case 1076:
         if (iFade == 255 || iFade == 0) {
            iCardBufVal = tcbNow._work[10];
            tcbNow._work[10] = tcbNow._work[4];
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 313;
            tcbNow.lp = 0;
         }
         break;
      case 1077:
         this.TextGDTString(var1, 0, iLanguage, 36, 24576 + 20, 12288 + 90, 144, 128, 16);
         tcbNow.md = 1079;
         tcbNow.lp = 0;
         break;
      case 1078:
         this.TextGDTString(var1, 0, iLanguage, 35, 24576 + 20, 12288 + 90, 144, 128, 16);
         tcbNow.md = 1079;
         tcbNow.lp = 0;
         break;
      case 1079:
         if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
            this._TKilx(var1, 24576 + 20, 24576 + 30);
            tcbNow.md = 1056;
            tcbNow.lp = 0;
         }
      }

   }

   public void Game4(GlobalWork var1, int var2) {
      int var3;
      int var4;
      int var5;
      int var6;
      int var7;
      int var8;
      int var9;
      int var10;
      short var11;
      short var12;
      short var13;
      int var14;
      short var15;
      int[] var17;
      int var10002;
      ObjReq var19;
      short var21;
      short var22;
      byte var23;
      short var24;
      byte var26;
      short var27;
      short var29;
      short var33;
      short var34;
      short var36;
      int var37;
      short var38;
      short var39;
      int var40;
      int var41;
      byte var44;
      byte[] var47;
      ObjReq var50;
      TCB var51;
      switch(var2) {
      case 0:
      case 796:
      case 823:
      default:
         break;
      case 797:
         bClrBack = true;
         iClrR = 0;
         iClrG = 0;
         iClrB = 0;

         for(var2 = 0; var2 <= 1; ++var2) {
            for(var3 = 0; var3 < 18; var51._work[1] = var3++) {
               var51 = this._TaskMake(var1, 799, 14080);
               var51._work[0] = var2;
            }

            if (iPlayMode != 2 && iStagePoint != 0) {
               this._TaskMake(var1, 803, 14080)._work[0] = var2;
            }

            tcbNow._work[var2] = Life[var2];
            OldLife[var2] = Life[var2];
            tcbNow._work[var2 + 6] = Synchro[var2];
            var6 = SynchroMax[var2] / 100;

            for(var3 = 0; var3 < 6; ++var3) {
               if (var6 > var3) {
                  if (var2 == 1) {
                     var44 = 16;
                  } else {
                     var44 = 0;
                  }

                  if (var2 == 0) {
                     var5 = 192 - var3 * 16;
                  } else {
                     var5 = var3 * 16 + 288;
                  }

                  this.CreatePanelSingle(var1, 14081, 5, 25, 306, var44, var5, 35);
               } else {
                  if (var2 == 1) {
                     var44 = 16;
                  } else {
                     var44 = 0;
                  }

                  if (var2 == 0) {
                     var5 = 192 - var3 * 16;
                  } else {
                     var5 = var3 * 16 + 288;
                  }

                  this.CreatePanelSingle(var1, 14081, 5, 47, 306, var44, var5, 35);
               }
            }
         }

         if (iPlayMode == 2 && this.MissionLifeCheck(var1, 0, iStage) != 0) {
            this.CreatePanelSingle(var1, 14081, 5, 40, 306, 0, 240, 16);
         } else {
            for(var2 = 0; var2 < 2; this._TaskMake(var1, 801, 14081)._work[0] = var2++) {
            }
         }

         this.CreatePanelSingle(var1, 14081, 5, 24, 304, 0, 88, 20);
         this.CreatePanelSingle(var1, 14081, 5, 24, 304, 16, 392, 20);
         this.CreatePanelSingle(var1, 14081, 5, 27, 306, 0, 48, 48);
         this.CreatePanelSingle(var1, 14081, 5, 27, 306, 16, 432, 48);
         this.CreatePanelSingle(var1, 14080, 5, 29, 303, 0, 240, 0);
         if (iPlayMode != 8) {
            this.CreatePanelSingle(var1, 14080, 5, 350, 303, 0, 240, 0);
         }

         this.CreatePanelSingle(var1, 14080, 5, 48, 311, 0, 184, 304);
         this.CreatePanelSingle(var1, 14080, 5, 46, 311, 0, 80, 4);
         this.CreatePanelSingle(var1, 14080, 5, 46, 311, 0, 357, 4);

         for(var3 = 0; var3 <= 1; ++var3) {
            if (var3 == iPlayerNo) {
               for(var2 = 0; var2 < 7; var51._work[3] = var2++) {
                  var51 = this._TaskMake(var1, 833, 14081);
                  var51._work[0] = var3;
               }
            }

            var4 = Level[var3] + AddLevel[var3];
            var2 = var4;
            if (var4 > 98) {
               var2 = 98;
            }

            var5 = var2 + 1;
            if (var3 == 0) {
               var38 = 98;
            } else {
               var38 = 374;
            }

            var4 = var38;
            if (var5 >= 10) {
               this.CreatePanelSingle(var1, 14080, 5, var5 / 10 + 90, 312, 0, var38, 6);
               var4 = var38 + 10;
            }

            this.CreatePanelSingle(var1, 14080, 5, var5 % 10 + 90, 312, 0, var4, 6);
         }

         tcbNow.md = 798;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 798:
         for(var4 = 0; var4 <= 1; ++var4) {
            var2 = 1 - var4;
            if (PracticeSetting[0] == 1 && Synchro[var4] != SynchroMax[var4] && PlayerAttack[var4] == 0 && CancelTime[var4] <= 0 && tcbPlayer[var2].md != 877 && tcbPlayer[var2].md != 876) {
               this.SYNCHRO_ADD(var1, var4, 16);
            }

            var2 = tcbNow._work[var4];
            var3 = var2;
            if (OldLifeSet[var4]) {
               label1733: {
                  if (iPlayMode != 2) {
                     var3 = var2;
                     if (this.MissionLifeCheck(var1, var4, iStage) == 0) {
                        break label1733;
                     }
                  }

                  var3 = PlayerLife[var4];
               }

               OldLife[var4] = var3;
               OldLifeSet[var4] = false;
            }

            var2 = var3;
            if (var3 > Life[var4]) {
               if (var3 > Life[var4] + 2) {
                  var2 = var3 - 2;
               } else {
                  var2 = Life[var4];
               }
            }

            var3 = var2;
            if (var2 < Life[var4]) {
               if (iPlayMode != 2 && this.MissionLifeCheck(var1, var4, iStage) == 0) {
                  if (var2 < Life[var4] - 2) {
                     var3 = var2 + 2;
                  } else {
                     var3 = Life[var4];
                  }
               } else {
                  var3 = Life[var4];
               }
            }

            tcbNow._work[var4] = var3;
            GaugeLen[var4][0] = var3;
            var3 = tcbNow._work[var4 + 6];
            var2 = var3;
            if (var3 > Synchro[var4]) {
               if (var3 > Synchro[var4] + 4) {
                  var2 = var3 - 4;
               } else {
                  var2 = Synchro[var4];
               }
            }

            var3 = var2;
            if (var2 < Synchro[var4]) {
               if (var2 < Synchro[var4] - 4) {
                  var3 = var2 + 4;
               } else {
                  var3 = Synchro[var4];
               }
            }

            if (var3 >= SynchroMax[var4]) {
               GaugeLen[var4][1] = 100;
            } else {
               GaugeLen[var4][1] = var3 % 100;
            }

            GaugeLen[var4][2] = var3 / 100;
            tcbNow._work[var4 + 6] = var3;
            if (OldLife[var4] > Life[var4]) {
               if ((GaugeLen[var4][0] - 1) / 100 != (OldLife[var4] - 1) / 100) {
                  OldLife[var4] = (GaugeLen[var4][0] - 1) / 100 * 100 + 100;
               }

               if (OldLifeWait[var4] == 0 || Life[var4] <= 0) {
                  if (OldLife[var4] - 2 < Life[var4]) {
                     OldLife[var4] = Life[var4];
                  } else {
                     var17 = OldLife;
                     var17[var4] -= 2;
                  }
               }
            } else if (OldLife[var4] != Life[var4]) {
               OldLife[var4] = Life[var4];
            }
         }

         return;
      case 799:
         var6 = tcbNow._work[0];
         var2 = 0;
         var3 = 0;
         var4 = 304;
         tcbNow._work[3] = 0;
         tcbNow._work[4] = 0;
         tcbNow._work[5] = 0;
         tcbNow._work[6] = 0;
         this._SetAct(var1, 4096, 0);
         var5 = tcbNow._work[1];
         switch(var5) {
         case 0:
            this._SetAct(var1, 5, 23);
            if (var6 == 1) {
               var38 = 392;
            } else {
               var38 = 88;
            }

            var5 = var38 << 16;
            var3 = 1310720;
            var50 = objExec;
            var7 = var50.wObjFlag;
            if (var6 == 1) {
               var23 = 16;
            } else {
               var23 = 0;
            }

            var50.wObjFlag = var7 | var23;
            var2 = var5;
            break;
         case 1:
            this._SetAct(var1, 5, 41);
            if (var6 == 1) {
               var38 = 432;
            } else {
               var38 = 48;
            }

            var5 = var38 << 16;
            var3 = 3145728;
            var4 = 307;
            var50 = objExec;
            var7 = var50.wObjFlag;
            if (var6 == 1) {
               var23 = 16;
            } else {
               var23 = 0;
            }

            var50.wObjFlag = var7 | var23;
            var2 = var5;
            break;
         case 2:
            if (var6 == 1) {
               var38 = 462;
            } else {
               var38 = 18;
            }

            var2 = var38 << 16;
            var3 = 5767168;
            var4 = 304 + 7;
            break;
         case 3:
            objExec.pal = 13107200;
            var4 = 8192;
            break;
         case 4:
            if (var6 == 0) {
               var38 = 168;
            } else {
               var38 = 312;
            }

            var2 = var38 << 16;
            var3 = 0;
            break;
         case 5:
            if (var6 == 1) {
               var38 = 432;
            } else {
               var38 = 48;
            }

            var2 = var38 << 16;
            var3 = 3145728;
            var4 = 308;
            break;
         case 6:
            if (var6 == 1) {
               var38 = 432;
            } else {
               var38 = 48;
            }

            var4 = var38 << 16;
            var3 = 3145728;
            var50 = objExec;
            var5 = var50.wObjFlag;
            if (var6 == 1) {
               var23 = 16;
            } else {
               var23 = 0;
            }

            var50.wObjFlag = var5 | var23;
            var50 = objExec;
            var50.wObjFlag |= 1;
            var5 = 304 + 10;
            var2 = var4;
            var4 = var5;
            break;
         case 7:
            this._SetAct(var1, 5, 0);
            if (var6 == 0) {
               var38 = 91;
            } else {
               var38 = 370;
            }

            var2 = var38 << 16;
            var3 = 2228224;
            tcbNow._work[2] = 0;
            break;
         case 8:
            var50 = objExec;
            var50.wObjFlag |= 1;
            break;
         case 9:
            var50 = objExec;
            var50.wObjFlag |= 1;
            break;
         case 10:
            var50 = objExec;
            var50.wObjFlag |= 1;
            break;
         case 11:
            this._SetAct(var1, 5, 49);
            if (var6 == 1) {
               var38 = 344;
            } else {
               var38 = 136;
            }

            var2 = var38 << 16;
            var3 = 3145728;
            var4 = 308;
            var50 = objExec;
            var50.wObjFlag |= 1;
            tcbNow._work[7] = 0;
            break;
         default:
            this._SetAct(var1, 5, 26);
            var4 = 307;
            var2 = var5 - 12;
            if (var6 == 0) {
               var2 = 192 - var2 * 16;
            } else {
               var2 = var2 * 16 + 288;
            }

            var5 = var2 << 16;
            var3 = 2293760;
            var50 = objExec;
            var7 = var50.wObjFlag;
            if (var6 == 1) {
               var23 = 16;
            } else {
               var23 = 0;
            }

            var50.wObjFlag = var7 | var23;
            var2 = var5;
         }

         if (var2 != 0 || var3 != 0) {
            this._SetXY(var1, var2, var3);
         }

         this._SetObj(var1, var4);
         this._ActReq(var1);
         tcbNow.md = 800;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 800:
         var5 = tcbNow._work[0];
         if (GaugeLen[var5][0] > 100) {
            var2 = ((GaugeLen[var5][0] - 1) % 100 + 1) * 124 / 100;
         } else {
            var2 = GaugeLen[var5][0] * 124 / 100;
         }

         var3 = GaugeLen[var5][1] * 58 / 100;
         switch(tcbNow._work[1]) {
         case 0:
            if (Life[var5] > 100) {
               var2 = ((OldLife[var5] - 1) % 100 + 1) * 124 / 100;
            } else {
               var2 = OldLife[var5] * 124 / 100;
            }

            var2 = 124 - var2;
            if (Life[var5] == 0) {
               var19 = objExec;
               var19.wObjFlag |= 1;
            }

            objExec.iOffsetSprXSize = -var2;
            if (var5 == 1) {
               objExec.iOffsetSprXPos = var2;
               var2 = 392 - var2;
            } else {
               objExec.iOffsetSprXPos = var2;
               var2 += 88;
            }

            objExec.x = var2 << 16;
            return;
         case 1:
            var3 = (int)((float)Angry[var5] / 1.0F);
            var2 = var3;
            if (var3 >= 99) {
               var2 = 99;
            }

            if (objExec.pat < var2) {
               var50 = objExec;
               ++var50.pat;
            } else if (objExec.pat > var2) {
               var50 = objExec;
               --var50.pat;
            }

            objExec.time = 0;
            this._ActReq(var1);
            return;
         case 2:
            var3 = Angry[var5] / 25 + 42;
            var2 = var3;
            if (var3 >= 45) {
               var2 = 45;
            }

            this._SetAct(var1, 5, var2);
            this._ActReq(var1);
            return;
         case 3:
            if (Life[var5] == OldLife[var5]) {
               var19 = objExec;
               var19.wObjFlag |= 1;
            } else {
               objExec.prio = 438;
               var50 = objExec;
               var50.wObjFlag &= -2;
               if (OldLife[var5] > 100) {
                  var3 = ((OldLife[var5] - 1) % 100 + 1) * 124 / 100;
               } else {
                  var3 = OldLife[var5] * 124 / 100;
               }

               if (var5 == 1) {
                  var4 = var3 + 268 - (var3 - var2) + 2;
               } else {
                  var4 = 212 - var3 - 2;
               }

               this._SetSize(var1, var4 << 16, 1441792, var3 - var2 << 16, 524288);
               tcbNow._work[3] = OldLife[var5];
               tcbNow._work[2] = var2;
            }

            return;
         case 4:
            if (tcbNow._work[3] != PlayerType[var5]) {
               this._SetAct(var1, 0, 0);
               tcbNow._work[3] = PlayerType[var5];
            }

            this._SetAct(var1, PlayerNameType[var5], this.CharAct_Name[iLanguage]);
            this._ActReq(var1);
            return;
         case 5:
            if (tcbNow._work[3] != PlayerType[var5]) {
               this._SetAct(var1, 0, 0);
               tcbNow._work[3] = PlayerType[var5];
            }

            if (Angry[var5] < 100 && !AngryOn[var5]) {
               var23 = 76;
            } else {
               var23 = 77;
            }

            this._SetAct(var1, var5 + 3, var23);
            this._ActReq(var1);
            return;
         case 6:
            if (Angry[var5] != 100 && !AngryOn[var5]) {
               if ((objExec.wObjFlag & 1) == 0) {
                  this._SetAct(var1, 5, 19);
                  this._ActReq(var1);
                  if ((objExec.wActFlag & 2) != 0) {
                     var19 = objExec;
                     var19.wObjFlag |= 1;
                  }

                  return;
               }
            } else {
               this._SetAct(var1, 5, 18);
               this._ActReq(var1);
               var19 = objExec;
               var19.wObjFlag &= -2;
            }

            return;
         case 7:
            if (GaugeLen[var5][2] == tcbNow._work[2]) {
               if ((objExec.wObjFlag & 64) != 0) {
                  objExec.prio = 308;
               }
            } else {
               objExec.prio = 8192;
               var50 = objExec;
               var50.wObjFlag &= -65;
               tcbNow._work[2] = GaugeLen[var5][2];
            }

            this._SetAct(var1, 5, GaugeLen[var5][2] + 80);
            this._ActReq(var1);
            return;
         case 8:
         case 9:
         case 10:
            return;
         case 11:
            if (AngryOn[var5]) {
               var50 = objExec;
               var50.wObjFlag &= -2;
               if (!AngryLoop[var5] && (iEventStatus & 1) == 0 && bAIStart[0] && bAIStart[1] && iTimer != 0 && (SpecialType[0] != 11 && SpecialType[0] != 12 && SpecialType[0] != 9 && SpecialType[0] != 10 && SpecialType[1] != 11 && SpecialType[1] != 12 && SpecialType[1] != 9 && SpecialType[1] != 10 || tcbPlayer[0].md != 925 && tcbPlayer[1].md != 925) && Life[0] > 0 && Life[1] > 0) {
                  var17 = tcbNow._work;
                  var10002 = var17[7]++;
                  if (tcbNow._work[7] > AngrySubTime[var5]) {
                     tcbNow._work[7] = 0;
                     var17 = Angry;
                     var10002 = var17[var5]--;
                     if (Angry[var5] <= 0) {
                        AngryOn[var5] = false;
                     }
                  }
               }

               this._ActReq(var1);
            } else {
               var19 = objExec;
               var19.wObjFlag |= 1;
            }

            return;
         default:
            var2 = tcbNow._work[1] - 12;
            if (Synchro[var5] >= (var2 + 1) * 100) {
               var2 = 9;
            } else if (Synchro[var5] <= var2 * 100) {
               var2 = 0;
            } else {
               var2 = (Synchro[var5] % 100 + 9) / 10 - 1;
            }

            var3 = var2;
            if (var2 < 0) {
               var3 = 0;
            }

            if (objExec.pat < var3) {
               var50 = objExec;
               ++var50.pat;
            } else if (objExec.pat > var3) {
               var50 = objExec;
               --var50.pat;
            }

            objExec.time = 0;
            this._ActReq(var1);
            return;
         }
      case 801:
         tcbNow._work[1] = -1;
         tcbNow._work[2] = 10 - tcbNow._work[0] * 9;
         tcbNow.md = 802;
         tcbNow.lp = 0;
         break;
      case 802:
         if (tcbNow._work[1] != iTimer) {
            if (iTimer == 0) {
               var2 = 0;
            } else {
               var2 = iTimer / tcbNow._work[2] % 10;
            }

            this._SetAct(var1, 5, var2 + 30);
            this._ActReq(var1);
            this._SetXY(var1, tcbNow._work[0] * 16 + 224 << 16, 1048576);
            this._SetObj(var1, 310);
            var19 = objExec;
            var19.wObjFlag &= -2;
            tcbNow._work[1] = iTimer;
         }
         break;
      case 803:
         tcbNow._work[1] = -1;
         tcbNow.md = 804;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 804:
         var5 = tcbNow._work[0];
         if (WinPoint[var5] != tcbNow._work[1]) {
            tcbNow._work[1] = WinPoint[var5];
            this._TKilx(var1, var5 + 14208, var5 + 14208);

            for(var2 = 0; var2 < iStagePoint; ++var2) {
               if (var5 == 0) {
                  var3 = 208 - var2 * 24;
               } else {
                  var3 = var2 * 24 + 256;
               }

               if (WinPoint[var5] > var2) {
                  var39 = 131;
               } else {
                  var39 = 130;
               }

               this.CreatePanelSingle(var1, var5 + 14208, 5, var39, 310, 0, var3, 64);
            }
         }
         break;
      case 805:
         this._SetAct(var1, tcbNow._work[0], tcbNow._work[1]);
         this._SetObj(var1, tcbNow._work[2]);
         if ((tcbNow._work[0] & 'ꀀ') != 0) {
            objExec.pal = tcbNow._work[3];
         } else if ((tcbNow._work[0] & 20480) != 0) {
            objExec.pal = tcbNow._work[1];
            this._SetSize(var1, 0, 0, tcbNow._work[12], tcbNow._work[13]);
         }

         tcbNow._work[1] = 1;
         tcbNow._work[12] = tcbNow._work[8];
         tcbNow._work[13] = tcbNow._work[9];
         tcbNow._work[14] = 0;
         tcbNow._work[21] = 0;
         tcbNow.md = 806;
         tcbNow.lp = 0;
         this._SetXY(var1, tcbNow._work[4], tcbNow._work[5]);
         if ((tcbNow._work[0] & 1044480) == 0) {
            this._ActReq(var1);
         }

         if ((tcbNow._work[0] & 8192) == 0) {
            var19 = objExec;
            var19.wObjFlag |= tcbNow._work[3];
         }
         break;
      case 806:
         var3 = 0;
         var4 = tcbNow.wFlag;
         if (('耀' & var4) == 0 || EventHitStop == 0) {
            if ((var4 & 30) != 0) {
               if ((var4 & 6) != 0) {
                  var17 = tcbNow._work;
                  if ((var4 & 2) != 0) {
                     var2 = 1048576;
                  } else {
                     var2 = -1048576;
                  }

                  var17[8] = var2;
                  tcbNow._work[6] = 65535;
                  tcbNow._work[12] = 1;
               }

               tcbNow._work[10] = 0;
               tcbNow._work[11] = 0;
               tcbNow._work[14] = var4;
               tcbNow._work[1] = 1;
            }

            var51 = tcbNow;
            var51.wFlag &= -31;

            for(var2 = 0; var2 < 2; var3 = var4) {
               var4 = var3;
               if (tcbNow._work[var2 + 12] != 0) {
                  var5 = tcbNow._work[var2 + 4];
                  var4 = var3;
                  if (var5 != tcbNow._work[var2 + 6]) {
                     var50 = objExec;
                     var50.wObjFlag &= -65;
                     tcbNow._work[var2 + 4] += tcbNow._work[var2 + 8];
                     if (tcbNow._work[14] != 0) {
                        var5 = objExec.wObjFlag;

                        for(var4 = 0; var4 < objExec.iLinkNum; var5 = var6) {
                           var6 = var5;
                           if ((objExec.lnk[var4].wObjFlag & 4) == 0) {
                              var6 = var5 & -5;
                           }

                           ++var4;
                        }

                        if ((var5 & 4) != 0) {
                           tcbNow._work[var2 + 12] = 0;
                        }
                     } else if (var5 > tcbNow._work[var2 + 6]) {
                        if (tcbNow._work[var2 + 4] < tcbNow._work[var2 + 6]) {
                           tcbNow._work[var2 + 4] = tcbNow._work[var2 + 6];
                        }
                     } else if (tcbNow._work[var2 + 4] > tcbNow._work[var2 + 6]) {
                        tcbNow._work[var2 + 4] = tcbNow._work[var2 + 6];
                     }

                     if (tcbNow._work[var2 + 10] != 0) {
                        tcbNow._work[var2 + 8] += tcbNow._work[var2 + 10];
                     }

                     var4 = var3 + 1;
                  }
               }

               ++var2;
            }

            if (tcbNow._work[1] != 0) {
               this._SetXY(var1, tcbNow._work[4], tcbNow._work[5]);
            }

            if (var3 == 0) {
               tcbNow._work[1] = 0;
               if (tcbNow._work[14] != 0) {
                  tcbNow.md = 807;
                  tcbNow.lp = 0;
                  return;
               }
            }

            if ((tcbNow._work[0] & 1044480) == 0) {
               if (tcbNow._work[21] == 0) {
                  this._ActReq(var1);
               }

               if (tcbNow._work[20] > 0) {
                  this.ChrSePlay(var1, tcbNow._work[20] - 1);
               }

               var19 = objExec;
               var19.wObjFlag |= tcbNow._work[3];
            }
         }
         break;
      case 807:
         this._TKill(var1);
         break;
      case 808:
         var5 = tcbNow._work[0];
         var34 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[9] + var5 * 2 * this.pGameData.piGameDataXSize[9] + 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[9] + var5 * 2 * this.pGameData.piGameDataXSize[9] + 2] & 255);
         bClrBack = true;
         iClrR = 0;
         iClrG = 0;
         iClrB = 0;
         tcbNow._work[6] = tcbNow._work[1];
         if (var5 == 7) {
            var2 = 0;
         } else if (var34 == -1) {
            if (PlayerType[0] != -1 && var5 != 6 && var5 > 1) {
               var2 = -1;
            } else {
               var2 = 0;
            }
         } else {
            var2 = var34;
            if (var34 == 0) {
               var2 = iBackNo + 1;
            }
         }

         wSystemFlag = 0;
         tcbNow._work[5] = 0;
         if (var5 == 0) {
            tcbNow._work[7] = 0;
         } else {
            tcbNow._work[7] = 10;
         }

         LoadData[3] = PlayerType[0];
         LoadData[4] = PlayerType[1];
         LoadData[27] = -1;
         LoadData[28] = -1;

         for(var3 = 0; var3 < 3; ++var3) {
            var17 = LoadData;
            if (PlayerType[0] != var3 && PlayerType[1] != var3) {
               var4 = -1;
            } else {
               var4 = var3;
            }

            var17[var3 + 6] = var4;
         }

         LoadData[1] = var2;
         if (var2 == 0) {
            LoadData[2] = -1;
         } else {
            LoadData[2] = LoadData[1];
         }

         LoadData[5] = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[9] + var5 * 2 * this.pGameData.piGameDataXSize[9] + 0 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[9] + var5 * 2 * this.pGameData.piGameDataXSize[9] + 0] & 255) + 1;
         if (var2 == 0) {
            ActionPalette[1] = 0;
         }

         this.SetLoad(var1, true);
         tcbNow.md = 809;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 809:
         var5 = tcbNow._work[0];
         var6 = tcbNow._work[6];
         if (var5 == 7) {
            var3 = 158;
            var4 = iStage + 1;
            iSystemFix = 14;
            this.CreatePanelSingle(var1, 20610, 0, 80, 12416, 0, 64, 112);
            if (iPlayMode == 4) {
               this.CreatePanelSingle(var1, 20610, 0, 5, 12548, 0, 120, 0);
            } else {
               var2 = var4;
               if (var4 >= 10) {
                  this.CREATE_STRING(var1, var4 / 10 + 13, 20610, 0, 40, 12416, 0, 158 << 16, 7340032, 0, 0, 0, 0, 0, 0, 16);
                  var2 = var4 % 10;
                  var3 = 158 + 18;
               }

               this.CREATE_STRING(var1, var2 + 13, 20610, 0, 40, 12416, 0, var3 << 16, 7340032, 0, 0, 0, 0, 0, 0, 16);
            }

            this.CreatePanelSingle(var1, 20611, 0, 204, 12288, 0, 0, 0);
            if (iPlayMode == 1) {
               this.CreatePanel(var1, 20608, PlayerType[0] + 6, 6, 12304, 0, -29294592, 4718592, 2162688, 4718592, 2048, 0, 0, 0, 0, 0);
            }

            bTaskRepeat = true;
         }

         if (var5 == 8) {
            this.CreatePanelSingle(var1, 20611, 0, 204, 12288, 0, 0, 0);
            if (iPlayMode == 4) {
               this.CreatePanelSingle(var1, 24706, 0, 5, 12548, 0, 120, 0);
            }

            bTaskRepeat = true;
         }

         if (var5 == 4 || var5 == 5 || var5 == 14 || var5 == 16) {
            this.CreatePanelSingle(var1, 20480, 0, 81, 12351, 0, 16, 120);
         }

         var27 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[9] + var5 * 2 * this.pGameData.piGameDataXSize[9] + 4 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[9] + var5 * 2 * this.pGameData.piGameDataXSize[9] + 4] & 255);
         if (var27 != -1) {
            var2 = var27 - 1;
            boolean var16;
            if (var2 != 0 && var2 != 2 && var2 != 8) {
               var16 = false;
            } else {
               var16 = true;
            }

            iPlayBGMNo = var2;
            bBGMPlayLoop = var16;
            this.PlayBGM(var1, iPlayBGMNo, bBGMPlayLoop);
         }

         for(var2 = 0; var2 <= 1; ++var2) {
            if (PlayerType[var2] != -1) {
               var51 = this._TaskMake(var1, 814, tcbNow.prio + 2);
               var51._work[0] = var2;
               var51._work[1] = var2 + 6;
               var51._work[2] = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[9] + var5 * 2 * this.pGameData.piGameDataXSize[9] + (var2 + 3) * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[9] + var5 * 2 * this.pGameData.piGameDataXSize[9] + (var2 + 3) * 2] & 255);
               var51._work[3] = var6 + 13;
            }
         }

         tcbPlayer[0] = null;
         tcbPlayer[1] = null;
         tcbNow._work[2] = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[9] + var5 * 2 * this.pGameData.piGameDataXSize[9] + 10 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[9] + var5 * 2 * this.pGameData.piGameDataXSize[9] + 10] & 255);
         tcbNow._work[3] = 7;
         tcbNow.md = 810;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 810:
         var3 = tcbNow._work[0];
         iTextEnd = 0;
         wSystemFlag = 0;
         iDemoPushXPos = -1;
         iDemoPushYPos = -1;
         bSceneSkip = false;
         JoyTrig[0] = 0;

         for(var2 = 0; var2 < 4; ++var2) {
            if (var2 < 1 || var2 > 2 || PlayerType[var2 - 1] != -1) {
               var51 = this._TaskMake(var1, 816, tcbNow.prio + 1);
               var51._work[0] = var3;
               var51._work[1] = tcbNow._work[3] + var2 * 2;
               var51._work[2] = var2;
               var51._work[4] = tcbNow._work[2] + var2;
               var51._work[10] = tcbNow.prio;
               var51._work[11] = tcbNow._work[6];
            }
         }

         var17 = tcbNow._work;
         var17[2] += 4;
         var17 = tcbNow._work;
         var17[3] += 6;
         tcbNow._work[4] = 0;
         tcbNow._work[5] = 0;
         tcbNow.md = 811;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 811:
         if (tcbNow._work[0] == 6) {
            bClrBack = true;
            iClrR = 255;
            iClrG = 255;
            iClrB = 255;
         } else {
            bClrBack = true;
            iClrR = 0;
            iClrG = 0;
            iClrB = 0;
         }

         if (iTextEnd == 0) {
            if (tcbNow._work[7] != 0) {
               var17 = tcbNow._work;
               var10002 = var17[7]--;
            }
         } else {
            tcbNow._work[7] = 0;
         }

         var2 = tcbNow._work[0];
         if (var2 != 9) {
            if (iDemoPushXPos != -1 && iTextEnd == 1) {
               if (iDemoPushYPos != -1) {
                  iDemoPushYPos = -1;
                  JoyTrig[0] = 0;
                  break;
               }

               if ((JoyTrig[0] & 16640) == 0 && iTouchStatus == 0) {
                  break;
               }

               if (wSystemFlag == 0) {
                  bTaskRepeat = true;
                  bTaskNext = true;
                  break;
               }

               iReqSENo = 16;
               this.PushSE(var1, 16);
               iTextEnd = 0;
            }

            if (var2 != 1 && var2 != 9 && var2 != 15 && var2 != 17 && wSystemFlag == 0 && tcbNow._work[7] == 0) {
               if ((JoyTrig[0] & 16640) == 0 && iTouchStatus == 0 && tcbNow._work[5] != 1 && !bSceneSkip) {
                  bTaskRepeat = false;
                  tcbNow._work[4] = 0;
               } else {
                  if (var2 == 0) {
                     wSystemFlag = 3;
                  }

                  bTaskRepeat = true;
                  bTaskNext = true;
                  int[] var20 = tcbNow._work;
                  var10002 = var20[4]++;
                  tcbNow._work[5] = 1;
               }
            } else if (iTextEnd != -1 || iDemoPushXPos == -1) {
               iTextEnd = 0;
               if (wSystemFlag == 2) {
                  tcbNow.md = 812;
                  tcbNow.lp = 0;
               } else if (wSystemFlag == 1) {
                  if (tcbNow._work[0] == 9) {
                     bClrBack = true;
                     iClrR = 255;
                     iClrG = 255;
                     iClrB = 255;
                  } else {
                     bClrBack = true;
                     iClrR = 0;
                     iClrG = 0;
                     iClrB = 0;
                  }

                  this._TKilx(var1, tcbNow.prio + 1, tcbNow.prio + 1);
                  tcbNow.md = 810;
                  tcbNow.lp = 0;
                  this.Game(var1, tcbNow.md);
               }
            }
         }
         break;
      case 812:
         tcbNow.md = 813;
         tcbNow.lp = 0;
         break;
      case 813:
         wSystemFlag = 3;
         break;
      case 814:
         this._SetAct(var1, tcbNow._work[1], tcbNow._work[2]);
         this._SetObj(var1, tcbNow._work[3]);
         tcbNow.md = 815;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 815:
         if (tcbNow._work[1] == 1) {
            var2 = iBackXPos;
            var3 = iBackYPos;
         } else {
            var3 = tcbNow._work[0];
            var2 = PlayerXPos[var3];
            var3 = PlayerYPos[var3];
         }

         this._SetXY(var1, var2, var3);
         this._ActReq(var1);
         if (tcbNow._work[1] == 4) {
            var19 = objExec;
            var19.wObjFlag |= 16;
         }
         break;
      case 816:
         var4 = tcbNow._work[0];
         var2 = tcbNow._work[1];
         if (tcbNow._work[2] == 3) {
            var34 = 0;
            var27 = 0;
         } else {
            var34 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[9] + var4 * 2 * this.pGameData.piGameDataXSize[9] + var2 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[9] + var4 * 2 * this.pGameData.piGameDataXSize[9] + var2 * 2] & 255);
            var27 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[9] + var4 * 2 * this.pGameData.piGameDataXSize[9] + (var2 + 1) * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[9] + var4 * 2 * this.pGameData.piGameDataXSize[9] + (var2 + 1) * 2] & 255);
         }

         this._SetAct(var1, 5, tcbNow._work[4]);
         if (tcbNow._work[2] == 3) {
            this._SetObj(var1, tcbNow._work[11] + 11);
         } else {
            this._SetObj(var1, -1);
         }

         tcbNow._work[5] = (var34 << 16) + objExec.x;
         tcbNow._work[6] = (var27 << 16) + objExec.y;
         tcbNow._work[7] = -1;
         tcbNow._work[8] = 0;
         tcbNow._work[9] = 0;
         tcbNow.md = 817;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 817:
         var7 = tcbNow._work[0];
         var6 = objExec.x;
         var3 = objExec.y;
         this._ActReq(var1);
         var2 = tcbNow._work[7];
         tcbNow._work[7] = objExec.pat;
         var5 = objExec.x;
         var4 = objExec.y;
         var17 = tcbNow._work;
         var17[5] += var5 - var6;
         var17 = tcbNow._work;
         var17[6] += var4 - var3;
         switch(tcbNow._work[2]) {
         case 0:
            iBackXPos = tcbNow._work[5];
            iBackYPos = tcbNow._work[6];
            break;
         case 1:
         case 2:
         default:
            var3 = tcbNow._work[2] - 1;
            PlayerXPos[var3] = tcbNow._work[5];
            PlayerYPos[var3] = tcbNow._work[6];
         case 3:
         }

         if (var2 != objExec.pat && (objExec.wActFlag & 2) == 0) {
            for(var4 = 0; var4 < objExec.iHitNum; ++var4) {
               var2 = var4 * 5;
               var3 = objExec.hit[var2 + 0];
               var8 = tcbNow._work[10] + 32 + var3 / 10;
               var10 = var3 % 10;
               var9 = objExec.hit[var2 + 1];
               var37 = objExec.hit[var2 + 2];
               if (var10 == 0) {
                  byte var43 = 0;
                  var3 = 0;
                  var2 = 0;
                  if (tcbNow._work[2] == 3) {
                     if (iBossTextType == 3) {
                        short var45 = 366;
                        var2 = 0;

                        for(var3 = var43; var2 < 366; ++var2) {
                           var3 += ((this.pGameData.piGameData[this.pGameData.piGameDataPos[7] + this.pGameData.piGameDataXSize[7] * 0 + var3] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[7] + this.pGameData.piGameDataXSize[7] * 0 + var3 + 1] & 255) + 2;
                        }

                        var3 = (this.pGameData.piGameData[this.pGameData.piGameDataPos[7] + this.pGameData.piGameDataXSize[7] * 0 + var3] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[7] + this.pGameData.piGameDataXSize[7] * 0 + var3 + 1] & 255;
                        var2 = var45;
                     } else {
                        var2 = iBossTextType * 82 + 5000;
                        var3 = 0 + 1;
                     }
                  } else {
                     byte var46;
                     if (tcbNow._work[2] == 1) {
                        var46 = 0;
                     } else {
                        var46 = 1;
                     }

                     if (PlayerType[var46] != -1) {
                        if (var7 != 14 && var7 != 16) {
                           if (var7 == 10) {
                              var2 = iBossTextType * 82 + 5000;
                           } else if (var7 == 11) {
                              if (var46 == 0) {
                                 var38 = 3000;
                              } else {
                                 var38 = 4000;
                              }

                              var2 = var38 + 0;
                           } else {
                              var2 = PlayerType[var46] * 100 + 6030 + 86 + PlayerType[1 - var46] * 80 * 3 + 160;
                           }
                        } else {
                           if (bWin) {
                              var23 = 9;
                           } else {
                              var23 = 11;
                           }

                           var2 = var23 * 82 + 5000;
                        }

                        var3 = 0 + 1;
                     }
                  }

                  if (var3 != 0) {
                     iTextEnd = -1;
                     var51 = this._TaskMake(var1, 820, var8);
                     var51._work[0] = var2;
                     var51._work[1] = tcbNow._work[11] + 128;
                     var51._work[2] = 16777215;
                     var51._work[3] = 0;
                     var51._work[4] = var9;
                     var51._work[5] = var37;
                     var17 = tcbNow._work;
                     var10002 = var17[8]++;
                  } else {
                     bSceneSkip = true;
                  }
               }

               if (var10 == 2) {
                  iDemoPushXPos = var9;
                  iDemoPushYPos = var37;
               }

               if (var10 == 1 && iDemoPushXPos == -1) {
                  iTextEnd = 0;
                  this._TKilx(var1, var8, var8);
                  tcbNow._work[8] = 0;
               }

               if (var10 == 10) {
                  tcbNow._work[9] = 1;
               }
            }
         }

         if (tcbNow._work[2] == 0) {
            if ((objExec.wActFlag & 1) != 0) {
               tcbNow.md = 818;
               tcbNow.lp = 0;
            } else if ((objExec.wActFlag & 2) != 0) {
               tcbNow.md = 819;
               tcbNow.lp = 0;
            }
         }
         break;
      case 818:
         wSystemFlag = 2;
         if (iTextEnd == 0) {
            this._TKilx(var1, tcbNow._work[10] + 32, tcbNow._work[10] + 39);
         }

         this._TKill(var1);
         break;
      case 819:
         wSystemFlag = 1;
         break;
      case 820:
         this._SetAct(var1, 8192, tcbNow._work[0]);
         this._SetObj(var1, tcbNow._work[1]);
         this._SetXY(var1, tcbNow._work[4] << 16, tcbNow._work[5] << 16);
         objExec.pal = tcbNow._work[2];
         objExec.ox = 1;
         objExec.oy = 0;
         tcbNow.md = 821;
         tcbNow.lp = 0;
         break;
      case 821:
         var2 = tcbNow.wFlag;
         if ((var2 & 30) != 0) {
            if ((var2 & 2) != 0) {
               var50 = objExec;
               var50.x += 2048;
               if (objExec.x >> 16 >= 480) {
                  this._TKill(var1);
                  break;
               }
            }

            if ((var2 & 4) != 0) {
               var50 = objExec;
               var50.x -= 2048;
               if (objExec.x >> 16 <= -480) {
                  this._TKill(var1);
                  break;
               }
            }
         }

         if (objExec.oy == -1) {
            iTextEnd = 1;
            tcbNow.md = 823;
            tcbNow.lp = 0;
         } else if (tcbNow._work[3] == 0) {
            var19 = objExec;
            ++var19.ox;
         } else {
            this._TLoop(var1, tcbNow._work[3], 822);
         }
         break;
      case 822:
         var50 = objExec;
         ++var50.ox;
         tcbNow.md = 821;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 824:
         var5 = tcbNow._work[0];
         var6 = tcbNow._work[1];
         var44 = 0;
         iSelectMenu = -1;
         tcbNow._work[16] = tcbNow._work[2];
         var3 = 0;

         for(var2 = 0; var3 < var5; var2 += (var29 + 1) * 5) {
            var29 = this.PositionData[var2];
            ++var3;
         }

         tcbNow._work[4] = -1;
         tcbNow._work[7] = -1;
         tcbNow._work[14] = -1;
         tcbNow._work[15] = 0;
         short[] var49 = this.PositionData;
         var3 = var2 + 1;
         var29 = var49[var2];
         int[] var18 = tcbNow._work;
         var49 = this.PositionData;
         var2 = var3 + 1;
         var18[2] = var49[var3];
         var18 = tcbNow._work;
         var49 = this.PositionData;
         var3 = var2 + 1;
         var18[3] = var49[var2];
         var17 = tcbNow._work;
         short[] var48 = this.PositionData;
         var2 = var3 + 1;
         var17[13] = var48[var3];
         var18 = tcbNow._work;
         var49 = this.PositionData;
         var5 = var2 + 1;
         var18[10] = var49[var2];
         tcbNow._work[11] = var5;
         var26 = 0;
         var2 = var44;

         for(var4 = var26; var4 < var29; ++var4) {
            var13 = this.PositionData[var5 + 0];
            var36 = this.PositionData[var5 + 4];
            var11 = this.PositionData[var5 + 2];
            var33 = this.PositionData[var5 + 3];
            var12 = this.PositionData[var5 + 1];
            var8 = tcbNow.prio;
            if (var13 == 8192) {
               if (tcbNow._work[16] == 0) {
                  this.CreatePanelSingle(var1, var8 + 1, var13, var12, var6 + 2, 16777215, var11, var33);
               } else {
                  this.CreatePanel(var1, var8 + 1, var13, var12, var6 + 2, 16777215, var11 + 480 << 16, var33 << 16, var11 << 16, var33 << 16, -524288, 0, 0, 0, 0, 0);
               }
            } else if (var13 == 102) {
               if (tcbNow._work[16] == 0) {
                  this.CREATE_STRING(var1, var12, var8 + 1, 0, var13, var6 + 2, var36, var11 << 16, var33 << 16, 0, 0, 0, 0, 0, 0, 12);
               } else {
                  if (var11 == 0) {
                     var24 = 128;
                  } else {
                     var24 = 0;
                  }

                  this.CREATE_STRING(var1, var12, var8 + 1, 0, var13, var6 + 2, var36 | var24, var11 + 480 << 16, var33 << 16, var11 << 16, var33 << 16, -524288, 0, 0, 0, 12);
               }
            } else {
               label1912: {
                  if (tcbNow._work[16] == 0) {
                     this.CreatePanelSingle(var1, var8 + 1, var13, var12, var6 + 2, 0, var11, var33);
                  } else {
                     this.CreatePanel(var1, var8 + 1, var13, var12, var6 + 2, 0, var11 + 480 << 16, var33 << 16, var11 << 16, var33 << 16, -1048576, 0, 0, 0, 0, 0);
                  }

                  var3 = var2;
                  if (var36 >= 1) {
                     tcbNow._work[var2 + 4] = var11;
                     tcbNow._work[var2 + 5] = var33;
                     tcbNow._work[var2 + 6] = var36 - 1;
                     var2 += 3;
                     var3 = var2;
                     if (tcbNow._work[16] != 0) {
                        var37 = var11 + 61;
                        if (var36 - 1 == 0) {
                           byte var52 = ConfigData[2];
                           var3 = this.SoundVolumeActNo[var52];
                        } else {
                           var3 = ConfigData[3] + 187;
                        }

                        this.CreatePanel(var1, var8 + 3, 0, var3, var6 + 2, 0, var37 + 480 << 16, var33 << 16, var37 << 16, var33 << 16, -524288, 0, 0, 0, 0, 0);
                        break label1912;
                     }
                  }

                  var2 = var3;
               }
            }

            var5 += 5;
         }

         if (tcbNow._work[13] == 0) {
            this._TKill(var1);
         } else {
            bClrBack = true;
            iClrR = 0;
            iClrG = 0;
            iClrB = 0;
            if (tcbNow._work[16] == 0) {
               tcbNow.md = 826;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 825;
               tcbNow.lp = 0;
            }

            this.Game(var1, tcbNow.md);
         }
         break;
      case 825:
         bClrBack = true;
         iClrR = 0;
         iClrG = 0;
         iClrB = 0;
         this._TLoop(var1, 60, 826);
         break;
      case 826:
         var3 = tcbNow._work[14];
         var7 = tcbNow._work[13];
         var2 = tcbNow.prio;
         var40 = var2 + 3;
         var37 = tcbNow._work[1] + 8;
         byte var30 = -1;
         var14 = tcbNow._work[10];
         var6 = tcbNow._work[11];
         var41 = tcbNow._work[0];
         iSelectMenu = -1;
         bClrBack = true;
         iClrR = 0;
         iClrG = 0;
         iClrB = 0;
         if (tcbNow._work[15] != 0) {
            var17 = tcbNow._work;
            var10002 = var17[15]--;
            if (tcbNow._work[15] == 0) {
               if (tcbNow._work[16] == 0) {
                  iSelectMenu = var3;
                  this._TKilx(var1, var2 + 1, var2 + 3);
                  this._TKill(var1);
               } else {
                  this._TFlag(var1, var2 + 1, var2 + 1, 772);
                  this._TKilx(var1, var2 + 3, var2 + 3);
                  tcbNow.md = 827;
                  tcbNow.lp = 0;
                  this.Game(var1, tcbNow.md);
               }
            }
         } else {
            var2 = var3;
            if (var3 == -1) {
               var2 = 0;
               if (var41 == 2 || var41 == 11 || var41 == 12 || var41 == 13 || var41 == 16 || var41 == 20 || var41 == 21 || var41 == 48 || var41 == 52 || var41 == 53) {
                  var2 = 1;
               }
            }

            var3 = 0;

            while(true) {
               var4 = var30;
               if (var3 >= 2) {
                  break;
               }

               if (tcbNow._work[var3 * 3 + 4] == -1) {
                  var4 = var30;
                  break;
               }

               if (tcbNow._work[var3 * 3 + 5] == tcbNow._work[3] + tcbNow._work[14] * 24) {
                  var4 = var3;
                  break;
               }

               ++var3;
            }

            var5 = var4;
            var3 = var2;
            if ((JoyTrig[0] & 65536) != 0) {
               var5 = var4;
               var3 = var2;
               if (SetSoftKey[1] == 5) {
                  JoyTrig[0] = 256;
                  var3 = var7 - 1;
                  var5 = -1;
               }
            }

            if ((JoyTrig[0] & 16640) != 0 && (JoyTrig[0] & '耀') == 0) {
               if (var5 != -1 && tcbNow._work[var5 * 3 + 4] != -1) {
                  break;
               }

               tcbNow._work[15] = 20;
               iReqSENo = 16;
               this.PushSE(var1, 16);
               var2 = var3;
            } else if (var14 == 1) {
               var2 = var3;
               if ((JoyTrig[0] & 2735) != 0) {
                  if ((JoyTrig[0] & 33) != 0 && var7 > 2) {
                     if ((var3 & -2) == 0) {
                        var3 += var7 & -2;
                        var2 = var3;
                        if (var3 >= var7) {
                           if ((var7 & 1) == 0) {
                              var2 = var7 - 2 + (var3 & 1);
                           } else {
                              var2 = var7 - 2;
                           }
                        }
                     } else {
                        var2 = var3 - 2;
                     }
                  } else if ((JoyTrig[0] & 2050) != 0 && var7 > 2) {
                     var3 += 2;
                     var2 = var3;
                     if (var3 >= var7) {
                        var2 = var3 & 1;
                     }
                  } else {
                     var2 = var3;
                     if ((JoyTrig[0] & 652) != 0) {
                        var3 = var3 & -2 | var3 + 1 & 1;
                        var2 = var3;
                        if (var3 >= var7) {
                           var2 = var3 - 1;
                        }
                     }
                  }
               }
            } else if ((JoyTrig[0] & 33) != 0) {
               if (var3 == 0) {
                  var2 = var7 - 1;
               } else {
                  var2 = var3 - 1;
               }
            } else if ((JoyTrig[0] & 2050) != 0) {
               if (var3 == var7 - 1) {
                  var2 = 0;
               } else {
                  var2 = var3 + 1;
               }
            } else {
               var2 = var3;
               if ((JoyTrig[0] & 652) != 0) {
                  var2 = var3;
                  if (var5 != -1) {
                     if (tcbNow._work[var5 * 3 + 6] == 0) {
                        if ((JoyTrig[0] & 132) != 0) {
                           ConfigData[2] = (byte)((ConfigData[2] + 5) % 6);
                        } else {
                           ConfigData[2] = (byte)((ConfigData[2] + 1) % 6);
                        }

                        var47 = ConfigData;
                        if (ConfigData[2] == 0) {
                           var23 = 1;
                        } else {
                           var23 = 0;
                        }

                        var47[4] = (byte)var23;
                        iReqSENo = 0;
                        this.PushSE(var1, 0);
                     } else {
                        ConfigData[3] = (byte)(ConfigData[3] + 1 & 1);
                        if (ConfigData[3] == 0) {
                           iVibration = 10;
                        }
                     }

                     tcbNow._work[14] = -1;
                     this.SaveConfig(var1);
                     var2 = var3;
                  }
               }
            }

            if (var2 != tcbNow._work[14] || tcbNow._work[15] != 0 || (JoyTrig[0] & '耀') != 0) {
               this._TKilx(var1, var40, var40);
               if (var2 != -1) {
                  if (var2 != tcbNow._work[14] && tcbNow._work[14] != -1) {
                     iReqSENo = 0;
                     this.PushSE(var1, 0);
                  }

                  var3 = var2 * 5 + var6 + 1;
                  var36 = this.PositionData[var3 + 1];
                  var33 = this.PositionData[var3 + 2];
                  var15 = this.PositionData[var3];
                  if (var14 == 1) {
                     if (tcbNow._work[14] != -1) {
                        var3 = tcbNow._work[14] * 5 + var6 + 1;
                        var22 = this.PositionData[var3 + 1];
                        var29 = this.PositionData[var3 + 2];
                        if (tcbNow._work[15] != 0) {
                           var24 = 137;
                        } else {
                           var24 = 150;
                        }

                        if (var22 < var36) {
                           var4 = 524288;
                        } else {
                           var4 = -524288;
                        }

                        if (var29 < var33) {
                           var5 = 524288;
                        } else {
                           var5 = -524288;
                        }

                        this.CreatePanel(var1, var40, 0, var24, var37, 0, var22 - 60 << 16, var29 << 16, var36 - 60 << 16, var33 << 16, var4, var5, 0, 0, 0, 0);
                     } else {
                        if (tcbNow._work[15] != 0) {
                           var24 = 137;
                        } else {
                           var24 = 150;
                        }

                        this.CreatePanelSingle(var1, var40, 0, var24, var37, 0, var36 - 60, var33);
                     }
                  } else {
                     var8 = tcbNow._work[2];
                     var7 = this.PositionData[tcbNow._work[14] * 5 + var6 + 1 + 2];
                     byte var31;
                     if (var41 != 12 && var41 != 13 && var41 != 14 && var41 != 16 && var41 != 19 && var41 != 20 && var41 != 22 && var41 != 24 && var41 != 29 && var41 != 50 && var41 != 51 && var41 != 52 && var41 != 53 && var41 != 6 && var41 != 4) {
                        var6 = var36;
                        var31 = 29;
                        var39 = 30;
                        var5 = var33;
                        var24 = var31;
                     } else {
                        var6 = var7;
                        var5 = var33;
                        if (var41 != 16) {
                           var6 = var7;
                           var5 = var33;
                           if (var41 != 51) {
                              var6 = var7;
                              var5 = var33;
                              if (var41 != 52) {
                                 var6 = var7;
                                 var5 = var33;
                                 if (var41 != 53) {
                                    var5 = tcbNow._work[3] + var2 * 24;
                                    var6 = tcbNow._work[3] + tcbNow._work[14] * 24;
                                 }
                              }
                           }
                        }

                        var24 = 150;
                        var39 = 137;
                        var7 = var6;
                        var6 = var8;
                     }

                     if (tcbNow._work[14] != -1) {
                        if (var24 == 150) {
                           var31 = 0;
                        } else {
                           var31 = 1;
                        }

                        if (tcbNow._work[15] != 0) {
                           var24 = var39;
                        }

                        if (var7 < var5) {
                           var4 = 524288;
                        } else {
                           var4 = -524288;
                        }

                        this.CreatePanel(var1, var40, var31, var24, var37, 0, var6 << 16, var7 << 16, var6 << 16, var5 << 16, 0, var4, 0, 0, 0, 0);
                     } else {
                        byte var35;
                        if (var24 == 150) {
                           var35 = 0;
                        } else {
                           var35 = 1;
                        }

                        if (tcbNow._work[15] == 0) {
                           var39 = var24;
                        }

                        this.CreatePanelSingle(var1, var40, var35, var39, var37, 0, var6, var5);
                     }
                  }

                  if (var41 != 12 && var41 != 13 && var41 != 14 && var41 != 16 && var41 != 19 && var41 != 20 && var41 != 22 && var41 != 24 && var41 != 29 && var41 != 50 && var41 != 51 && var41 != 52 && var41 != 53 && var41 != 6 && var41 != 4 || var14 == 1) {
                     this.CreatePanelSingle(var1, var40, 1, var15 + 1, var37 - 1, 0, var36, var33);
                  }

                  if (var41 == 46) {
                     this.CreatePanelSingle(var1, var40, 8192, var2 + 108, var37, 16777215, 12, 163);
                  }
               }

               for(var3 = 0; var3 < 2; ++var3) {
                  int var10000 = tcbNow._work[var3 * 3 + 6];
                  var5 = tcbNow._work[var3 * 3 + 4];
                  if (var5 != -1) {
                     if (var3 == 0) {
                        var4 = this.SoundVolumeActNo[ConfigData[2]];
                     } else {
                        var4 = ConfigData[3] + 187;
                     }

                     this.CreatePanelSingle(var1, var40, 0, var4, var37, 0, var5 + 61, tcbNow._work[var3 * 3 + 5]);
                  }
               }

               if (var2 != -1) {
                  tcbNow._work[14] = var2;
               }
            }
         }
         break;
      case 827:
         bClrBack = true;
         iClrR = 0;
         iClrG = 0;
         iClrB = 0;
         this._TLoop(var1, 60, 828);
         break;
      case 828:
         var2 = tcbNow.prio;
         iSelectMenu = tcbNow._work[14];
         this._TKilx(var1, var2 + 1, var2 + 4);
         this._TKill(var1);
         bTaskRepeat = true;
         break;
      case 829:
         var7 = tcbNow._work[2];
         var2 = 1;
         var8 = tcbNow._work[0];
         var41 = tcbNow._work[1];
         var5 = tcbNow._work[9];
         var9 = tcbNow._work[3];
         var10 = tcbNow._work[5];
         var40 = tcbNow._work[4];
         var37 = tcbNow._work[6];
         var4 = 0;
         if (true) {
            for(var3 = 0; var3 < tcbNow._work[3] - 1; ++var3) {
               var2 *= 10;
            }

            var3 = 0;
            var6 = var2;

            for(var2 = var8; var3 < var9; var6 = var8) {
               var14 = var7 / var6;
               var7 -= var6 * var14;
               var8 = var6 / 10;
               if (var14 != 0) {
                  var5 = 1;
               }

               label1843: {
                  if (var5 == 0) {
                     var6 = var4;
                     if (var3 != var9 - 1) {
                        break label1843;
                     }
                  }

                  if (var4 == 0) {
                     this._SetAct(var1, tcbNow._work[8], var10 + var14);
                     this._ActReq(var1);
                     this._SetObj(var1, var37);
                     this._SetXY(var1, var2, var41);
                  } else {
                     this._LinkAdd(var1, var10 + var14, var2, var41);
                     objExec.lnk[var4 - 1].prio = var37;
                  }

                  tcbNow._work[7] = 0;
                  var6 = var4 + 1;
               }

               var4 = var2;
               if (tcbNow._work[7] == 0) {
                  var4 = var2 + var40;
               }

               ++var3;
               var2 = var4;
               var4 = var6;
            }

            tcbNow.md = 830;
            tcbNow.lp = 0;
         }
         break;
      case 830:
         this._ActReq(var1);
         break;
      case 831:
         if (tcbNow._work[0] == 1) {
            iFade += 24;
            if (iFade > 254) {
               iFade = 254;
            }
         } else {
            iFade -= 24;
            if (iFade < 1) {
               iFade = 1;
            }
         }

         this._TLoop(var1, 14, 832);
         break;
      case 832:
         var2 = tcbNow.prio;
         bTaskRepeat = true;
         bClrBack = false;
         iFade = 0;
         this._TKilx(var1, var2, var2);
         break;
      case 833:
         tcbNow._work[2] = 1;

         for(var2 = 0; var2 < tcbNow._work[3]; ++var2) {
            var17 = tcbNow._work;
            var17[2] *= 10;
         }

         tcbNow._work[1] = -1;
         this._SetAct(var1, 5, 90);
         tcbNow.md = 834;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 834:
         var2 = tcbNow._work[0];
         if (Score[var2] != tcbNow._work[1]) {
            tcbNow._work[1] = Score[var2];
            if (tcbNow._work[3] == 0) {
               var2 = Score[var2] % 10;
            } else {
               var2 = Score[var2] / tcbNow._work[2] % 10;
            }

            this._SetAct(var1, 5, var2 + 90);
            this._ActReq(var1);
            this._SetObj(var1, 310);
            this._SetXY(var1, 292 - tcbNow._work[3] * 10 << 16, 19922944);
            var19 = objExec;
            var19.wObjFlag &= -2;
         }
         break;
      case 835:
         var3 = tcbNow._work[0];
         var2 = 1 - var3;
         this._SetXY(var1, tcbNow._work[4] << 16, 2621440);
         if (ComboCount[var3] == 1) {
            tcbNow.md = 836;
            tcbNow.lp = 0;
         } else {
            this._ActReq(var1);
            if ((DamageIndex[var2] != 0 || DamageType[var2] == 0) && tcbPlayer[var2].md != 925) {
               this._TLoop(var1, 60, 836);
            }
         }
         break;
      case 836:
         var2 = tcbNow._work[0] * 2;
         this._TKilx(var1, var2 + 13808, var2 + 13808 + 1);
         break;
      case 837:
         var3 = tcbNow._work[0];
         var17 = tcbNow._work;
         if (var3 == 1) {
            var38 = 288;
         } else {
            var38 = 8;
         }

         var17[3] = var38;
         var17 = tcbNow._work;
         if (var3 == 1) {
            var38 = 288;
         } else {
            var38 = 8;
         }

         var17[4] = var38;
         if (tcbNow._work[1] == 1) {
            if (ComboCount[var3] < 10) {
               this._TKill(var1);
               break;
            }

            var17 = tcbNow._work;
            var17[3] -= 48;
         } else {
            this.CreatePanelSingle(var1, var3 * 2 + 13808 + 1, 0, 82, 12289, 0, tcbNow._work[3] + 32, 40);
         }

         tcbNow._work[4] = tcbNow._work[3];
         tcbNow.md = 838;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 838:
         var2 = tcbNow._work[0];
         if (tcbNow._work[1] == 1) {
            this._SetAct(var1, 0, ComboCount[var2] / 10 + 50);
         } else {
            this._SetAct(var1, 0, ComboCount[var2] % 10 + 40);
         }

         this._ActReq(var1);
         tcbNow._work[5] = ComboCount[var2];
         this._SetObj(var1, 12288);
         tcbNow.md = 835;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 839:
         var10 = tcbNow._work[0];
         var37 = tcbNow._work[1];
         var9 = this.pGameData.piGameDataYSize[var10 + 100];
         var8 = tcbNow.prio;
         iSelectMenu = -1;
         tcbNow._work[16] = tcbNow._work[2];
         tcbNow._work[14] = -1;
         tcbNow._work[15] = 0;
         tcbNow._work[13] = 0;

         for(var3 = 0; var3 < 2; ++var3) {
            for(var4 = 0; var4 < var9; ++var4) {
               var27 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var4 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 0 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var4 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 0] & 255);
               short var42 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var4 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 16 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var4 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 16] & 255);
               var21 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var4 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 4 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var4 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 4] & 255);
               var13 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var4 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 6 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var4 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 6] & 255);
               var15 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var4 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 18 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var4 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 18] & 255);
               var22 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var4 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var4 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 2] & 255);
               var40 = var37 + (var9 - var4) * 8;
               if (var3 == 0) {
                  if (var27 == 100) {
                     tcbNow._work[2] = var22;
                     tcbNow._work[13] = var21;
                  }
               } else if (var27 != 100) {
                  if (var27 == 4096) {
                     short var28 = 1;
                     var7 = 1;
                     var27 = var21;
                     if (var21 < 0) {
                        var7 = -var21;
                        var27 = 0;
                        var28 = 240;
                     }

                     this.CreatePanel(var1, var8 + 1, 4096, this.FillRectColor[var15], var40, 0, var27 << 16, var13 << 16, 0, 0, 0, 0, 0, 0, var28 << 16, var7 << 16);
                     var21 = var27;
                  } else if (var27 == 8192) {
                     if ((tcbNow._work[13] == 0 || var4 < tcbNow._work[2] || var4 >= tcbNow._work[2] + tcbNow._work[13]) && tcbNow._work[16] == 0) {
                        this.CreatePanelSingle(var1, var8 + 1, var27, var22, var40, this.FillRectColor[var15], var21, var13);
                     } else {
                        this.CreatePanel(var1, var8 + 4 + var4, var27, var22, var40, this.FillRectColor[var15], var21 + 480 << 16, var13 << 16, var21 << 16, var13 << 16, -1048576, 0, 0, 0, 0, 0);
                     }
                  } else {
                     if (LoadData[var27] == -1 || var27 == 1 && LoadData[1] != 0) {
                        continue;
                     }

                     if ((tcbNow._work[13] == 0 || var4 < tcbNow._work[2] || var4 >= tcbNow._work[2] + tcbNow._work[13]) && tcbNow._work[16] == 0) {
                        this.CreatePanelSingle(var1, var8 + 1, var27, var22, var40, 0, var21, var13);
                     } else if ((var10 < 73 || var10 > 79) && (var10 < 87 || var10 > 90)) {
                        this.CreatePanel(var1, var8 + 4 + var4, var27, var22, var40, 0, var21 + 480 << 16, var13 << 16, var21 << 16, var13 << 16, -1048576, 0, 0, 0, 0, 0);
                     } else {
                        this.CreatePanel(var1, var8 + 4 + var4, var27, var22, var40, 0, var21 - 160 << 16, var13 << 16, var21 << 16, var13 << 16, 1048576, 0, 0, 0, 0, 0);
                     }
                  }

                  if (var42 >= 1) {
                     var2 = var42 - 1;
                     byte var32;
                     if (var2 == 0) {
                        var32 = ConfigData[2];
                        var2 = ConfigData[2] + 23;
                     } else if (var2 == 1) {
                        var32 = ConfigData[3];
                        var2 = 85 - ConfigData[3];
                     } else {
                        var32 = ConfigData[5];
                        var2 = ConfigData[5] + 29;
                     }

                     this.CreatePanel(var1, var8 + 4 + tcbNow._work[13] + var4, 8192, var2, var40, 16777215, var21 + 480 + 80 << 16, var13 << 16, var21 + 80 << 16, var13 << 16, -1048576, 0, 0, 0, 0, 0);
                  }
               }
            }
         }

         if (tcbNow._work[13] == 0) {
            this._TKill(var1);
         } else {
            if (var9 == 0) {
               tcbNow.md = 841;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 840;
               tcbNow.lp = 0;
            }

            bTaskRepeat = true;
         }
         break;
      case 840:
         this._TLoop(var1, 30, 841);
         break;
      case 841:
         var3 = tcbNow._work[14];
         var8 = tcbNow._work[13];
         var7 = tcbNow.prio;
         var9 = var7 + 3;
         var10 = tcbNow._work[0];
         iSelectMenu = -1;
         if (iFade != 255 && iFade != 0 && var7 > 8192) {
            JoyTrig[0] = 0;
         }

         if (tcbNow._work[15] != 0) {
            var17 = tcbNow._work;
            var10002 = var17[15]--;
            if (tcbNow._work[15] == 0) {
               if (var10 == 120) {
                  this._TFlag(var1, var7 + 1, var7 + 255, 770);
               } else {
                  this._TFlag(var1, var7 + 4, var7 + 4 + var8 * 2, 770);
                  this._TFlag(var1, var7 + 4 + tcbNow._work[2] + var3, var7 + 4 + tcbNow._work[2] + var3, 0);
               }

               tcbNow.md = 842;
               tcbNow.lp = 0;
            }
         } else {
            var2 = var3;
            if (var3 == -1) {
               var2 = tcbNow._work[12];
            }

            var5 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var2) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 16 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var2) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 16] & 255) - 1;
            var4 = var5;
            var3 = var2;
            if (var10 != 100) {
               var4 = var5;
               var3 = var2;
               if ((JoyTrig[0] & 65536) != 0) {
                  var4 = var5;
                  var3 = var2;
                  if (SetSoftKey[1] == 5) {
                     JoyTrig[0] = 256;
                     var3 = var8 - 1;
                     var4 = -1;
                  }
               }
            }

            for(var5 = 0; var5 < 5; var3 = var6) {
               var6 = var3;
               if (TouchesStatus[var5] != 0) {
                  var2 = 0;

                  while(true) {
                     var6 = var3;
                     if (var2 >= var8) {
                        break;
                     }

                     var12 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var2 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 8 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var2 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 8] & 255);
                     var22 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var2 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 10 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var2 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 10] & 255);
                     var13 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var2 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 12 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var2 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 12] & 255);
                     var11 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var2 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 14 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + var2 * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 14] & 255);
                     if (TouchesXPos[var5] > var12 && TouchesXPos[var5] < var12 + var13 && TouchesYPos[var5] > var22 && TouchesYPos[var5] < var22 + var11) {
                        tcbNow._work[15] = 20;
                        iReqSENo = 16;
                        this.PushSE(var1, 16);
                        iSelectMenu = var2;
                        var6 = var2;
                        break;
                     }

                     ++var2;
                  }
               }

               ++var5;
            }

            if ((JoyTrig[0] & 16640) != 0) {
               var2 = var3;
               if (var4 == -1) {
                  tcbNow._work[15] = 20;
                  iReqSENo = 16;
                  this.PushSE(var1, 16);
                  var2 = var3;
               }
            } else if ((JoyTrig[0] & 33) != 0) {
               if (var3 == 0) {
                  var2 = var8 - 1;
               } else {
                  var2 = var3 - 1;
               }
            } else if ((JoyTrig[0] & 2050) != 0) {
               if (var3 == var8 - 1) {
                  var2 = 0;
               } else {
                  var2 = var3 + 1;
               }
            } else {
               var2 = var3;
               if ((JoyTrig[0] & 652) != 0) {
                  var2 = var3;
                  if (var4 != -1) {
                     if (var4 == 0) {
                        if ((JoyTrig[0] & 132) != 0) {
                           ConfigData[2] = (byte)((ConfigData[2] + 5) % 6);
                        } else {
                           ConfigData[2] = (byte)((ConfigData[2] + 1) % 6);
                        }

                        var47 = ConfigData;
                        if (ConfigData[2] == 0) {
                           var23 = 1;
                        } else {
                           var23 = 0;
                        }

                        var47[4] = (byte)var23;
                        iReqSENo = 0;
                        this.PushSE(var1, 0);
                     } else if (var4 == 1) {
                        ConfigData[3] = (byte)(ConfigData[3] + 1 & 1);
                        if (ConfigData[3] == 0) {
                           iVibration = 10;
                        }
                     } else {
                        if ((JoyTrig[0] & 132) != 0) {
                           ConfigData[5] = (byte)((ConfigData[5] + iNumDifficulty - 1) % iNumDifficulty);
                        } else {
                           ConfigData[5] = (byte)((ConfigData[5] + 1) % iNumDifficulty);
                        }

                        iReqSENo = 0;
                        this.PushSE(var1, 0);
                     }

                     tcbNow._work[14] = -1;
                     this.SaveConfig(var1);
                     var2 = var3;
                  }
               }
            }

            var3 = this.pGameData.piGameDataYSize[var2 + 100];
            var6 = tcbNow._work[1] + var3 * 8 + 8;
            if (var2 != tcbNow._work[14] || tcbNow._work[15] != 0 || (JoyTrig[0] & '耀') != 0 && var10 == 4) {
               this._TKilx(var1, var9, var9);
               if (var2 != -1) {
                  var37 = var6 + 128;
                  if (var2 != tcbNow._work[14] && tcbNow._work[14] != -1) {
                     iReqSENo = 0;
                     this.PushSE(var1, 0);
                  }

                  var12 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var2) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 4 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var2) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 4] & 255);
                  var21 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var2) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 6 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var2) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 6] & 255);
                  if (tcbNow._work[15] != 0) {
                     var24 = 137;
                  } else {
                     var24 = 150;
                  }

                  if (var10 == 100) {
                     var4 = var21 - 2;
                  } else {
                     var4 = var21;
                  }

                  this.CreatePanelSingle(var1, var9, 0, var24, var37, 0, var12 + 0, var4);
                  short var25 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var2) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var2) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 2] & 255);
                  var13 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var2) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 0 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var2) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 0] & 255);
                  if (var13 == 8192) {
                     if (tcbNow._work[15] != 0) {
                        var3 = 16711680;
                     } else {
                        var3 = 16776960;
                     }

                     this.CreatePanelSingle(var1, var9, var13, var25, var37, var3, var12, var21);
                  } else if (LoadData[var13] != -1 && (var13 != 1 || LoadData[1] == 0)) {
                     var14 = var7 + 4 + tcbNow._work[2] + var2;
                     this._TKilx(var1, var14, var14);
                     if (tcbNow._work[15] != 0) {
                        var26 = 2;
                     } else {
                        var26 = 1;
                     }

                     this.CreatePanelSingle(var1, var14, var13, var25 + var26, var37 - 4, 0, var12, var21);
                  }
               }

               for(var4 = 0; var4 < var8; ++var4) {
                  var5 = var7 + 4 + tcbNow._work[2] + var4;
                  var11 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var4) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 4 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var4) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 4] & 255);
                  var34 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var4) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 6 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var4) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 6] & 255);
                  var12 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var4) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 0 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var4) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 0] & 255);
                  if (var12 != 8192 && var2 != var4) {
                     this._TKilx(var1, var5, var5);
                     this.CreatePanelSingle(var1, var9, var12, (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var4) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var4) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 2] & 255), var6 + 64, 0, var11, var34);
                  }

                  var34 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var4) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 16 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var4) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 16] & 255);
                  if (var34 != 0) {
                     var40 = var9 + 1 + var8 + var4;
                     this._TKilx(var1, var40, var40);
                     var3 = var34 - 1;
                     if (var3 == 0) {
                        var3 = ConfigData[2] + 23;
                     } else if (var3 == 1) {
                        var3 = 85 - ConfigData[3];
                     } else {
                        var3 = ConfigData[5] + 29;
                     }

                     if (var2 == var4) {
                        var5 = 16776960;
                     } else {
                        var5 = 16777215;
                     }

                     this.CreatePanelSingle(var1, var40, 8192, var3, var6, var5, var11 + 80, (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var4) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 6 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 100] + (tcbNow._work[2] + var4) * 2 * this.pGameData.piGameDataXSize[var10 + 100] + 6] & 255));
                  }
               }

               tcbNow._work[14] = var2;
            }
         }
         break;
      case 842:
         this._TLoop(var1, 30, 843);
         break;
      case 843:
         iSelectMenu = tcbNow._work[14];
         this._TKill(var1);
         bTaskRepeat = true;
      }

   }

   public void Game5(GlobalWork var1, int var2) {
      int var4;
      int var5;
      int var6;
      short var7;
      short var8;
      boolean var9;
      ObjReq var12;
      int[] var13;
      int var15;
      byte var16;
      short var17;
      short var18;
      int var10002;
      short var19;
      int[] var20;
      TCB var23;
      switch(var2) {
      case 0:
      case 862:
      default:
         break;
      case 863:
         var2 = tcbNow._work[0];
         Footwork[var2] = 0;
         this._SetAct(var1, var2 + 3, 0);
         this._SetObj(var1, (1 - var2) * 4 + 130);
         if (var2 == 0) {
            var12 = objExec;
            var12.wObjFlag &= -17;
         } else {
            var12 = objExec;
            var12.wObjFlag |= 16;
         }

         PlayerYPos[var2] = 15728640;
         ExtremeObject[var2] = 0;
         this.PlayerTail(var1);
         if (WinPoint[0] == 0 && WinPoint[1] == 0 && iPlayMode != 2) {
            tcbNow.md = 916;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 917;
            tcbNow.lp = 0;
         }

         this.Game(var1, tcbNow.md);
         break;
      case 864:
         var4 = tcbNow._work[0];
         this.AttackEnd(var1);
         if (!PlayerAir[var4]) {
            if (PlayerYPos[var4] < 15728640) {
               this._SetAct(var1, objExec.acttype, 89);
               tcbNow.md = 886;
               tcbNow.lp = 0;
               this.PlayerTail(var1);
               break;
            }

            PlayerYPos[var4] = 15728640;
         }

         var15 = objExec.acttype;
         if (PlayerAir[var4]) {
            var16 = 1;
         } else {
            var16 = 0;
         }

         this._SetAct(var1, var15, var16);
         this.PlayerTail(var1);
         if (bGameStart) {
            Footwork[var4] = 0;
            tcbNow.md = 872;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 865:
         var4 = tcbNow._work[0];
         var5 = 1 - var4;
         this.PlayerTail(var1);
         if ((objExec.wActFlag & 2) != 0) {
            var2 = tcbNow._work[10];
            byte var21;
            byte var24;
            if ((var2 & 132) != 0) {
               var24 = -36;
               var21 = 0;
               var12 = objExec;
               var12.wObjFlag &= -17;
            } else if ((var2 & 520) != 0) {
               var24 = 36;
               var21 = 0;
               var12 = objExec;
               var12.wObjFlag |= 16;
            } else {
               var24 = -36;
               var21 = -32;
               var12 = objExec;
               var12.wObjFlag &= -17;
            }

            PlayerXPos[var4] = PlayerXPos[var5] + (var24 << 16);
            PlayerYPos[var4] = PlayerYPos[var5] + (var21 << 16);
            PlayerOldXPos[var4] = PlayerXPos[var4];
            this._SetAct(var1, objExec.acttype, 88);
            tcbNow.md = 866;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 866:
         var2 = tcbNow._work[0];
         this.PlayerTail(var1);
         if ((objExec.wActFlag & 2) != 0) {
            this.CmdClear(var1, var2);
            PlayerAir[var2] = AirType[var2];
            tcbNow.md = 864;
            tcbNow.lp = 0;
         }
         break;
      case 867:
         var2 = tcbNow._work[0];
         this._SetAct(var1, objExec.acttype, 87);
         SpecialType[var2] = 0;
         tcbNow.md = 868;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 868:
         var2 = tcbNow._work[0];
         this.PlayerTail(var1);
         if ((objExec.wActFlag & 2) != 0) {
            PlayerXPos[var2] = PlayerWarpXPos[var2];
            PlayerYPos[var2] = PlayerWarpYPos[var2];
            PlayerOldXPos[var2] = PlayerXPos[var2];
            this._SetAct(var1, objExec.acttype, 88);
            tcbNow.md = 866;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 869:
         var2 = tcbNow._work[0];
         this._SetAct(var1, objExec.acttype, 87);
         SpecialType[var2] = 0;
         tcbNow.md = 870;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 870:
         var2 = tcbNow._work[0];
         this.PlayerTail(var1);
         this._SetObjFlag(var1, tcbNow.obj, 1, true);
         if ((objExec.wActFlag & 2) != 0) {
            this._SetObjFlag(var1, tcbNow.obj, 1, false);
            PlayerXPos[var2] = PlayerWarpXPos[var2];
            PlayerYPos[var2] = PlayerWarpYPos[var2];
            PlayerOldXPos[var2] = PlayerXPos[var2];
            this._SetAct(var1, objExec.acttype, 88);
            tcbNow.md = 871;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 871:
         var2 = tcbNow._work[0];
         this.PlayerTail(var1);
         if ((objExec.wActFlag & 2) != 0) {
            this.CmdClear(var1, var2);
            PlayerAir[var2] = false;
            tcbNow.md = 864;
            tcbNow.lp = 0;
         }
         break;
      case 872:
         var4 = tcbNow._work[0];
         var6 = 1 - var4;
         var5 = PlayerKey[var4];
         var2 = objExec.ano;
         if ((var5 & 16640) == 0) {
            TameCnt[var4] = 0;
         }

         if (!PlayerAir[var4]) {
            var9 = true;
         } else {
            var9 = false;
         }

         if (!this.CommonNormal(var1, var9, true, true, true, true)) {
            if ((var5 & 16640) != 0 && TameCnt[var4] > 20 && Synchro[var4] < SynchroMax[var4]) {
               TameCnt[var4] = 0;
               this.PlayerTail(var1);
               tcbNow.md = 901;
               tcbNow.lp = 0;
            } else {
               var15 = this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[3] + this.ChrGameData[var4 + 3].piGameDataXSize[3] * 0 + 0] << 16;
               if ((var5 & 33) != 0 && PlayerAir[var4]) {
                  var20 = PlayerYPos;
                  var20[var4] -= var15;
               } else if ((var5 & 2050) != 0 && PlayerAir[var4]) {
                  var20 = PlayerYPos;
                  var20[var4] += var15;
               }

               if (Footwork[var4] > 1) {
                  if (PlayerAir[var4]) {
                     var2 = 1;
                  } else {
                     var2 = 0;
                  }
               }

               label919: {
                  if ((var5 & 2050) != 0) {
                     var15 = var2;
                     if (!PlayerAir[var4]) {
                        break label919;
                     }
                  }

                  var15 = var2;
                  if (KeyBufTime[var4][0] > 0) {
                     if ((var5 & 132) != 0) {
                        if (PlayerXPos[var6] > PlayerXPos[var4]) {
                           var15 = 19;
                           var16 = 1;
                        } else {
                           var15 = 5;
                           var16 = 0;
                        }

                        var20 = PlayerXPos;
                        var20[var4] -= this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[3] + this.ChrGameData[var4 + 3].piGameDataXSize[3] * 0 + var16] << 16;
                     } else {
                        var15 = var2;
                        if ((var5 & 520) != 0) {
                           if (PlayerXPos[var6] < PlayerXPos[var4]) {
                              var15 = 19;
                              var16 = 1;
                           } else {
                              var15 = 5;
                              var16 = 0;
                           }

                           var20 = PlayerXPos;
                           var20[var4] += this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[3] + this.ChrGameData[var4 + 3].piGameDataXSize[3] * 0 + var16] << 16;
                        }
                     }
                  }
               }

               if (objExec.ano != var15) {
                  this._SetAct(var1, objExec.acttype, var15);
               }

               if (PlayerAir[var4] && PlayerYPos[var4] >= 15728640) {
                  PlayerYPos[var4] = 15728640;
                  PlayerAir[var4] = false;
               }

               this.PlayerTail(var1);
            }
         }
         break;
      case 875:
         var2 = tcbNow._work[0];
         if ((objExec.wActFlag & 2) != 0 || PlayerYPos[var2] > 15728640) {
            PlayerYPos[var2] = 15728640;
            if (PlayerXPos[var2] < PlayerXPos[1 - var2]) {
               var12 = objExec;
               var12.wObjFlag &= -17;
            } else {
               var12 = objExec;
               var12.wObjFlag |= 16;
            }

            tcbNow.md = 864;
            tcbNow.lp = 0;
         }

         this.PlayerTail(var1);
         break;
      case 876:
         var4 = tcbNow._work[0];
         var5 = 1 - var4;
         this._SetObj(var1, 130 - var4 * 4);
         var12 = objExec;
         var12.wObjFlag &= -2;
         if (Life[var4] <= 0 && DamageType[var4] == 2) {
            DamageType[var4] = 29;
            DamageIndex[var4] = 0;
         }

         if (DamageTime[var4] == 0) {
            var17 = (short)((byte)this.pGameData.piGameData[this.pGameData.piGameDataPos[DamageType[var4] + 10] + DamageIndex[var4] * this.pGameData.piGameDataXSize[DamageType[var4] + 10] + 2]);
            var19 = (short)((byte)this.pGameData.piGameData[this.pGameData.piGameDataPos[DamageType[var4] + 10] + DamageIndex[var4] * this.pGameData.piGameDataXSize[DamageType[var4] + 10] + 13]);
            if (var19 > 0) {
               this.Voice(var1, 1, var4, var19);
            }

            var2 = var17;
            if (var17 < 0) {
               var12 = objExec;
               var12.wObjFlag ^= 16;
               var2 = -var17;
            }

            this._SetAct(var1, objExec.acttype, var2);
            this._ActReq(var1);
            if (ThrowDamage[var4]) {
               var17 = (short)((byte)this.pGameData.piGameData[this.pGameData.piGameDataPos[DamageType[var4] + 10] + DamageIndex[var4] * this.pGameData.piGameDataXSize[DamageType[var4] + 10] + 7]);
               var2 = var17;
               if ((tcbPlayer[var5].obj.wObjFlag & 16) != 0) {
                  var2 = -var17;
               }

               PlayerXPos[var4] = PlayerXPos[var5] + (var2 << 16);
               PlayerYPos[var4] = PlayerYPos[var5] + ((short)((byte)this.pGameData.piGameData[this.pGameData.piGameDataPos[DamageType[var4] + 10] + DamageIndex[var4] * this.pGameData.piGameDataXSize[DamageType[var4] + 10] + 8]) << 16);
            }

            if (PlayerYPos[var4] < 15728640 && !ThrowDamage[var4]) {
               var16 = 7;
            } else {
               var16 = 3;
            }

            var8 = (short)((byte)this.pGameData.piGameData[this.pGameData.piGameDataPos[DamageType[var4] + 10] + DamageIndex[var4] * this.pGameData.piGameDataXSize[DamageType[var4] + 10] + var16]);
            var7 = (short)((byte)this.pGameData.piGameData[this.pGameData.piGameDataPos[DamageType[var4] + 10] + DamageIndex[var4] * this.pGameData.piGameDataXSize[DamageType[var4] + 10] + var16 + 1]);
            var18 = (short)((byte)this.pGameData.piGameData[this.pGameData.piGameDataPos[DamageType[var4] + 10] + DamageIndex[var4] * this.pGameData.piGameDataXSize[DamageType[var4] + 10] + var16 + 2]);
            var17 = (short)((byte)this.pGameData.piGameData[this.pGameData.piGameDataPos[DamageType[var4] + 10] + DamageIndex[var4] * this.pGameData.piGameDataXSize[DamageType[var4] + 10] + var16 + 3]);
            if (var8 == -2) {
               var2 = this.pGameData.piGameData[this.pGameData.piGameDataPos[DamageOldType[var4] + 10] + DamageOldIndex[var4] * this.pGameData.piGameDataXSize[DamageOldType[var4] + 10] + 3] / 2;
            } else if (var8 == -1) {
               var2 = DamageXSpeed[var4];
            } else {
               var2 = var8 * 128 / 10;
            }

            DamageXSpeed[var4] = var2;
            if (var7 == -2) {
               var2 = this.pGameData.piGameData[this.pGameData.piGameDataPos[DamageOldType[var4] + 10] + DamageOldIndex[var4] * this.pGameData.piGameDataXSize[DamageOldType[var4] + 10] + 4] / 2;
            } else if (var7 == -1) {
               var2 = DamageYSpeed[var4];
            } else {
               var2 = var7 * 128 / 10;
            }

            DamageYSpeed[var4] = var2;
            if (var18 == -2) {
               var2 = DamageXAccel[var4] / 2;
            } else if (var18 == -1) {
               var2 = DamageXAccel[var4];
            } else {
               var2 = var18 * 128 / 10;
            }

            DamageXAccel[var4] = var2;
            if (var17 == -2) {
               var2 = DamageYAccel[var4] / 2;
            } else if (var17 == -1) {
               var2 = DamageYAccel[var4];
            } else {
               var2 = var17 * 128 / 10;
            }

            DamageYAccel[var4] = var2;
            var20 = DamageTime;
            var10002 = var20[var4]++;
         } else if (tcbNow.iHitStop == 0) {
            var2 = DamageXSpeed[var4];
            var20 = DamageXSpeed;
            var20[var4] += DamageXAccel[var4];
            var20 = DamageYSpeed;
            var20[var4] += DamageYAccel[var4];
            if (var2 >= 0 && DamageXSpeed[var4] < 0 || var2 <= 0 && DamageXSpeed[var4] > 0 || DamageXSpeed[var4] == 0) {
               DamageXSpeed[var4] = 0;
               DamageXAccel[var4] = 0;
            }
         }

         if (tcbNow.iHitStop == 0) {
            if ((objExec.wObjFlag & 16) != 0) {
               var20 = PlayerXPos;
               var20[var4] -= DamageXSpeed[var4] << 9;
            } else {
               var20 = PlayerXPos;
               var20[var4] += DamageXSpeed[var4] << 9;
            }

            var20 = PlayerYPos;
            var20[var4] += DamageYSpeed[var4] << 9;
         }

         this.PlayerTail(var1);
         if (tcbNow.iHitStop == 0) {
            var19 = this.pGameData.piGameData[this.pGameData.piGameDataPos[DamageType[var4] + 10] + DamageIndex[var4] * this.pGameData.piGameDataXSize[DamageType[var4] + 10] + 11];
            if (var19 > 0 && var19 < 50) {
               if (iBackXOffset != 0) {
                  DefensiveFlag[var4] = 0;
               } else if (var19 == 12 && (JoyTrig[var4] & 16640) != 0) {
                  DefensiveFlag[var4] = 1;
               }

               var17 = this.pGameData.piGameData[this.pGameData.piGameDataPos[DamageType[var4] + 10] + DamageIndex[var4] * this.pGameData.piGameDataXSize[DamageType[var4] + 10] + 12];
               if (var17 != 2 && var17 != 3 && !bForceWall) {
                  if (var19 == 11) {
                     if (PlayerYPos[var4] > 15728640 || DamageYSpeed[var4] <= 0 && DamageYAccel[var4] <= 0) {
                        PlayerYPos[var4] = 15728640;
                        PlayerAir[var4] = false;
                        this._SetAct(var1, objExec.acttype, 0);
                        this._SetAct(var1, objExec.acttype, 24);
                        tcbNow.md = 888;
                        tcbNow.lp = 0;
                        this.Game(var1, tcbNow.md);
                        break;
                     }
                  } else if (PlayerYPos[var4] >= 15728640) {
                     PlayerYPos[var4] = 15728640;
                     PlayerAir[var4] = false;
                     if (var19 == 12 && DefensiveFlag[var4] == 1 && Life[var4] > 0) {
                        this.DamageEnd(var1);
                        if (PlayerXPos[var4] != PlayerXPos[var5]) {
                           if (PlayerXPos[var4] > PlayerXPos[var5]) {
                              var12 = objExec;
                              var12.wObjFlag |= 16;
                           } else {
                              var12 = objExec;
                              var12.wObjFlag &= -17;
                           }
                        }

                        this._SetAct(var1, objExec.acttype, 22);
                        PlayerYPos[var4] = 15728640;
                        PlayerAir[var4] = false;
                        tcbNow.md = 886;
                        tcbNow.lp = 0;
                     } else {
                        iReqSENo = 11;
                        this.PushSE(var1, 11);
                        DamageType[var4] = var19;
                        DamageIndex[var4] = 0;
                        DamageTime[var4] = 0;
                     }

                     this.Game(var1, tcbNow.md);
                     break;
                  }
               } else {
                  if (PlayerYPos[var4] > 15728640) {
                     iReqSENo = 11;
                     this.PushSE(var1, 11);
                     PlayerYPos[var4] = 15728640;
                     DamageOldIndex[var4] = 0;
                     DamageOldType[var4] = var19;
                     DamageType[var4] = 12;
                     DamageIndex[var4] = 0;
                     DamageTime[var4] = 0;
                     this.Game(var1, tcbNow.md);
                     break;
                  }

                  var15 = this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[3] + this.ChrGameData[var4 + 3].piGameDataXSize[3] * 0 + 3] / 2 << 16;
                  if ((PlayerXPos[var4] <= iBackXPos + var15 && (iBaseXPos <= var15 || bForceWall) || PlayerXPos[var4] >= iBackXPos + 31391744 - var15 && (iBaseXPos + var15 >= 62849024 || bForceWall)) && (PlayerState[0] & 1) == 0 && (PlayerState[1] & 1) == 0 && DamageYSpeed[var4] <= 0) {
                     objExec.ano = 0;
                     DamageWall[var4] = true;
                     DamageType[var4] = var19;
                     DamageIndex[var4] = 0;
                     DamageTime[var4] = 0;
                     this.Game(var1, tcbNow.md);
                     break;
                  }
               }
            } else if (var19 != 0) {
               if (PlayerYPos[var4] > 15728640) {
                  iReqSENo = 12;
                  this.PushSE(var1, 12);
                  this._SetAct(var1, objExec.acttype, 13);
                  PlayerYPos[tcbNow._work[0]] = 15728640;
                  this.DamageEnd(var1);
                  tcbNow.md = 893;
                  tcbNow.lp = 0;
                  this.Game(var1, tcbNow.md);
                  break;
               }
            } else {
               if (ThrowDamage[var4] && tcbPlayer[var5].md == 877) {
                  DamageType[var4] = 2;
                  DamageIndex[var4] = 0;
                  DamageTime[var4] = 0;
                  this.Game(var1, tcbNow.md);
                  break;
               }

               if (PlayerYPos[var4] > 15728640) {
                  PlayerYPos[var4] = 15728640;
                  PlayerAir[var4] = false;
                  this.PlayerTail(var1);
               }
            }

            if (PlayerYPos[var4] != 15728640) {
               var16 = 1;
            } else {
               var16 = 0;
            }

            var19 = this.pGameData.piGameData[this.pGameData.piGameDataPos[DamageType[var4] + 10] + DamageIndex[var4] * this.pGameData.piGameDataXSize[DamageType[var4] + 10] + var16];
            if (DamageTime[var4] >= var19) {
               if (var19 == 255) {
                  DamageType[var4] = 2;
                  DamageIndex[var4] = 0;
                  DamageTime[var4] = 0;
                  this.Game(var1, tcbNow.md);
               } else {
                  var20 = DamageIndex;
                  var10002 = var20[var4]++;
                  DamageTime[var4] = 0;
                  if (DamageIndex[var4] >= this.pGameData.piGameDataYSize[DamageType[var4] + 10]) {
                     if (DamageYSpeed[var4] != 0) {
                        if (Life[var4] <= 0) {
                           if (PlayerXPos[var4] > PlayerXPos[var5]) {
                              var12 = objExec;
                              var12.wObjFlag |= 16;
                           } else {
                              var12 = objExec;
                              var12.wObjFlag &= -17;
                           }

                           DamageType[var4] = 2;
                           DamageOldIndex[var4] = DamageIndex[var4];
                           DamageOldType[var4] = DamageType[var4];
                        } else {
                           DamageType[var4] = 13;
                        }

                        DamageIndex[var4] = 0;
                     } else if (Life[var4] > 0) {
                        this.DamageEnd(var1);
                        tcbNow.md = 864;
                        tcbNow.lp = 0;
                     } else {
                        PlayerYPos[var4] = 15728640;
                        PlayerAir[var4] = false;
                        objExec.ano = 0;
                        this._SetAct(var1, objExec.acttype, 24);
                        tcbNow.md = 888;
                        tcbNow.lp = 0;
                     }

                     this.Game(var1, tcbNow.md);
                  }
               }
            } else {
               var13 = DamageTime;
               var10002 = var13[var4]++;
            }
         }
         break;
      case 877:
         var4 = tcbNow._work[0];
         var5 = 1 - var4;
         this._SetObj(var1, 130 - var4 * 4);
         if (DamageTime[var4] == 0) {
            var17 = (short)((byte)this.ChrGameData[var5 + 3].piGameData[this.ChrGameData[var5 + 3].piGameDataPos[DamageType[var4] + 14] + DamageIndex[var4] * this.ChrGameData[var5 + 3].piGameDataXSize[DamageType[var4] + 14] + 2]);
            var19 = (short)((byte)this.ChrGameData[var5 + 3].piGameData[this.ChrGameData[var5 + 3].piGameDataPos[DamageType[var4] + 14] + DamageIndex[var4] * this.ChrGameData[var5 + 3].piGameDataXSize[DamageType[var4] + 14] + 13]);
            if (var19 > 0) {
               this.Voice(var1, 1, var4, var19);
            }

            var2 = var17;
            if (var17 < 0) {
               var12 = objExec;
               var12.wObjFlag ^= 16;
               var2 = -var17;
            }

            if (var2 == objExec.ano) {
               this._SetAct(var1, objExec.acttype, 0);
            }

            this._SetAct(var1, objExec.acttype, var2);
            this._ActReq(var1);
            this.ChrSePlay(var1, var4);
            if (ThrowDamage[var4]) {
               var17 = (short)((byte)this.ChrGameData[var5 + 3].piGameData[this.ChrGameData[var5 + 3].piGameDataPos[DamageType[var4] + 14] + DamageIndex[var4] * this.ChrGameData[var5 + 3].piGameDataXSize[DamageType[var4] + 14] + 7]);
               var2 = var17;
               if ((tcbPlayer[var5].obj.wObjFlag & 16) != 0) {
                  var2 = -var17;
               }

               PlayerXPos[var4] = PlayerXPos[var5] + (var2 << 16);
               PlayerYPos[var4] = PlayerYPos[var5] + ((short)((byte)this.ChrGameData[var5 + 3].piGameData[this.ChrGameData[var5 + 3].piGameDataPos[DamageType[var4] + 14] + DamageIndex[var4] * this.ChrGameData[var5 + 3].piGameDataXSize[DamageType[var4] + 14] + 8]) << 16);
            }

            if (PlayerYPos[var4] < 15728640 && !ThrowDamage[var4]) {
               var16 = 7;
            } else {
               var16 = 3;
            }

            var8 = (short)((byte)this.ChrGameData[var5 + 3].piGameData[this.ChrGameData[var5 + 3].piGameDataPos[DamageType[var4] + 14] + DamageIndex[var4] * this.ChrGameData[var5 + 3].piGameDataXSize[DamageType[var4] + 14] + var16]);
            var7 = (short)((byte)this.ChrGameData[var5 + 3].piGameData[this.ChrGameData[var5 + 3].piGameDataPos[DamageType[var4] + 14] + DamageIndex[var4] * this.ChrGameData[var5 + 3].piGameDataXSize[DamageType[var4] + 14] + var16 + 1]);
            var18 = (short)((byte)this.ChrGameData[var5 + 3].piGameData[this.ChrGameData[var5 + 3].piGameDataPos[DamageType[var4] + 14] + DamageIndex[var4] * this.ChrGameData[var5 + 3].piGameDataXSize[DamageType[var4] + 14] + var16 + 2]);
            var17 = (short)((byte)this.ChrGameData[var5 + 3].piGameData[this.ChrGameData[var5 + 3].piGameDataPos[DamageType[var4] + 14] + DamageIndex[var4] * this.ChrGameData[var5 + 3].piGameDataXSize[DamageType[var4] + 14] + var16 + 3]);
            if (var8 == -2) {
               var2 = this.ChrGameData[var5 + 3].piGameData[this.ChrGameData[var5 + 3].piGameDataPos[DamageOldType[var4] + 14] + DamageOldIndex[var4] * this.ChrGameData[var5 + 3].piGameDataXSize[DamageOldType[var4] + 14] + 3] / 2;
            } else if (var8 == -1) {
               var2 = DamageXSpeed[var4];
            } else {
               var2 = var8 * 128 / 10;
            }

            DamageXSpeed[var4] = var2;
            if (var7 == -2) {
               var2 = this.ChrGameData[var5 + 3].piGameData[this.ChrGameData[var5 + 3].piGameDataPos[DamageOldType[var4] + 14] + DamageOldIndex[var4] * this.ChrGameData[var5 + 3].piGameDataXSize[DamageOldType[var4] + 14] + 4] / 2;
            } else if (var7 == -1) {
               var2 = DamageYSpeed[var4];
            } else {
               var2 = var7 * 128 / 10;
            }

            DamageYSpeed[var4] = var2;
            if (var18 == -2) {
               var2 = DamageXAccel[var4] / 2;
            } else if (var18 == -1) {
               var2 = DamageXAccel[var4];
            } else {
               var2 = var18 * 128 / 10;
            }

            DamageXAccel[var4] = var2;
            if (var17 == -2) {
               var2 = DamageYAccel[var4] / 2;
            } else if (var17 == -1) {
               var2 = DamageYAccel[var4];
            } else {
               var2 = var17 * 128 / 10;
            }

            DamageYAccel[var4] = var2;
            var20 = DamageTime;
            var10002 = var20[var4]++;
         } else if (tcbNow.iHitStop == 0) {
            var2 = DamageXSpeed[var4];
            var20 = DamageXSpeed;
            var20[var4] += DamageXAccel[var4];
            var20 = DamageYSpeed;
            var20[var4] += DamageYAccel[var4];
            if (var2 >= 0 && DamageXSpeed[var4] < 0 || var2 <= 0 && DamageXSpeed[var4] > 0 || DamageXSpeed[var4] == 0) {
               DamageXSpeed[var4] = 0;
               DamageXAccel[var4] = 0;
            }
         }

         if (tcbNow.iHitStop == 0) {
            if ((objExec.wObjFlag & 16) != 0) {
               var20 = PlayerXPos;
               var20[var4] -= DamageXSpeed[var4] << 9;
            } else {
               var20 = PlayerXPos;
               var20[var4] += DamageXSpeed[var4] << 9;
            }

            var20 = PlayerYPos;
            var20[var4] += DamageYSpeed[var4] << 9;
         }

         this.PlayerTail(var1);
         if (tcbNow.iHitStop == 0) {
            var2 = this.ChrGameData[var5 + 3].piGameData[this.ChrGameData[var5 + 3].piGameDataPos[DamageType[var4] + 14] + DamageIndex[var4] * this.ChrGameData[var5 + 3].piGameDataXSize[DamageType[var4] + 14] + 11];
            if (var2 > 0 && var2 < 50) {
               if (iBackXOffset != 0) {
                  DefensiveFlag[var4] = 0;
               } else if (var2 == 12 && (JoyTrig[var4] & 16640) != 0) {
                  DefensiveFlag[var4] = 1;
               }

               var17 = this.ChrGameData[var5 + 3].piGameData[this.ChrGameData[var5 + 3].piGameDataPos[DamageType[var4] + 14] + DamageIndex[var4] * this.ChrGameData[var5 + 3].piGameDataXSize[DamageType[var4] + 14] + 12];
               if (var17 != 2 && var17 != 3 && !bForceWall) {
                  if (var2 == 11) {
                     if (PlayerYPos[var4] > 15728640 || DamageYSpeed[var4] <= 0 && DamageYAccel[var4] <= 0) {
                        PlayerYPos[var4] = 15728640;
                        this._SetAct(var1, objExec.acttype, 0);
                        this._SetAct(var1, objExec.acttype, 24);
                        tcbNow.md = 888;
                        tcbNow.lp = 0;
                        this.Game(var1, tcbNow.md);
                        break;
                     }
                  } else if (PlayerYPos[var4] >= 15728640) {
                     PlayerYPos[var4] = 15728640;
                     if (var2 == 12 && DefensiveFlag[var4] == 1 && Life[var4] > 0) {
                        this.DamageEnd(var1);
                        this._SetAct(var1, objExec.acttype, 22);
                        PlayerYPos[var4] = 15728640;
                        PlayerAir[var4] = false;
                        tcbNow.md = 886;
                        tcbNow.lp = 0;
                     } else {
                        iReqSENo = 11;
                        this.PushSE(var1, 11);
                        if (var2 >= 30) {
                           var2 -= 30;
                           tcbNow.md = 877;
                           tcbNow.lp = 0;
                        } else {
                           tcbNow.md = 876;
                           tcbNow.lp = 0;
                        }

                        DamageType[var4] = var2;
                        DamageIndex[var4] = 0;
                        DamageTime[var4] = 0;
                     }

                     this.Game(var1, tcbNow.md);
                     break;
                  }
               } else {
                  if (PlayerYPos[var4] > 15728640) {
                     iReqSENo = 11;
                     this.PushSE(var1, 11);
                     PlayerYPos[var4] = 15728640;
                     DamageOldIndex[var4] = 0;
                     DamageOldType[var4] = 16;
                     DamageType[var4] = 12;
                     DamageIndex[var4] = 0;
                     DamageTime[var4] = 0;
                     tcbNow.md = 876;
                     tcbNow.lp = 0;
                     this.Game(var1, tcbNow.md);
                     break;
                  }

                  var6 = this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[3] + this.ChrGameData[var4 + 3].piGameDataXSize[3] * 0 + 3] / 2 << 16;
                  if ((PlayerXPos[var4] <= iBackXPos + var6 && (iBaseXPos <= var6 || var17 == 3 || bForceWall) || PlayerXPos[var4] >= iBackXPos + 31391744 - var6 && (iBaseXPos + var6 >= 62849024 || var17 == 3 || bForceWall)) && (PlayerState[0] & 1) == 0 && (PlayerState[1] & 1) == 0) {
                     DamageWall[var4] = true;
                     if (var2 >= 30) {
                        var2 -= 30;
                        tcbNow.md = 877;
                        tcbNow.lp = 0;
                     } else {
                        tcbNow.md = 876;
                        tcbNow.lp = 0;
                     }

                     DamageType[var4] = var2;
                     DamageIndex[var4] = 0;
                     DamageTime[var4] = 0;
                     this.Game(var1, tcbNow.md);
                     break;
                  }
               }
            } else if (var2 != 0) {
               if (PlayerYPos[var4] > 15728640) {
                  iReqSENo = 12;
                  this.PushSE(var1, 12);
                  this._SetAct(var1, objExec.acttype, 13);
                  PlayerYPos[tcbNow._work[0]] = 15728640;
                  this.DamageEnd(var1);
                  tcbNow.md = 893;
                  tcbNow.lp = 0;
                  this.Game(var1, tcbNow.md);
                  break;
               }
            } else {
               if (ThrowDamage[var4] && tcbPlayer[var5].md == 877) {
                  DamageType[var4] = 2;
                  DamageIndex[var4] = 0;
                  DamageTime[var4] = 0;
                  tcbNow.md = 876;
                  tcbNow.lp = 0;
                  this.Game(var1, tcbNow.md);
                  break;
               }

               if (PlayerYPos[var4] > 15728640) {
                  PlayerYPos[var4] = 15728640;
                  PlayerAir[var4] = false;
                  this.PlayerTail(var1);
               }
            }

            if (PlayerYPos[var4] != 15728640) {
               var16 = 1;
            } else {
               var16 = 0;
            }

            var19 = this.ChrGameData[var5 + 3].piGameData[this.ChrGameData[var5 + 3].piGameDataPos[DamageType[var4] + 14] + DamageIndex[var4] * this.ChrGameData[var5 + 3].piGameDataXSize[DamageType[var4] + 14] + var16];
            if (DamageTime[var4] >= var19) {
               if (var19 == 255) {
                  DamageType[var4] = 2;
                  DamageIndex[var4] = 0;
                  DamageTime[var4] = 0;
                  this.Game(var1, tcbNow.md);
               } else {
                  var20 = DamageIndex;
                  var10002 = var20[var4]++;
                  DamageTime[var4] = 0;
                  if (DamageIndex[var4] >= this.ChrGameData[var5 + 3].piGameDataYSize[DamageType[var4] + 14]) {
                     if (DamageYSpeed[var4] != 0) {
                        if (Life[var4] <= 0) {
                           DamageType[var4] = 2;
                           DamageOldIndex[var4] = DamageIndex[var4];
                           DamageOldType[var4] = DamageType[var4];
                        } else {
                           DamageType[var4] = 13;
                        }

                        DamageIndex[var4] = 0;
                        tcbNow.md = 876;
                        tcbNow.lp = 0;
                     } else if (Life[var4] > 0) {
                        this.DamageEnd(var1);
                        tcbNow.md = 864;
                        tcbNow.lp = 0;
                     } else {
                        PlayerYPos[var4] = 15728640;
                        objExec.ano = 0;
                        this._SetAct(var1, objExec.acttype, 24);
                        tcbNow.md = 888;
                        tcbNow.lp = 0;
                     }

                     this.Game(var1, tcbNow.md);
                  }
               }
            } else {
               var13 = DamageTime;
               var10002 = var13[var4]++;
            }
         }
         break;
      case 878:
         tcbNow._work[10] = 0;
         tcbNow.md = 879;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 879:
         var15 = tcbNow._work[0];
         this.PlayerTail(var1);
         if (PlayerSearch[var15]) {
            var4 = this.ChrGameData[var15 + 3].piGameData[this.ChrGameData[var15 + 3].piGameDataPos[3] + this.ChrGameData[var15 + 3].piGameDataXSize[3] * 0 + 0] << 16;
            var2 = 0;
            if (PlayerAir[var15]) {
               var2 = this.GetAtanTable(TargetXPos[var15] - PlayerXPos[var15], PlayerYPos[var15] - TargetYPos[var15]) * 360 / 512;
               var20 = PlayerYPos;
               var20[var15] -= this.SinTable[var2 % 360] * var4 / 65536;
            }

            if (PlayerXPos[var15] < TargetXPos[var15] - 2097152 || PlayerXPos[var15] > TargetXPos[var15] + 2097152) {
               if (PlayerAir[var15]) {
                  var20 = PlayerXPos;
                  var20[var15] += this.SinTable[(var2 + 90) % 360] * var4 / 65536;
               } else if (PlayerXPos[var15] < TargetXPos[var15]) {
                  var20 = PlayerXPos;
                  var20[var15] += var4;
               } else {
                  var20 = PlayerXPos;
                  var20[var15] -= var4;
               }

               if (PlayerXPos[var15] < TargetXPos[var15]) {
                  var12 = objExec;
                  var12.wObjFlag &= -17;
               } else {
                  var12 = objExec;
                  var12.wObjFlag |= 16;
               }
            }
         }

         var4 = this.CmdCheck(var1, var15);
         var20 = PlayerAttackFlag;
         var20[var15] |= 1 << var4;
         var2 = objExec.ano;
         if (CancelTime[var15] > 0 && (PlayerState[var15] & 524288) == 0) {
            if ((objExec.wOptFlag & 512) != 0 && (tcbPlayer[var15].wFlag & 1) != 0 && (var4 == 12 || var4 == 11 || var4 == 13 || var4 == 17) && (var2 == 30 || var2 == 32)) {
               if (var4 == 13) {
                  var16 = 37;
               } else if (var4 == 17) {
                  var16 = 36;
               } else if (var4 == 11) {
                  var16 = 31;
               } else if (var2 == 30) {
                  var16 = 32;
               } else if (var2 == 32) {
                  var16 = 33;
               } else {
                  var16 = 30;
               }

               var23 = tcbPlayer[var15];
               var23.wFlag &= -2;
               this._SetAct(var1, objExec.acttype, var16);
               if (var16 == 33) {
                  this._ActReq(var1);
               }

               this.PlayerTail(var1);
            }

            if (var4 != 6 && var4 != 7) {
               if (var4 >= 1 && var4 <= 9) {
                  if (var4 != 8 && var4 != 9) {
                     tcbNow.md = 880;
                     tcbNow.lp = 0;
                  } else {
                     var20 = SpecialType;
                     if (var4 == 8) {
                        var16 = 9;
                     } else {
                        var16 = 11;
                     }

                     var20[var15] = var16;
                     tcbNow.md = 923;
                     tcbNow.lp = 0;
                  }

                  if (var4 == 1) {
                     var20 = SpecialType;
                     if (PlayerYPos[var15] != 15728640) {
                        var16 = 6;
                     } else {
                        var16 = 0;
                     }

                     var20[var15] = var16;
                  }

                  if (var4 == 2) {
                     var20 = SpecialType;
                     if (PlayerYPos[var15] != 15728640) {
                        var16 = 7;
                     } else {
                        var16 = 1;
                     }

                     var20[var15] = var16;
                  }

                  if (var4 == 3) {
                     var20 = SpecialType;
                     if (PlayerYPos[var15] != 15728640) {
                        var16 = 8;
                     } else {
                        var16 = 2;
                     }

                     var20[var15] = var16;
                  }

                  if (var4 == 4) {
                     var20 = SpecialType;
                     if (PlayerYPos[var15] != 15728640) {
                        var16 = 15;
                     } else {
                        var16 = 14;
                     }

                     var20[var15] = var16;
                  }

                  this.Game(var1, tcbNow.md);
                  break;
               }
            } else {
               var20 = SpecialType;
               if (var4 == 6) {
                  var16 = 18;
               } else {
                  var16 = 19;
               }

               var20[var15] = var16;
               var20 = tcbNow._work;
               if (SpecialType[var15] == 18) {
                  var16 = 4;
               } else {
                  var16 = 8;
               }

               var20[10] = var16;
               this._SetAct(var1, objExec.acttype, 87);
               SpecialType[var15] = 0;
               tcbNow.md = 865;
               tcbNow.lp = 0;
            }
         }

         if ((objExec.wActFlag & 2) != 0) {
            tcbNow.md = 864;
            tcbNow.lp = 0;
         }
         break;
      case 880:
         var15 = tcbNow._work[0];
         if (SpecialType[var15] != 18 && SpecialType[var15] != 19) {
            if (objExec.ano >= 40 && objExec.ano < 89) {
               this.SYNCHRO_DEC(var1, var15, 100);
            }

            TameCnt[var15] = 0;
            PlayerKey[var15] = 0;
            this.StartPlayerAttack(var1);
            tcbNow.md = 881;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         } else {
            var20 = tcbNow._work;
            if (SpecialType[var15] == 18) {
               var16 = 4;
            } else {
               var16 = 8;
            }

            var20[10] = var16;
            this._SetAct(var1, objExec.acttype, 87);
            SpecialType[var15] = 0;
            tcbNow.md = 865;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 881:
         tcbNow._work[10] = 0;
         tcbNow._work[11] = 0;
         tcbNow.md = 882;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 882:
         var4 = tcbNow._work[0];
         var5 = 1 - var4;
         var6 = SpecialType[var4];
         if (CancelTime[var4] > 0 && (PlayerState[var4] & 524288) == 0) {
            if (PlayerYPos[var4] == 15728640) {
               var2 = this.CmdCheck(var1, var4);
               var20 = PlayerAttackFlag;
               var20[var4] |= 1 << var2;
               if (var2 >= 1 && var2 <= 7 && var2 != 5 && SpecialType[var4] != 11 && SpecialType[var4] != 12 && SpecialType[var4] != 9 && SpecialType[var4] != 10 || var2 == 8 || var2 == 9) {
                  if (var2 != 8 && var2 != 9) {
                     if (var2 == 1) {
                        SpecialType[var4] = 0;
                     }

                     if (var2 == 2) {
                        SpecialType[var4] = 1;
                     }

                     if (var2 == 3) {
                        SpecialType[var4] = 2;
                     }

                     if (var2 == 6) {
                        SpecialType[var4] = 18;
                     }

                     if (var2 == 7) {
                        SpecialType[var4] = 19;
                     }

                     if (var2 == 23) {
                        SpecialType[var4] = 16;
                     }

                     tcbNow.md = 929;
                     tcbNow.lp = 0;
                  } else {
                     var20 = SpecialType;
                     if (var2 == 8) {
                        var16 = 9;
                     } else {
                        var16 = 11;
                     }

                     var20[var4] = var16;
                     tcbNow.md = 923;
                     tcbNow.lp = 0;
                  }

                  this.Game(var1, tcbNow.md);
                  break;
               }
            } else {
               var15 = this.CmdCheck(var1, var4);
               var20 = PlayerAttackFlag;
               var20[var4] |= 1 << var15;
               if ((var15 == 1 || var15 == 2 || var15 == 3 || var15 == 4 || var15 == 6 || var15 == 7) && SpecialType[var4] != 9 && SpecialType[var4] != 11 && SpecialType[var4] != 12 && SpecialType[var4] != 10 || var15 == 8 || var15 == 9) {
                  if (var15 != 8 && var15 != 9) {
                     if (var15 == 1) {
                        var20 = SpecialType;
                        if (PlayerAir[var4]) {
                           var16 = 6;
                        } else {
                           var16 = 3;
                        }

                        var20[var4] = var16;
                     }

                     if (var15 == 2) {
                        var20 = SpecialType;
                        if (PlayerAir[var4]) {
                           var16 = 7;
                        } else {
                           var16 = 4;
                        }

                        var20[var4] = var16;
                     }

                     if (var15 == 3) {
                        var20 = SpecialType;
                        if (PlayerAir[var4]) {
                           var16 = 8;
                        } else {
                           var16 = 5;
                        }

                        var20[var4] = var16;
                     }

                     if (var15 == 4) {
                        var20 = SpecialType;
                        if (PlayerAir[var4]) {
                           var16 = 18;
                        } else {
                           var16 = 17;
                        }

                        var20[var4] = var16;
                     }

                     if (var15 == 6) {
                        SpecialType[var4] = 18;
                     }

                     if (var15 == 7) {
                        SpecialType[var4] = 19;
                     }

                     tcbNow.md = 929;
                     tcbNow.lp = 0;
                  } else {
                     var20 = SpecialType;
                     if (var15 == 8) {
                        var16 = 10;
                     } else {
                        var16 = 12;
                     }

                     var20[var4] = var16;
                     tcbNow.md = 923;
                     tcbNow.lp = 0;
                  }

                  this.Game(var1, tcbNow.md);
                  break;
               }
            }
         }

         this.PlayerTail(var1);
         if ((PlayerState[var4] & 8388608) != 0) {
            var2 = DamageHitActNo[var5];
         } else {
            var17 = (short)(this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var6 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 32 + 1] << 8 & '\uff00' | this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var6 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 32]);
            var2 = var17;
            if (var17 == 0) {
               var2 = DamageHitActNo[var5];
            }
         }

         if (tcbPlayer[var5].md == 876 || tcbPlayer[var5].md == 877) {
            if ((tcbPlayer[var4].wFlag & 4096) != 0 && var2 != objExec.ano && DamageHitActNo[var5] != var2) {
               this._SetAct(var1, objExec.acttype, var2);
               this._ActReq(var1);
               this.ChrSePlay(var1, var4);
               CancelTime[var4] = 0;
               this.PlayerTail(var1);
            }

            var23 = tcbPlayer[var4];
            var23.wFlag &= -4097;
            if ((tcbPlayer[var4].wFlag & 1) != 0) {
               tcbNow._work[10] = 1;
               var23 = tcbPlayer[var4];
               var23.wFlag &= -2;
            }

            if ((DamageHitActNo[var5] == objExec.ano || var2 == objExec.ano) && tcbNow._work[10] == 1) {
               if ((PlayerState[var4] & 8388608) != 0) {
                  tcbNow._work[10] = 0;
               } else {
                  if (PlayerYPos[var4] == 15728640) {
                     var17 = (short)(this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var6 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 10 + 1] << 8 & '\uff00' | this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var6 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 10]);
                     var19 = (short)(this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var6 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 12 + 1] << 8 & '\uff00' | this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var6 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 12]);
                  } else {
                     var17 = (short)(this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var6 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 14 + 1] << 8 & '\uff00' | this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var6 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 14]);
                     var19 = (short)(this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var6 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 16 + 1] << 8 & '\uff00' | this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var6 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 16]);
                  }

                  if (var19 != 0 && objExec.ano == var17) {
                     this._SetAct(var1, objExec.acttype, var19);
                     this._ActReq(var1);
                     this.ChrSePlay(var1, var4);
                     CancelTime[var4] = 0;
                     this.PlayerTail(var1);
                  } else if (var17 != 0 && objExec.ano != var17 && objExec.ano != var19) {
                     this._SetAct(var1, objExec.acttype, var17);
                     this._ActReq(var1);
                     this.ChrSePlay(var1, var4);
                     CancelTime[var4] = 0;
                     this.PlayerTail(var1);
                     if (var19 != 0) {
                        tcbNow._work[10] = 0;
                     }
                  }
               }
            }
         }

         if (objExec.ano == (short)(this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var6 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 2 + 1] << 8 & '\uff00' | this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var6 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 2])) {
            var19 = (short)(this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var6 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 0 + 1] << 8 & '\uff00' | this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var6 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 0]);
            if (((var19 & 8) != 0 || (var19 & 128) != 0 && DamageHitSpecialType[var5] == SpecialType[var4] && tcbNow._work[10] == 1) && ((objExec.wActFlag & 2) != 0 || (objExec.wOptFlag & 512) != 0)) {
               var2 = this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[3] + this.ChrGameData[var4 + 3].piGameDataXSize[3] * 0 + 5] << 16;
               this._SetAct(var1, objExec.acttype, objExec.ano + 1);
               this._ActReq(var1);
               this.ChrSePlay(var1, var4);
               if (PlayerXPos[var4] < PlayerXPos[var5]) {
                  PlayerXPos[var4] = PlayerXPos[var5] - var2;
               } else {
                  PlayerXPos[var4] = PlayerXPos[var5] + var2;
               }

               PlayerYPos[var4] = PlayerYPos[var5];
               bScrollLock = true;
               tcbNow._work[10] = 0;
               this.PlayerTail(var1);
               break;
            }
         }

         this.Game(var1, 883);
         break;
      case 883:
         var15 = tcbNow._work[0];
         if ((objExec.wActFlag & 2) != 0 && PlayerYPos[var15] < 15728640 && !PlayerAir[var15]) {
            PlayerSearch[var15] = false;
            this._SetAct(var1, objExec.acttype, 89);
            tcbNow.md = 886;
            tcbNow.lp = 0;
            this.PlayerTail(var1);
         } else if (PlayerYPos[var15] > 15728640 && objExec.iYSpeed > 0) {
            short[] var22 = this.ChrGameData[var15 + 3].piGameData;
            var5 = this.ChrGameData[var15 + 3].piGameDataPos[4];
            var6 = SpecialType[var15];
            var4 = this.ChrGameData[var15 + 3].piGameDataXSize[4];
            if (tcbNow._work[10] != 0) {
               var16 = 11;
            } else {
               var16 = 4;
            }

            var7 = var22[var5 + var6 * 2 * var4 + var16 * 2 + 1];
            var22 = this.ChrGameData[var15 + 3].piGameData;
            var4 = this.ChrGameData[var15 + 3].piGameDataPos[4];
            var6 = SpecialType[var15];
            var5 = this.ChrGameData[var15 + 3].piGameDataXSize[4];
            if (tcbNow._work[10] != 0) {
               var16 = 11;
            } else {
               var16 = 4;
            }

            var19 = (short)(var7 << 8 & '\uff00' | var22[var4 + var6 * 2 * var5 + var16 * 2]);
            iReqSENo = 12;
            this.PushSE(var1, 12);
            PlayerYPos[var15] = 15728640;
            if (var19 != 0) {
               this._SetAct(var1, objExec.acttype, var19);
            } else {
               this.AttackEnd(var1);
               this._SetAct(var1, objExec.acttype, 13);
               this._ActReq(var1);
               this.ChrSePlay(var1, var15);
               tcbNow.md = 893;
               tcbNow.lp = 0;
            }

            this.PlayerTail(var1);
         } else if ((objExec.wActFlag & 4) == 0) {
            var19 = (short)(this.ChrGameData[var15 + 3].piGameData[this.ChrGameData[var15 + 3].piGameDataPos[4] + SpecialType[var15] * 2 * this.ChrGameData[var15 + 3].piGameDataXSize[4] + 30 + 1] << 8 & '\uff00' | this.ChrGameData[var15 + 3].piGameData[this.ChrGameData[var15 + 3].piGameDataPos[4] + SpecialType[var15] * 2 * this.ChrGameData[var15 + 3].piGameDataXSize[4] + 30]);
            if ((objExec.wActFlag & 2) != 0) {
               tcbNow.md = 864;
               tcbNow.lp = 0;
               if (var19 != 0 && (SpecialType[var15] == 0 || SpecialType[var15] == 3 || SpecialType[var15] == 6)) {
                  if (objExec.ano != 42) {
                     tcbNow.md = 882;
                     tcbNow.lp = 0;
                     this._SetAct(var1, objExec.acttype, 42);
                     this._ActReq(var1);
                     this.ChrSePlay(var1, var15);
                  }

                  tcbNow._work[11] = 0;
               }
            } else if (SpecialBulletNumber[var15] < var19 && (objExec.wOptFlag & 512) != 0 && (SpecialType[var15] == 0 || SpecialType[var15] == 3 || SpecialType[var15] == 6) && (JoyTrig[var15] & 16640) != 0) {
               var2 = objExec.ano;
               this._SetAct(var1, objExec.acttype, 0);
               var4 = objExec.acttype;
               if (var2 == 41) {
                  var16 = 40;
               } else {
                  var16 = 41;
               }

               this._SetAct(var1, var4, var16);
               this._ActReq(var1);
               this.ChrSePlay(var1, var15);
               var13 = SpecialBulletNumber;
               var10002 = var13[var15]++;
               tcbNow._work[11] = 1;
               tcbNow.md = 882;
               tcbNow.lp = 0;
            }
         }
         break;
      case 884:
         this.Game(var1, 875);
         break;
      case 885:
         tcbNow._work[10] = 0;
         this.PlayerTail(var1);
         tcbNow.md = 886;
         tcbNow.lp = 0;
         break;
      case 886:
         var4 = tcbNow._work[0];
         boolean var10 = false;
         var15 = tcbPlayer[var4].obj.ano;
         if (var15 != 22 && PlayerYPos[var4] != 15728640) {
            if (PlayerSearch[var4] && (PlayerXPos[var4] < TargetXPos[var4] - 2097152 || PlayerXPos[var4] > TargetXPos[var4] + 2097152)) {
               var2 = this.GetAtanTable(TargetXPos[var4] - PlayerXPos[var4], PlayerYPos[var4] - TargetYPos[var4]) * 360 / 512;
               var5 = this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[3] + this.ChrGameData[var4 + 3].piGameDataXSize[3] * 0 + 0] << 16;
               var20 = PlayerXPos;
               var20[var4] += this.SinTable[(var2 + 90) % 360] * var5 / 65536;
               var20 = PlayerYPos;
               var20[var4] -= this.SinTable[var2 % 360] * var5 / 65536;
               if (PlayerXPos[var4] < TargetXPos[var4]) {
                  var12 = objExec;
                  var12.wObjFlag &= -17;
               } else {
                  var12 = objExec;
                  var12.wObjFlag |= 16;
               }
            }

            var2 = var15;
            if ((objExec.wOptFlag & 512) != 0) {
               var2 = var15;
               if ((PlayerKey[var4] & 16640) != 0) {
                  label1422: {
                     if (var15 != 30 && var15 != 32) {
                        var2 = var15;
                        if (var15 != 33) {
                           break label1422;
                        }
                     }

                     if ((PlayerKey[var4] & 2050) != 0) {
                        var2 = 36;
                     } else if (((PlayerKey[var4] & 520) == 0 || (objExec.wObjFlag & 16) == 0) && ((PlayerKey[var4] & 132) == 0 || (objExec.wObjFlag & 16) != 0)) {
                        if ((PlayerKey[var4] & 520) != 0 && (objExec.wObjFlag & 16) == 0 || (PlayerKey[var4] & 132) != 0 && (objExec.wObjFlag & 16) != 0) {
                           var2 = 31;
                        } else if (var15 != 30 && var15 != 34) {
                           if (var15 == 32) {
                              var2 = 33;
                           } else {
                              var2 = 30;
                           }
                        } else {
                           var2 = 32;
                        }
                     } else {
                        var2 = 37;
                     }

                     this._SetAct(var1, objExec.acttype, var2);
                  }
               }
            }

            var9 = var10;
            if (var2 != 22) {
               if (var2 != 34 && var2 != 35 && var2 != 39 && var2 != 38 && var2 != 32 && var2 != 33) {
                  var9 = true;
               } else {
                  var9 = var10;
                  if (tcbNow.iHitStop != 0) {
                     var9 = true;
                  }
               }
            }

            if (!PlayerAir[var4]) {
               var10 = true;
            } else {
               var10 = false;
            }

            boolean var11;
            if (var9) {
               var11 = AirType[var4];
            } else {
               var11 = false;
            }

            if (this.CommonNormal(var1, var10, false, var11, false, var9)) {
               break;
            }
         }

         this.PlayerTail(var1);
         if ((objExec.wActFlag & 4) == 0) {
            if ((objExec.wActFlag & 2) != 0 && PlayerYPos[var4] < 15728640) {
               if (!AirType[var4]) {
                  this._SetAct(var1, objExec.acttype, 89);
                  this._ActReq(var1);
                  this.ChrSePlay(var1, var4);
               } else {
                  tcbNow.md = 864;
                  tcbNow.lp = 0;
               }
            }

            if (PlayerYPos[var4] > 15728640 && tcbNow.iHitStop == 0) {
               PlayerYPos[var4] = 15728640;
               PlayerAir[var4] = false;
               tcbNow.md = 887;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
            }
         }
         break;
      case 887:
         iReqSENo = 12;
         this.PushSE(var1, 12);
         this._SetAct(var1, objExec.acttype, 13);
         PlayerYPos[tcbNow._work[0]] = 15728640;
         this.AttackEnd(var1);
         tcbNow.md = 893;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 888:
         PlayerYPos[tcbNow._work[0]] = 15728640;
         tcbNow.md = 889;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 889:
         var2 = tcbNow._work[0];
         this.PlayerTail(var1);
         if (Life[var2] <= 0) {
            OldLifeWait[var2] = 0;
         } else if ((objExec.wActFlag & 2) != 0) {
            tcbNow.md = 890;
            tcbNow.lp = 0;
         }
         break;
      case 890:
         var15 = tcbNow._work[0];
         var2 = 1 - var15;
         DamageMove[var15] = 0;
         PlayerYPos[var15] = 15728640;
         PlayerAir[var15] = false;
         if (Life[var15] > 0) {
            this.DamageEnd(var1);
            if (PlayerXPos[var15] != PlayerXPos[var2]) {
               if (PlayerXPos[var15] < PlayerXPos[var2]) {
                  var12 = objExec;
                  var12.wObjFlag &= -17;
               } else {
                  var12 = objExec;
                  var12.wObjFlag |= 16;
               }
            }

            this._SetAct(var1, objExec.acttype, 25);
            tcbNow.md = 894;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 891:
         var4 = tcbNow._work[0];
         short var3;
         short var14;
         if ((objExec.wObjFlag & 16) == 0) {
            var14 = 132;
            var3 = 520;
         } else {
            var3 = 132;
            var14 = 520;
         }

         this.PlayerTail(var1);
         if (objExec.ano != 82 && objExec.ano != 83) {
            var9 = true;
         } else {
            var9 = false;
         }

         if (!this.CommonNormal(var1, false, false, false, false, var9)) {
            if (objExec.ano == 82 && PlayerYPos[var4] <= PlayerYLimit[var4]) {
               var12 = objExec;
               var12.wActFlag |= 2;
            }

            if (objExec.ano == 83 && PlayerYPos[var4] > 15728640) {
               tcbNow.md = 887;
               tcbNow.lp = 0;
            } else if (((objExec.ano == 6 || objExec.ano == 8) && (JoyTrig[var4] & var3) != 0 || (objExec.ano == 7 || objExec.ano == 9) && (JoyTrig[var4] & var14) != 0) && PlayerXPos[var4] != PlayerXPos[1 - var4]) {
               var15 = objExec.acttype;
               if (objExec.ano != 6 && objExec.ano != 8) {
                  var16 = 3;
               } else {
                  var16 = 2;
               }

               this._SetAct(var1, var15, var16);
               this._ActReq(var1);
               iReqSENo = 15;
               this.PushSE(var1, 15);
               tcbNow.md = 897;
               tcbNow.lp = 0;
            } else if ((objExec.wActFlag & 2) != 0) {
               if (objExec.ano == 82) {
                  PlayerAir[var4] = AirType[var4];
               }

               tcbNow.md = 864;
               tcbNow.lp = 0;
            }
         }
         break;
      case 892:
         var2 = tcbNow._work[0];
         this.PlayerTail(var1);
         if (!PlayerAir[var2]) {
            var9 = true;
         } else {
            var9 = false;
         }

         if (!this.CommonNormal(var1, var9, true, true, true, true) && ((objExec.wActFlag & 2) != 0 || (PlayerKey[var2] & 652) != 0)) {
            tcbNow.md = 864;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 893:
         var2 = tcbNow._work[0];
         var2 = PlayerKey[var2];
         this.PlayerTail(var1);
         if (!this.CommonNormal(var1, false, true, true, true, true)) {
            if ((var2 & 33) == 0) {
               tcbNow.md = 892;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
            } else if ((objExec.wActFlag & 2) != 0 || var2 == 4 || var2 == 128 || var2 == 8 || var2 == 512) {
               tcbNow.md = 864;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
            }
         }
         break;
      case 894:
         this.PlayerTail(var1);
         if (!this.CommonNormal(var1, false, false, false, false, false) && (objExec.wActFlag & 2) != 0) {
            tcbNow.md = 864;
            tcbNow.lp = 0;
         }
      }

   }

   public void Game6(GlobalWork var1, int var2) {
      int var3;
      int var4;
      int var5;
      int var6;
      boolean var11;
      ObjReq var13;
      int[] var16;
      ObjReq var17;
      int var10002;
      TCB var19;
      boolean var20;
      boolean var22;
      boolean var24;
      short var26;
      int var27;
      byte var29;
      int[] var33;
      TCB var36;
      switch(var2) {
      case 0:
      case 896:
      default:
         break;
      case 897:
         var5 = tcbNow._work[0];
         var4 = this.ChrGameData[var5 + 3].piGameData[this.ChrGameData[var5 + 3].piGameDataPos[3] + this.ChrGameData[var5 + 3].piGameDataXSize[3] * 0 + 7] << 16;
         PlayerAir[var5] = AirType[var5];
         if ((objExec.wObjFlag & 16) == 0) {
            var3 = 134217860;
            var2 = 268435976;
         } else {
            var2 = 134217860;
            var3 = 268435976;
         }

         if (!PlayerAir[var5]) {
            var11 = true;
         } else {
            var11 = false;
         }

         if (!this.CommonNormal(var1, var11, false, false, false, true)) {
            if (objExec.ano == 2 && (PlayerKey[var5] & var3) != 0) {
               this._SetAct(var1, objExec.acttype, 3);
               iReqSENo = 15;
               this.PushSE(var1, 15);
            } else if (objExec.ano == 3 && (PlayerKey[var5] & var2) != 0) {
               this._SetAct(var1, objExec.acttype, 2);
               iReqSENo = 15;
               this.PushSE(var1, 15);
            }

            if ((PlayerKey[var5] & 113) != 0) {
               var33 = PlayerYPos;
               var33[var5] -= var4;
            } else if ((PlayerKey[var5] & 7170) != 0) {
               var33 = PlayerYPos;
               var33[var5] += var4;
            }

            if (PlayerYPos[var5] >= 15728640) {
               PlayerYPos[var5] = 15728640;
            }

            if (PlayerKey[var5] == 0) {
               if (PlayerYPos[var5] >= 15728640 && PlayerAir[var5]) {
                  PlayerAir[var5] = false;
                  tcbNow.md = 887;
                  tcbNow.lp = 0;
               } else {
                  tcbNow.md = 864;
                  tcbNow.lp = 0;
               }
            } else {
               if ((PlayerKey[var5] & 12) != 0) {
                  if (objExec.ano == 3) {
                     if ((objExec.wObjFlag & 16) == 0) {
                        var33 = PlayerXPos;
                        var33[var5] -= var4;
                     } else {
                        var33 = PlayerXPos;
                        var33[var5] += var4;
                     }
                  } else if ((objExec.wObjFlag & 16) == 0) {
                     var33 = PlayerXPos;
                     var33[var5] += var4;
                  } else {
                     var33 = PlayerXPos;
                     var33[var5] -= var4;
                  }
               }

               this.PlayerTail(var1);
            }
         }
         break;
      case 898:
         var3 = tcbNow._work[0];
         var2 = 1 - var3;
         this.DamageEnd(var1);
         this._SetAct(var1, objExec.acttype, 86);
         this._SetObj(var1, var3 * 4 + 150);
         this.PlayerTail(var1);
         var13 = objExec;
         var13.wObjFlag |= 8;
         var19 = this._TaskMake(var1, 924, 13066);
         var19._work[1] = tcbPlayer[var2].md;
         var19._work[2] = var3;
         var19._work[3] = 10;
         tcbPlayer[var2].md = 925;
         tcbNow.md = 899;
         tcbNow.lp = 0;
         break;
      case 899:
         this.PlayerTail(var1);
         var13 = objExec;
         var13.wObjFlag |= 8;
         this._TLoop(var1, 40, 900);
         break;
      case 900:
         var13 = objExec;
         var13.wObjFlag &= -9;
         bBlackOut = false;
         tcbNow.md = 864;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 901:
         var2 = tcbNow._work[0];
         this._SetAct(var1, objExec.acttype, 84);
         if (Synchro[var2] >= SynchroMax[var2]) {
            tcbNow.md = 864;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 902;
            tcbNow.lp = 0;
         }

         this.PlayerTail(var1);
         break;
      case 902:
         var2 = tcbNow._work[0];
         if ((PlayerKey[var2] & 16640) != 0 && Synchro[var2] < SynchroMax[var2]) {
            if (objExec.ano == 84) {
               if ((objExec.wActFlag & 2) != 0) {
                  this._SetAct(var1, objExec.acttype, 85);
               }
            } else {
               this.SYNCHRO_ADD(var1, var2, this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 10] * SynchroTamePer[var2] / 100);
            }

            this.PlayerTail(var1);
         } else if (Synchro[var2] >= SynchroMax[var2]) {
            iReqSENo = 7;
            this.PushSE(var1, 7);
            this._SetAct(var1, objExec.acttype, 256);
            tcbNow.md = 903;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         } else {
            tcbNow.md = 904;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 903:
         this.PlayerTail(var1);
         if ((objExec.wActFlag & 2) != 0) {
            tcbNow.md = 904;
            tcbNow.lp = 0;
         }
         break;
      case 904:
         var2 = tcbNow._work[0];
         this.PlayerTail(var1);
         tcbNow.md = 864;
         tcbNow.lp = 0;
         break;
      case 905:
         this._SetAct(var1, objExec.acttype, 84);
         this.PlayerTail(var1);
         tcbNow.md = 906;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 906:
         var2 = tcbNow._work[0];
         this.PlayerTail(var1);
         if ((PlayerKey[var2] & 16640) != 0 && Angry[var2] < 100) {
            if (objExec.ano == 84) {
               if ((objExec.wActFlag & 2) != 0) {
                  this._SetAct(var1, objExec.acttype, 85);
               }
            } else {
               this.ANGRY_ADD(var1, var2, 1);
            }
         } else {
            tcbNow.md = 864;
            tcbNow.lp = 0;
         }
         break;
      case 907:
         this.PlayerTail(var1);
         if ((objExec.wActFlag & 2) != 0) {
            tcbNow.md = 864;
            tcbNow.lp = 0;
         }
         break;
      case 908:
         var6 = tcbNow._work[0];
         var27 = 1 - var6;
         byte var32 = 0;
         var22 = false;
         this.DamageEnd(var1);
         if (objExec.ano != 81 && objExec.ano != 80 && objExec.ano != 4) {
            if (PlayerYPos[var6] != 15728640) {
               if (PlayerAir[var6]) {
                  var29 = 81;
               } else {
                  var29 = 80;
               }
            } else {
               var29 = 4;
            }

            var3 = var29;
            if (PlayerYPos[var6] == 15728640) {
               label1074: {
                  if (PlayerXPos[var6] <= PlayerXPos[var27] || (objExec.wObjFlag & 16) != 0) {
                     var3 = var29;
                     if (PlayerXPos[var6] >= PlayerXPos[var27]) {
                        break label1074;
                     }

                     var3 = var29;
                     if ((objExec.wObjFlag & 16) == 0) {
                        break label1074;
                     }
                  }

                  var13 = objExec;
                  var13.wObjFlag ^= 16;
                  var3 = var29;
               }
            }
         } else {
            var2 = objExec.ano;
            var3 = var2;
            if (PlayerYPos[var6] >= 15728640) {
               var3 = var2;
               if (var2 != 4) {
                  var3 = 4;
               }
            }
         }

         if (objExec.ano != var3) {
            this._SetAct(var1, objExec.acttype, var3);
            this._ActReq(var1);
            this.ChrSePlay(var1, var6);
         } else {
            this.PlayerTail(var1);
         }

         if (DamageMove[var6] == GuardHitBack[var27]) {
            if (PlayerXPos[var6] > PlayerXPos[var27] && (objExec.wObjFlag & 16) == 0 || PlayerXPos[var6] < PlayerXPos[var27] && (objExec.wObjFlag & 16) != 0) {
               var13 = objExec;
               var13.wObjFlag ^= 16;
            }

            if (PlayerYPos[var6] != 15728640 && (PlayerXPos[var6] > PlayerXPos[var27] && objExec.iXSpeed > 0 || PlayerXPos[var6] < PlayerXPos[var27] && objExec.iXSpeed > 0)) {
               objExec.iXSpeed = -objExec.iXSpeed;
            }
         }

         if (PlayerYPos[var6] >= 15728640) {
            PlayerYPos[var6] = 15728640;
         }

         if (GuardCancelTime[var6] != 0) {
            if (AICtrl[var6]) {
               var29 = var32;
               if (tcbNow.iHitStop == 1) {
                  var29 = var32;
                  if (ExtremeObject[var27] == 0) {
                     var29 = var32;
                     if (CPURand[var6] % 100 < this.pGameData.piGameData[this.pGameData.piGameDataPos[3] + this.pGameData.piGameDataXSize[3] * 1 + CPULevel[var6]]) {
                        var29 = 11;
                     }
                  }
               }
            } else {
               if ((objExec.wObjFlag & 16) == 0) {
                  var26 = 520;
               } else {
                  var26 = 132;
               }

               var29 = var32;
               if ((PlayerKey[var6] & var26) != 0) {
                  var29 = var32;
                  if ((JoyTrig[var6] & 16640) != 0) {
                     var29 = 11;
                  }
               }
            }

            var20 = var22;
            if (Synchro[var6] >= 100) {
               label930: {
                  if (var29 != 11 && (JoyTrig[var6] & 16640) == 0) {
                     var20 = var22;
                     if (!this.TapGuradCnacelCheck(var1, var6, objExec.x >> 16, objExec.y >> 16)) {
                        break label930;
                     }
                  }

                  var20 = var22;
                  if (tcbPlayer[0].obj.ano != 310) {
                     var20 = var22;
                     if (tcbPlayer[1].obj.ano != 310) {
                        var20 = var22;
                        if (tcbPlayer[0].obj.ano != 312) {
                           var20 = var22;
                           if (tcbPlayer[1].obj.ano != 312) {
                              var20 = var22;
                              if (iEventStatus == 0) {
                                 this.DamageEnd(var1);
                                 DamageMove[var6] = 0;
                                 tcbNow.md = 911;
                                 tcbNow.lp = 0;
                                 this.Game(var1, tcbNow.md);
                                 break;
                              }
                           }
                        }
                     }
                  }
               }
            }
         } else {
            if ((PlayerXPos[var6] <= PlayerXPos[var27] || (objExec.wObjFlag & 16) != 0) && (PlayerXPos[var6] >= PlayerXPos[var27] || (objExec.wObjFlag & 16) == 0)) {
               if (AICtrl[var6]) {
                  if (PlayerAttack[var27] != 0 || iTCBReqNum[var27] != 0) {
                     break;
                  }
               } else {
                  if (PlayerYPos[var6] == 15728640) {
                     var11 = true;
                  } else {
                     var11 = false;
                  }

                  boolean var12;
                  if (!AirType[var6] && PlayerYPos[var6] != 15728640) {
                     var12 = false;
                  } else {
                     var12 = true;
                  }

                  if (this.CommonNormal(var1, var11, false, var12, false, true)) {
                     break;
                  }
               }
            }

            var20 = true;
         }

         var24 = var20;
         if (tcbNow.iHitStop <= 0) {
            var24 = var20;
            if ((tcbPlayer[var27].iHitFlag & 4) == 0) {
               var24 = var20;
               if (iTCBReqNum[var27] == 0) {
                  var24 = var20;
                  if (DamageMove[var6] == 0) {
                     this.DamageEnd(var1);
                     var24 = true;
                  }
               }
            }
         }

         if (var24 && (PlayerYPos[var6] >= 15728640 || PlayerAir[var6])) {
            if (PlayerYPos[var6] >= 15728640) {
               PlayerAir[var6] = false;
            }

            tcbNow.md = 864;
            tcbNow.lp = 0;
         }
         break;
      case 909:
         var3 = tcbNow._work[0];
         var4 = 1 - var3;
         var36 = tcbNow;
         var36.iHitStop *= 2;
         iReqSENo = 10;
         this.PushSE(var1, 10);
         this._TKilx(var1, var3 + 13632, var3 + 13632);
         var36 = this._TaskMake(var1, 965, var3 + 13632);
         var36._work[0] = 398;
         var36._work[3] = PlayerXPos[var3];
         var36._work[4] = PlayerYPos[var3];
         var36._work[5] = 0;
         this._TaskMake(var1, 967, var3 + 13632);
         this.SYNCHRO_DEC(var1, var3, 100);
         if (PlayerXPos[var3] != PlayerXPos[var4]) {
            if (PlayerXPos[var3] < PlayerXPos[var4]) {
               var13 = objExec;
               var13.wObjFlag &= -17;
            } else {
               var13 = objExec;
               var13.wObjFlag |= 16;
            }
         }

         this._SetObj(var1, var3 * 4 + 150);
         PlayerAttack[var3] = 1;
         PlayerHitStop[var3] = 10;
         DamageHitBack[var3] = 0;
         GuardHitBack[var3] = 13;
         CancelTime[var3] = 0;
         DamageHitActNo[1 - var3] = 0;
         PlayerSearch[var3] = false;
         SpecialBulletNumber[var3] = 0;
         tcbNow.iHitStop = 0;
         SpecialKind[var3] = 0;
         BulletAction[var3][0] = 0;
         BulletAction[var3][1] = 0;
         if (PlayerYPos[var3] != 15728640) {
            var29 = 28;
         } else {
            var29 = 27;
         }

         this._SetAct(var1, objExec.acttype, var29);
         this._ActReq(var1);
         this.ChrSePlay(var1, var3);
         tcbNow.md = 910;
         tcbNow.lp = 0;
         var19 = this._TaskMake(var1, 924, 13066);
         var19._work[1] = tcbPlayer[var4].md;
         var19._work[2] = var3;
         var19._work[3] = 10;
         tcbPlayer[var4].md = 925;
         break;
      case 910:
         var2 = tcbNow._work[0];
         this.PlayerTail(var1);
         if (tcbNow.iHitStop <= 0 && ((objExec.wActFlag & 2) != 0 || PlayerYPos[var2] > 15728640)) {
            if (PlayerYPos[var2] > 15728640) {
               PlayerYPos[var2] = 15728640;
            }

            bBlackOut = false;
            this._TKilx(var1, var2 + 13632, var2 + 13632);
            if (PlayerYPos[var2] != 15728640 && !AirType[var2]) {
               this._SetAct(var1, objExec.acttype, 89);
               PlayerSearch[var2] = false;
               tcbNow.md = 886;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 864;
               tcbNow.lp = 0;
            }

            this.Game(var1, tcbNow.md);
         }
         break;
      case 911:
         var2 = tcbNow._work[0];
         var3 = 1 - var2;
         this._TKilx(var1, var2 + 13588, var2 + 13588);
         this._TKilx(var1, var3 + 13588, var3 + 13588);
         var36 = tcbNow;
         var36.iHitStop *= 2;
         this._TKilx(var1, var2 + 13632, var2 + 13632);
         var36 = this._TaskMake(var1, 965, var2 + 13632);
         var36._work[0] = 398;
         var36._work[3] = PlayerXPos[var2];
         var36._work[4] = PlayerYPos[var2];
         var36._work[5] = 0;
         this.SYNCHRO_DEC(var1, var2, 100);
         if (PlayerXPos[var2] != PlayerXPos[var3]) {
            if (PlayerXPos[var2] < PlayerXPos[var3]) {
               var13 = objExec;
               var13.wObjFlag &= -17;
            } else {
               var13 = objExec;
               var13.wObjFlag |= 16;
            }
         }

         this._SetObj(var1, var2 * 4 + 150);
         PlayerAttack[var2] = 1;
         PlayerHitStop[var2] = 10;
         DamageHitBack[var2] = 0;
         GuardHitBack[var2] = 13;
         CancelTime[var2] = 0;
         DamageHitActNo[1 - var2] = 0;
         PlayerSearch[var2] = false;
         SpecialBulletNumber[var2] = 0;
         tcbNow.iHitStop = 0;
         SpecialKind[var2] = 0;
         BulletAction[var2][0] = 0;
         BulletAction[var2][1] = 0;
         this._SetAct(var1, objExec.acttype, 290);
         this._ActReq(var1);
         this.ChrSePlay(var1, var2);
         tcbNow.md = 912;
         tcbNow.lp = 0;
         var19 = this._TaskMake(var1, 924, 13066);
         var19._work[1] = tcbPlayer[var3].md;
         var19._work[2] = var2;
         var19._work[3] = 360;
         tcbPlayer[var3].md = 925;
         break;
      case 912:
         var2 = tcbNow._work[0];
         var3 = 1 - var2;
         this.PlayerTail(var1);
         if ((objExec.wActFlag & 2) != 0) {
            if (PlayerXPos[var2] < PlayerXPos[var3]) {
               PlayerXPos[var2] = PlayerXPos[var3] + 3932160;
               var13 = tcbPlayer[var2].obj;
               var13.wObjFlag |= 16;
            } else {
               PlayerXPos[var2] = PlayerXPos[var3] - 3932160;
               var13 = tcbPlayer[var2].obj;
               var13.wObjFlag &= -17;
            }

            PlayerYPos[var2] = PlayerYPos[var3];
            PlayerOldXPos[var2] = PlayerXPos[var2];
            this._SetAct(var1, objExec.acttype, 292);
            tcbNow.md = 913;
            tcbNow.lp = 0;
         }
         break;
      case 913:
         var2 = tcbNow._work[0];
         var3 = 1 - var2;
         this.PlayerTail(var1);
         if ((objExec.wActFlag & 2) != 0) {
            this._SetAct(var1, objExec.acttype, 294);
            this._ActReq(var1);
            this.ChrSePlay(var1, var2);
            if (PlayerXPos[var2] < PlayerXPos[var3]) {
               var13 = tcbPlayer[var3].obj;
               var13.wObjFlag |= 16;
            } else {
               var13 = tcbPlayer[var3].obj;
               var13.wObjFlag &= -17;
            }

            this.PlayerTail(var1);
            tcbNow.md = 914;
            tcbNow.lp = 0;
         }
         break;
      case 914:
         var2 = tcbNow._work[0];
         this.PlayerTail(var1);
         ComboCount[var2] = 0;
         if (Life[1 - var2] > 0) {
            this._TLoop(var1, 40, 915);
            if (tcbNow.iHitStop > 0) {
            }
         } else if (tcbNow.iHitStop <= 0 && ((objExec.wActFlag & 2) != 0 || PlayerYPos[var2] > 15728640)) {
            if (PlayerYPos[var2] > 15728640) {
               PlayerYPos[var2] = 15728640;
            }

            bBlackOut = false;
            this._TKilx(var1, var2 + 13632, var2 + 13632);
            if (PlayerYPos[var2] != 15728640 && !AirType[var2]) {
               this._SetAct(var1, objExec.acttype, 89);
               PlayerSearch[var2] = false;
               tcbNow.md = 886;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 864;
               tcbNow.lp = 0;
            }

            this.Game(var1, tcbNow.md);
         }
         break;
      case 915:
         var2 = tcbNow._work[0];
         var3 = 1 - var2;
         if (this.GetCardAddAtack(var1, var2) <= 0) {
         }

         ComboCount[var2] = 0;
         this._TKilx(var1, 12624, 12644);
         var19 = this._TaskMake(var1, 456, 12624);
         if (PlayerXPos[var2] < PlayerXPos[var3]) {
            var19._work[0] = 1;
         } else {
            var19._work[0] = 0;
         }

         var19._work[1] = var2;
         var19._work[2] = var3;
         var3 = (PlayerYPos[var3] >> 16) * 100 / 260;
         var2 = var3;
         if (var3 < 0) {
            var2 = 0;
         }

         var19._work[3] = 150 - var2;
         var19._work[20] = 0;
         var19._work[21] = 0;
         iEventStatus |= 1025;
         iMarkVisible = 1;
         break;
      case 916:
         var2 = tcbNow._work[0];
         this._SetAct(var1, objExec.acttype, 16);
         this._SetObj(var1, 130);
         var13 = objExec;
         var13.wActFlag |= 4;
         if (!bStartAction[var2]) {
            this.PlayerTail(var1);
         } else {
            this._SetAct(var1, objExec.acttype, 14);
            this._SetObj(var1, 130);
            var13 = objExec;
            var13.wActFlag |= 4;
            tcbNow.md = 917;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 917:
         if (iBackYScroll != 0) {
            var13 = objExec;
            var13.wActFlag |= 4;
            this.PlayerTail(var1);
         } else {
            var13 = objExec;
            var13.wActFlag &= -5;
            this.PlayerTail(var1);
            if (iFade == 255 || iFade == 0) {
               this._TLoop(var1, 40, 864);
            }
         }
         break;
      case 918:
         var2 = tcbNow._work[0];
         if ((objExec.wObjFlag & 4) == 0 && iBackXPos + iBackXOffset == PlayerXPos[var2] - 15728640) {
            this._SetAct(var1, objExec.acttype, 15);
         }

         this.PlayerTail(var1);
         break;
      case 920:
         this._SetAct(var1, objExec.acttype, 20);
         this.PlayerTail(var1);
         break;
      case 921:
         var2 = tcbNow._work[0];
         var3 = 1 - var2;
         if (PlayerXPos[var2] != PlayerXPos[var3]) {
            if (PlayerXPos[var2] > PlayerXPos[var3]) {
               var13 = objExec;
               var13.wObjFlag |= 16;
            } else {
               var13 = objExec;
               var13.wObjFlag &= -17;
            }
         }

         this.StartPlayerAttack(var1);
         var36 = this._TaskMake(var1, 924, 13066);
         var36._work[1] = tcbPlayer[var3].md;
         var36._work[2] = var2;
         var36._work[3] = 10;
         PlayerAttack[var2] = 1;
         tcbNow.md = 922;
         tcbNow.lp = 0;
         tcbNow._work[20] = tcbPlayer[var3].md;
         tcbPlayer[var3].md = 925;
         this.PlayerTail(var1);
         break;
      case 922:
         var2 = tcbNow._work[0];
         if ((objExec.wActFlag & 2) != 0) {
            PlayerAttack[var2] = 1;
            tcbNow.md = 881;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 923:
         var6 = tcbNow._work[0];
         var5 = 1 - var6;
         short var31 = 4;
         if (SpecialType[var6] != 11 && SpecialType[var6] != 12) {
            var26 = 100;
         } else {
            var26 = 200;
            var31 = 399;
         }

         if (SpecialType[var6] != 11 && SpecialType[var6] != 12) {
            label622: {
               if (SynchroPowerUp[var6] != 3) {
                  var2 = var26;
                  if (SynchroPowerUp[var6] != 5) {
                     break label622;
                  }
               }

               var2 = var26 / 2;
            }
         } else {
            label1084: {
               if (SynchroPowerUp[var6] != 4) {
                  var2 = var26;
                  if (SynchroPowerUp[var6] != 5) {
                     break label1084;
                  }
               }

               var2 = var26 / 2;
            }
         }

         var3 = var2;
         if ((iBackMode & 1 << var6) != 0) {
            var3 = var2 + 100;
         }

         this.SYNCHRO_DEC(var1, var6, var3);
         if (PlayerXPos[var6] != PlayerXPos[var5]) {
            if (PlayerXPos[var6] > PlayerXPos[var5]) {
               var13 = objExec;
               var13.wObjFlag |= 16;
            } else {
               var13 = objExec;
               var13.wObjFlag &= -17;
            }
         }

         iReqSENo = 10;
         this.PushSE(var1, 10);
         this._TKilx(var1, var6 + 13640, var6 + 13640);
         this.StartPlayerAttack(var1);
         this._TKilx(var1, var6 + 13588, var6 + 13588);
         iBackMode |= 1 << var6;
         var36 = this._TaskMake(var1, 965, var6 + 13588);
         var36._work[0] = var31;
         var36._work[3] = PlayerXPos[var6];
         var36._work[4] = PlayerYPos[var6];
         var36._work[5] = 0;
         var36 = this._TaskMake(var1, 924, 13066);
         var36._work[1] = tcbPlayer[var5].md;
         var36._work[2] = var6;
         var36._work[3] = 10;
         _cameraPrio = 1;
         var36 = this._TaskMake(var1, 974, var6 + 13632);
         var36._work[0] = var6;
         var36._work[1] = objExec.wObjFlag & 16;
         tcbNow.md = 926;
         tcbNow.lp = 0;
         iCameraLock = var6;
         tcbNow._work[20] = tcbPlayer[var5].md;
         tcbPlayer[var5].md = 925;
         this.PlayerTail(var1);
         break;
      case 924:
         var3 = tcbNow._work[2];
         var2 = 1 - var3;
         var3 = tcbPlayer[var3].md;
         if (tcbPlayer[var2].md == 925) {
            if (var3 == 923 || var3 == 926 || var3 == 927 || var3 == 928 || var3 == 929 || var3 == 930 || var3 == 911 || var3 == 910 || var3 == 912 || var3 == 913 || var3 == 914 || var3 == 915 || var3 == 921 || var3 == 922) {
               break;
            }

            if (tcbNow._work[3] != 0) {
               var16 = tcbNow._work;
               var10002 = var16[3]--;
               break;
            }

            tcbPlayer[var2].md = tcbNow._work[1];
         }

         this._TKill(var1);
         break;
      case 925:
         var2 = tcbNow._work[0];
         this.PlayerTail(var1);
         this._SetObj(var1, 130 - var2 * 4);
         objExec.iXZoomObj = iZoomBase;
         objExec.iYZoomObj = iZoomBase;
         break;
      case 926:
         var2 = tcbNow._work[0];
         _cameraPrio = 1;
         PlayerKey[1 - var2] = 0;
         this._TLoop(var1, 120, 927);
         break;
      case 927:
         var2 = tcbNow._work[0];
         _cameraPrio = 0;
         iCameraLock = -1;
         this._TKilx(var1, var2 + 13632, var2 + 13632);
         tcbNow.md = 928;
         tcbNow.lp = 0;
         break;
      case 928:
         var2 = tcbNow._work[0];
         PlayerAttack[var2] = 1;
         tcbNow.md = 881;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 929:
         var2 = tcbNow._work[0];
         var3 = 1 - var2;
         var19 = this._TaskMake(var1, 924, 13066);
         var19._work[1] = tcbPlayer[var3].md;
         var19._work[2] = var2;
         var19._work[3] = 10;
         tcbPlayer[var3].md = 925;
         tcbNow.md = 930;
         tcbNow.lp = 0;
         break;
      case 930:
         this._TLoop(var1, 3, 931);
         break;
      case 931:
         var3 = tcbNow._work[0];
         if (SpecialType[var3] != 18 && SpecialType[var3] != 19) {
            tcbNow.md = 880;
            tcbNow.lp = 0;
         } else {
            this.SYNCHRO_DEC(var1, var3, 100);
            var33 = tcbNow._work;
            if (SpecialType[var3] == 18) {
               var29 = 4;
            } else {
               var29 = 8;
            }

            var33[10] = var29;
            this._SetAct(var1, objExec.acttype, 87);
            SpecialType[var3] = 0;
            tcbNow.md = 865;
            tcbNow.lp = 0;
         }

         this.Game(var1, tcbNow.md);
         break;
      case 932:
         var2 = tcbNow._work[0];
         var13 = objExec;
         var13.wObjFlag &= -2;
         var13 = objExec;
         var13.wObjFlag &= -17;
         PlayerXPos[var2] = iBackXPos + (this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 3] / 2 << 16);
         tcbNow.md = 934;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 933:
         var2 = tcbNow._work[0];
         var13 = objExec;
         var13.wObjFlag &= -2;
         var13 = objExec;
         var13.wObjFlag |= 16;
         PlayerXPos[var2] = 31391744 - (this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 3] / 2 << 16) + iBackXPos;
         tcbNow.md = 934;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 934:
         var3 = tcbNow._work[0];
         var13 = objExec;
         var13.wObjFlag &= -2;
         this.DamageEnd(var1);
         if ((PlayerKey[var3] & 33) == 0 && PlayerYPos[var3] == 15728640) {
            var29 = 74;
            tcbNow.md = 894;
            tcbNow.lp = 0;
         } else {
            var29 = 75;
            PlayerSearch[var3] = false;
            tcbNow.md = 886;
            tcbNow.lp = 0;
         }

         this._SetAct(var1, objExec.acttype, var29);
         this.Game(var1, tcbNow.md);
         break;
      case 935:
         var22 = false;
         var20 = false;
         boolean[] var14 = new boolean[2];
         boolean[] var35 = new boolean[2];
         if (bGameStart) {
            for(var2 = 0; var2 <= 1; ++var2) {
               ScreenEdgeOff[var2] = false;
               ScrollCheckOff[var2] = false;
            }

            bForceWall = false;
            iScrollTarget = -1;
            bEffectFullScreen = false;
            iCPUDist = Math.abs((PlayerXPos[0] >> 16) - (PlayerXPos[1] >> 16));
            if (iBackShake != 0) {
               --iBackShake;
            }

            var2 = 0;

            while(true) {
               if (var2 > 1) {
                  TCB var15;
                  if (iFocusTarget != -1 && tcbPlayer[0].md != 994 && tcbPlayer[0].md != 925 && tcbPlayer[1].md != 994 && tcbPlayer[1].md != 925) {
                     for(var2 = 0; var2 <= 1; ++var2) {
                        if (iFocusTarget != var2) {
                           tcbPlayer[var2].md = 925;
                        } else {
                           var15 = this._TaskMake(var1, 995, 13066);
                           var15._work[0] = var2;
                           var15._work[1] = tcbPlayer[0].md;
                           var15._work[2] = tcbPlayer[1].md;
                           var15._work[3] = 0;
                           tcbPlayer[var2].md = 994;
                        }
                     }
                  }

                  for(var2 = 0; var2 <= 1; ++var2) {
                     var14[var2] = false;
                     var35[var2] = false;
                     if (tcbPlayer[var2].iHitStop != 0) {
                        var15 = tcbPlayer[var2];
                        --var15.iHitStop;
                     }
                  }

                  var6 = 0;

                  boolean var7;
                  int var9;
                  int var28;
                  for(var24 = var22; var6 <= 1; var20 = var7) {
                     byte var23 = 0;
                     boolean var8 = var24;
                     var7 = var20;
                     boolean var25;
                     if (tcbPlayer[var6].iHitCount != 0) {
                        var8 = var24;
                        var7 = var20;
                        if (Life[var6] > 0) {
                           var8 = var24;
                           var7 = var20;
                           if (Life[1 - var6] > 0) {
                              var5 = tcbPlayer[var6].obj.ano;
                              if ((PlayerState[var6] & 1048576) != 0) {
                                 this.SelfDamage(var1, var6, tcbPlayer[var6].obj.OptData[0], tcbPlayer[var6].obj.OptData[1]);
                                 tcbPlayer[var6].iHitCount = 0;
                                 var27 = var23;
                              } else {
                                 var27 = var23;
                                 if (var5 != 27) {
                                    var27 = var23;
                                    if (var5 != 28) {
                                       var5 = tcbPlayer[1 - var6].obj.ano;
                                       var27 = var23;
                                       if (var5 != 27) {
                                          var27 = var23;
                                          if (var5 != 28) {
                                             var27 = this.CheckObjHit(var1, tcbPlayer[var6].obj, tcbPlayer[1 - var6].obj, true);
                                          }
                                       }
                                    }
                                 }
                              }

                              var25 = var24;
                              var22 = var20;
                              if (var27 != 0) {
                                 var27 = tcbPlayer[var6].obj.ano;
                                 var28 = tcbPlayer[1 - var6].obj.ano;
                                 if ((SpecialKind[var6] & 2) == 0 && (SpecialKind[1 - var6] & 2) == 0) {
                                    var25 = var24;
                                    var22 = var20;
                                    if ((tcbPlayer[var6].obj.wObjFlag & 16) != (tcbPlayer[1 - var6].obj.wObjFlag & 16)) {
                                       var25 = var24;
                                       var22 = var20;
                                       if (iTimer > 0) {
                                          label1078: {
                                             if (var27 < 40 || var28 < 40) {
                                                var25 = var24;
                                                var22 = var20;
                                                if (var27 >= 40) {
                                                   break label1078;
                                                }

                                                var25 = var24;
                                                var22 = var20;
                                                if (var28 >= 40) {
                                                   break label1078;
                                                }
                                             }

                                             var14[0] = false;
                                             var14[1] = false;

                                             for(var4 = 0; var4 <= 1; ++var4) {
                                                tcbPlayer[var4].iHitStop = PlayerHitStop[var4];
                                                tcbPlayer[var4].iHitCount = 0;
                                                HitTarget[var4] = 0;
                                             }

                                             if (tcbPlayer[var6].md >= 911) {
                                                var25 = var24;
                                                var22 = var20;
                                                if (tcbPlayer[var6].md <= 915) {
                                                   break label1078;
                                                }
                                             }

                                             if (tcbPlayer[1 - var6].md >= 911) {
                                                var25 = var24;
                                                var22 = var20;
                                                if (tcbPlayer[1 - var6].md <= 915) {
                                                   break label1078;
                                                }
                                             }

                                             var25 = true;
                                             var22 = var20;
                                          }
                                       }
                                    }
                                 } else {
                                    if ((SpecialKind[var6] & 2) != 0) {
                                       var35[var6] = true;
                                    }

                                    var22 = true;
                                    var25 = var24;
                                 }
                              }

                              var8 = var25;
                              var7 = var22;
                              if ((tcbPlayer[1 - var6].obj.wObjFlag & 8) == 0) {
                                 var8 = var25;
                                 var7 = var22;
                                 if ((SpecialKind[var6] & 2) == 0) {
                                    var8 = var25;
                                    var7 = var22;
                                    if (!var22) {
                                       var8 = var25;
                                       var7 = var22;
                                       if (!var25) {
                                          var8 = var25;
                                          var7 = var22;
                                          if (this.CheckObjHit(var1, tcbPlayer[var6].obj, tcbPlayer[1 - var6].obj, false) != 0) {
                                             var14[1 - var6] = true;
                                             var7 = var22;
                                             var8 = var25;
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }

                     for(var2 = 0; var2 < iTCBReqNum[var6]; ++var2) {
                        if (tcbReqHit[var6 * 16 + var2].iHitStop != 0) {
                           var15 = tcbReqHit[var6 * 16 + var2];
                           --var15.iHitStop;
                        }
                     }

                     if ((tcbPlayer[var6].obj.wObjFlag & 8) == 0 && (tcbPlayer[1 - var6].obj.wObjFlag & 8) == 0 && !var7 && !var8) {
                        for(var3 = 0; var3 < iTCBReqNum[var6]; ++var3) {
                           if (tcbReqHit[var6 * 16 + var3] != null && tcbReqHit[var6 * 16 + var3].iHitCount != 0 && tcbReqHit[var6 * 16 + var3].obj != null) {
                              var25 = false;
                              int var10 = 1 - var6;
                              var9 = tcbPlayer[var10].obj.ano;
                              var2 = 0;
                              var22 = var25;
                              if (var9 >= 40) {
                                 var9 = this.CheckObjHit(var1, tcbReqHit[var6 * 16 + var3].obj, tcbPlayer[var10].obj, true);
                                 var22 = var25;
                                 var2 = var9;
                                 if (var9 != 0) {
                                    var22 = var25;
                                    var2 = var9;
                                    if (tcbPlayer[var10].obj.OptData[0] % 50 != 0) {
                                       var22 = true;
                                       var2 = var9;
                                    }
                                 }
                              }

                              if (!var22) {
                                 var2 = this.CheckObjHit(var1, tcbReqHit[var6 * 16 + var3].obj, tcbPlayer[var10].obj, false);
                              }

                              if (var2 != 0) {
                                 var2 = tcbReqHit[var6 * 16 + var3].obj.OptData[1];
                                 var5 = var2 / 50;
                                 var15 = tcbPlayer[var6];
                                 var15.wFlag |= 1;
                                 var15 = tcbReqHit[var6 * 16 + var3];
                                 var15.wFlag |= 1;
                                 tcbReqHit[var6 * 16 + var3].iHitCount = 0;
                                 tcbPlayer[var10].iHitCount = 0;
                                 if (var5 != 4) {
                                    tcbReqHit[var6 * 16 + var3].iHitStop = PlayerHitStop[var6] / 2;
                                    tcbPlayer[var10].iHitStop = PlayerHitStop[var6];
                                 }

                                 HitTarget[var10] = 1;
                                 if (!var22) {
                                    this.DamageChange(var1, var6, var10, true, false, tcbReqHit[var6 * 16 + var3].obj.ano, tcbReqHit[var6 * 16 + var3].obj.OptData[0], var2, tcbReqHit[var6 * 16 + var3].obj.wOptFlag);
                                    ThrowDamage[var10] = false;
                                    DamageHitSpecialType[var10] = tcbReqHit[var6 * 16 + var3]._work[11];
                                 }
                              }

                              for(var2 = 0; var2 < iTCBReqNum[1 - var6]; ++var2) {
                                 if (tcbReqHit[(1 - var6) * 16 + var2] != null && tcbReqHit[(1 - var6) * 16 + var2].obj != null && this.CheckObjHit(var1, tcbReqHit[var6 * 16 + var3].obj, tcbReqHit[(1 - var6) * 16 + var2].obj, true) != 0) {
                                    var15 = tcbReqHit[var6 * 16 + var3];
                                    var15.wFlag |= 1;
                                    var15 = tcbReqHit[(1 - var6) * 16 + var2];
                                    var15.wFlag |= 1;
                                    tcbReqHit[var6 * 16 + var3].iHitCount = 0;
                                    tcbReqHit[(1 - var6) * 16 + var2].iHitCount = 0;
                                    tcbReqHit[var6 * 16 + var3].iHitStop = PlayerHitStop[var6];
                                    tcbReqHit[(1 - var6) * 16 + var2].iHitStop = PlayerHitStop[var6];
                                    iReqSENo = 9;
                                    this.PushSE(var1, 9);
                                    break;
                                 }
                              }
                           }
                        }
                     }

                     iTCBReqNum[var6] = 0;
                     ++var6;
                     var24 = var8;
                  }

                  for(var4 = 0; var4 <= 1; ++var4) {
                     var28 = 1 - var4;
                     if (var14[var4] && !var35[var28]) {
                        if (var14[var28]) {
                           var5 = 0;
                        } else {
                           var5 = tcbPlayer[var28].obj.OptData[1] & 255;
                        }

                        var9 = var5 / 50;
                        this.DamageChange(var1, var28, var4, true, true, tcbPlayer[var28].obj.ano, tcbPlayer[var28].obj.OptData[0], var5, tcbPlayer[var28].obj.wOptFlag);
                        ThrowDamage[var4] = false;
                        var15 = tcbPlayer[var28];
                        var15.wFlag |= 1;

                        for(var5 = 0; var5 <= 1; ++var5) {
                           var27 = PlayerHitStop[var28];
                           var6 = var27;
                           if (var9 == 3) {
                              var6 = var27 / 2;
                           }

                           if (var9 != 4) {
                              tcbPlayer[var5].iHitStop = var6;
                           }

                           tcbPlayer[var5].iHitCount = 0;
                           HitTarget[var5] = 0;
                        }
                     }
                  }

                  if (var20) {
                     for(var3 = 0; var3 <= 1; ++var3) {
                        tcbPlayer[var3].iHitStop = PlayerHitStop[var3];
                        tcbPlayer[var3].iHitCount = 0;
                        HitTarget[var3] = 0;
                        var6 = 1 - var3;
                        if (var35[var3]) {
                           TCB var34 = tcbPlayer[var3];
                           var34.wFlag |= 1;
                           if (var6 == iPlayerNo && ConfigData[3] == 0) {
                              iVibration = 10;
                           }

                           var4 = this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[3] + this.ChrGameData[var3 + 3].piGameDataXSize[3] * 0 + 13];
                           short var30;
                           if (var4 >= 30) {
                              var4 -= 30;
                              var30 = 877;
                           } else {
                              var30 = 876;
                           }

                           ThrowDamage[var6] = false;
                           DamageTime[var6] = 0;
                           DamageType[var6] = var4;
                           DamageIndex[var6] = 0;
                           DamageOldIndex[var6] = 0;
                           DamageOldType[var6] = var4;
                           DamageHitActNo[var6] = tcbPlayer[var3].obj.ano;
                           tcbPlayer[var6].md = var30;
                        }
                     }

                     var36 = this._TaskMake(var1, 965, 13598);
                     var36._work[0] = 69;
                     var36._work[3] = iBackXPos + iHitXPos;
                     var36._work[4] = iBackYPos + iHitYPos;
                     var36._work[5] = 0;
                     iReqSENo = 9;
                     this.PushSE(var1, 9);
                  }

                  if (var24) {
                     var2 = iPlayerNo;
                     iEventStatus |= 513;
                     var36 = this._TaskMake(var1, 965, 13598);
                     var36._work[0] = 3;
                     var36._work[3] = iBackXPos + iHitXPos;
                     var36._work[4] = iBackYPos + iHitYPos;
                     var36._work[5] = 0;
                     iReqSENo = 9;
                     this.PushSE(var1, 9);
                  }
                  break;
               }

               var5 = tcbPlayer[var2].md;
               if (var5 == 923 || var5 == 926 || var5 == 927 || var5 == 928 || var5 == 911) {
                  iTCBReqNum[0] = 0;
                  iTCBReqNum[1] = 0;
                  break;
               }

               ++var2;
            }
         }
         break;
      case 936:
         var3 = tcbNow._work[0];
         if ((PlayerState[var3] & 16777216) != 0) {
            var17 = objExec;
            var17.wObjFlag |= 1;
         } else {
            this._SetAct(var1, 5, 15);
            this._SetObj(var1, 17);
            this._ActReq(var1);
            var13 = objExec;
            var13.wObjFlag &= -18;
            var13 = objExec;
            var13.wObjFlag |= tcbPlayer[var3].obj.wObjFlag & 17 | 256;
            objExec.iAlpha = 128;
            objExec.iXZoomObj = iZoomBase;
            objExec.iYZoomObj = iZoomBase;
            this._SetXY(var1, tcbPlayer[var3].obj.x, 16252928 - iBackYPos);
            if (iZoomBase != 100) {
               var2 = iBackYPos;
               var4 = iZoomYCenter;
               this._SetXY(var1, tcbPlayer[var3].obj.x, 10485760 + ((16252928 - var2 - var4 >> 16) * iZoomBase / 100 << 16));
            }
         }
         break;
      case 938:
         var2 = tcbNow._work[0];
         var3 = 1 - var2;
         if (tcbPlayer[var2] != null && tcbPlayer[var2].obj != null) {
            if (iPlayMode == 8) {
               if (var2 == 0) {
                  this._SetAct(var1, 5, 101);
               } else {
                  this._SetAct(var1, 5, 100);
               }
            } else {
               this._SetAct(var1, 5, 102);
            }

            this._SetObj(var1, tcbPlayer[var3].obj.prio - tcbPlayer[var3].obj.iActPrio + 3);
            if ((PlayerState[var2] & 16777216) == 0 && iMarkVisible != 1 && tcbPlayer[var3].obj.ano != 28) {
               this._ActReq(var1);
               var13 = objExec;
               var13.wObjFlag |= tcbPlayer[var2].obj.wObjFlag & 17 | 256;
               var13 = objExec;
               var13.wObjFlag &= -18;
               objExec.iAlpha = 128;
               objExec.iXZoomObj = iZoomBase;
               objExec.iYZoomObj = iZoomBase;
               this._SetXY(var1, tcbPlayer[var2].obj.x, tcbPlayer[var2].obj.y - 7864320);
            } else {
               var17 = objExec;
               var17.wObjFlag |= 1;
            }
         }
         break;
      case 939:
         this._SetAct(var1, 0, 0);
         this._SetObj(var1, 131);
         var17 = objExec;
         var17.wObjFlag |= 1;
         tcbNow.md = 940;
         tcbNow.lp = 0;
         break;
      case 940:
         var3 = tcbNow._work[0];
         var2 = 1 - var3;
         var5 = DamageHitActNo[var3];
         var4 = tcbPlayer[var3].md;
         var13 = objExec;
         var13.wObjFlag |= 1;
         if ((PlayerState[var3] & 16777216) == 0) {
            tcbNow._work[10] = 0;
            tcbNow._work[9] = DamageHitSpecialType[var3];
            if ((var4 == 876 || var4 == 877 || var5 == 0) && var5 >= 40 && var5 <= 62) {
               short var21 = (short)(this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[4] + DamageHitSpecialType[var3] * 2 * this.ChrGameData[var2 + 3].piGameDataXSize[4] + 24 + 1] << 8 & '\uff00' | this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[4] + DamageHitSpecialType[var3] * 2 * this.ChrGameData[var2 + 3].piGameDataXSize[4] + 24]);
               if (var21 != 0) {
                  this._SetAct(var1, 0, 0);
                  this._SetAct(var1, var2 + 3, var21);
                  tcbNow._work[4] = tcbPlayer[var3].obj.ano;
                  tcbNow._work[2] = 0;
                  tcbNow._work[3] = 0;
                  tcbNow._work[12] = 0;
                  var13 = objExec;
                  var13.wObjFlag &= -2;
                  tcbNow.md = 941;
                  tcbNow.lp = 0;
                  this.Game(var1, tcbNow.md);
               }
            }
         }
         break;
      case 941:
         var5 = tcbNow._work[0];
         var4 = 1 - var5;
         var3 = tcbPlayer[var5].md;
         short var18 = (short)(this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + DamageHitSpecialType[var5] * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 24 + 1] << 8 & '\uff00' | this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + DamageHitSpecialType[var5] * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 24]);
         if (tcbNow._work[4] != tcbPlayer[var5].obj.ano && DamageHitActNo[var5] < 40) {
            var13 = objExec;
            var13.wObjFlag |= 1;
         } else {
            var13 = objExec;
            var13.wObjFlag &= -2;
         }

         if ((var3 == 876 || var3 == 877 || var3 == 925) && tcbNow._work[9] == DamageHitSpecialType[var5]) {
            if (tcbNow.iHitStop == 0 && tcbPlayer[var4].iHitStop == 0 && tcbPlayer[var4].md != 925 && tcbPlayer[var5].md != 925) {
               var13 = objExec;
               var13.wActFlag &= -5;
            } else {
               this._SetAct(var1, 0, 0);
               this._SetAct(var1, var4 + 3, var18);
               var13 = objExec;
               var13.wActFlag |= 4;
            }

            if (tcbNow._work[12] == 0) {
               var33 = tcbNow._work;
               var10002 = var33[12]++;
               this._SetAct(var1, 0, 0);
               this._SetAct(var1, var4 + 3, var18);
               var13 = objExec;
               var13.wActFlag |= 4;
            }

            this._SetXY(var1, tcbPlayer[var5].obj.x, tcbPlayer[var5].obj.y);
            objExec.iXZoomObj = iZoomBase;
            objExec.iYZoomObj = iZoomBase;
            if (var3 != 925) {
               this._ActReq(var1);
               this.ChrSePlay(var1, var5);
            }

            if (iTCBReqNum[var4] < 16) {
               tcbReqHit[var4 * 16 + iTCBReqNum[var4]] = tcbNow;
               var16 = iTCBReqNum;
               var10002 = var16[var4]++;
            }

            if ((objExec.wActFlag & 4) != 0 && (tcbNow.wFlag & 1) != 0 && CancelTime[var4] == 0 && tcbNow._work[10] == 0) {
               tcbNow._work[10] = 1;
               CancelTime[var4] = 20;
            }
         } else {
            this._SetAct(var1, 0, 0);
            tcbNow.md = 940;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
      }

   }

   public void Game7(GlobalWork var1, int var2) {
      int var6;
      int var7;
      int var8;
      TCB var15;
      int[] var17;
      int var10002;
      short var18;
      int var20;
      short var21;
      int var22;
      int var23;
      short var24;
      boolean var25;
      int var27;
      int[] var30;
      ObjReq var32;
      switch(var2) {
      case 0:
      case 943:
      case 944:
      case 945:
      case 975:
      default:
         break;
      case 946:
         var20 = tcbNow._work[0];
         var23 = 1 - var20;
         if (bGameStart && iBackXOffset == 0 && iEventStatus == 0) {
            var22 = Joy[var20];
            if (tcbNow._work[2] > 0) {
               var30 = tcbNow._work;
               var10002 = var30[2]--;
               if (tcbNow._work[2] == 0) {
                  var2 = tcbNow._work[3];
                  var30 = JoyTrig;
                  var30[var20] |= var2;
               } else {
                  var2 = var22 & -569376769;
               }
            } else {
               var2 = var22;
               if ((JoyTrig[var20] & 569376768) != 0) {
                  var2 = var22;
                  if (CancelTime[var20] != 0) {
                     var2 = var22;
                     if (tcbNow._work[2] == 0) {
                        tcbNow._work[2] = 8;
                        tcbNow._work[3] = JoyTrig[var20];
                        var2 = var22 & -569376769;
                     }
                  }
               }
            }

            if (iControlType[var20] == 2) {
               PlayerKey[var20] = 0;
               Dash[var20] = 0;
               if (tcbPlayer[var20].md != 876 && tcbPlayer[var20].md != 877 && tcbPlayer[var20].md != 925 && tcbPlayer[var20].md != 924 && (tcbPlayer[var20].md < 911 || tcbPlayer[var20].md > 915)) {
                  var25 = false;
                  if (tcbPlayer[var20].md == 923 || tcbPlayer[var20].md == 926 || tcbPlayer[var20].md == 927) {
                     var25 = true;
                  }

                  JoyTrig[var20] = 0;
                  if (TouchesCommand[var20] != 2) {
                     TameCnt[var20] = 0;
                  }

                  TCB var19;
                  switch(TouchesCommand[var20]) {
                  case 1:
                     if (!var25) {
                        this._TKilx(var1, var20 + 13184 + 2, var20 + 13184 + 2);
                        CPULevel[var20] = 7;
                        var19 = this._TaskMake(var1, 947, var20 + 13184 + 2);
                        var19._work[0] = var20;
                        var19._work[1] = var23;
                        var19._work[2] = 0;
                        var19._work[3] = 0;
                        var19._work[4] = 3;
                        var19._work[5] = _commandButton[var20];
                        AICtrl[var20] = true;
                     }
                     break;
                  case 2:
                     var17 = PlayerKey;
                     var17[var20] |= 256;
                     var17 = TameCnt;
                     var10002 = var17[var20]++;
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  default:
                     break;
                  case 8:
                     if (!var25) {
                        tcbPlayer[var20].md = 980;
                     }
                     break;
                  case 9:
                     if (!var25) {
                        var19 = tcbPlayer[var20];
                        if ((tcbPlayer[var20].obj.wObjFlag & 16) == 0) {
                           var21 = 983;
                        } else {
                           var21 = 982;
                        }

                        var19.md = var21;
                     }
                     break;
                  case 10:
                     if (!var25) {
                        var19 = tcbPlayer[var20];
                        if ((tcbPlayer[var20].obj.wObjFlag & 16) != 0) {
                           var21 = 983;
                        } else {
                           var21 = 982;
                        }

                        var19.md = var21;
                     }
                     break;
                  case 11:
                     if (!var25) {
                        tcbPlayer[var20].md = 981;
                     }
                     break;
                  case 12:
                     if (!var25) {
                        var17 = PlayerKey;
                        var17[var20] |= 5;
                     }
                     break;
                  case 13:
                     if (!var25) {
                        var17 = PlayerKey;
                        var17[var20] |= 9;
                     }
                     break;
                  case 14:
                     if (!var25) {
                        var17 = PlayerKey;
                        var17[var20] |= 1;
                     }
                     break;
                  case 15:
                     if (!var25) {
                        var19 = tcbPlayer[var20];
                        if ((tcbPlayer[var20].obj.wObjFlag & 16) == 0) {
                           var21 = 983;
                        } else {
                           var21 = 982;
                        }

                        var19.md = var21;
                     }
                     break;
                  case 16:
                     if (!var25) {
                        var19 = tcbPlayer[var20];
                        if ((tcbPlayer[var20].obj.wObjFlag & 16) != 0) {
                           var21 = 983;
                        } else {
                           var21 = 982;
                        }

                        var19.md = var21;
                     }
                     break;
                  case 17:
                     if ((tcbPlayer[var20].md < 911 || tcbPlayer[var20].md > 915) && !var25) {
                        PlayerWarpXPos[var20] = TouchesVal1[var20];
                        PlayerWarpYPos[var20] = TouchesVal2[var20];
                        if (PlayerWarpYPos[var20] >= 15728640) {
                           PlayerWarpYPos[var20] = 15728640;
                           PlayerAir[var20] = false;
                        } else {
                           PlayerAir[var20] = true;
                        }

                        tcbPlayer[var20].md = 867;
                     }
                     break;
                  case 18:
                     this._TKilx(var1, var20 + 13184 + 2, var20 + 13184 + 2);
                     CPULevel[var20] = 7;
                     var19 = this._TaskMake(var1, 947, var20 + 13184 + 2);
                     var19._work[0] = var20;
                     var19._work[1] = var23;
                     var19._work[2] = 0;
                     var19._work[3] = 0;
                     var19._work[4] = 3;
                     var19._work[5] = _commandButton[var20];
                     AICtrl[var20] = true;
                  }
               }
            } else {
               PlayerKey[var20] = var2;
               var2 &= -16641;
               if (var2 == 0) {
                  if ((PlayerKey[var20] & 16640) != 0) {
                     if (PlayerAttack[var20] == 0) {
                        var30 = TameCnt;
                        var10002 = var30[var20]++;
                     } else {
                        TameCnt[var20] = 0;
                     }
                  } else {
                     TameCnt[var20] = 0;
                  }

                  var30 = Footwork;
                  var10002 = var30[var20]++;
                  if (Footwork[var20] > 60 || (KeyBuf[var20][0] & 1072693248) != 0) {
                     this.CmdClear(var1, var20);
                     Footwork[var20] = 0;
                  }
               } else {
                  if ((KeyBuf[var20][0] & var2) != 0 && Footwork[var20] <= 3) {
                     var17 = KeyBufTime[var20];
                     var10002 = var17[0]++;
                  } else {
                     KeyBuf[var20][3] = KeyBuf[var20][2];
                     KeyBuf[var20][2] = KeyBuf[var20][1];
                     KeyBuf[var20][1] = KeyBuf[var20][0];
                     KeyBuf[var20][0] = var2;
                     KeyBufTime[var20][3] = KeyBufTime[var20][2];
                     KeyBufTime[var20][2] = KeyBufTime[var20][1];
                     KeyBufTime[var20][1] = KeyBufTime[var20][0];
                     KeyBufTime[var20][0] = 0;
                  }

                  TameCnt[var20] = 0;
                  Footwork[var20] = 0;
               }

               if (JoyTrig[var20] != 8 && JoyTrig[var20] != 512) {
                  if (JoyTrig[var20] != 4 && JoyTrig[var20] != 128) {
                     if ((PlayerKey[var20] & 2083) != 0) {
                        Dash[var20] = 0;
                     }
                  } else {
                     if (Dash[var20] > 0) {
                        Dash[var20] = 0;
                     }

                     var17 = Dash;
                     var10002 = var17[var20]--;
                  }
               } else {
                  if (Dash[var20] < 0) {
                     Dash[var20] = 0;
                  }

                  var17 = Dash;
                  var10002 = var17[var20]++;
               }
            }
         }
         break;
      case 947:
         var2 = tcbNow._work[0];
         tcbPlayer[var2].md = 864;
         CPUCount[var2] = 0;
         CPUIndex[var2] = 0;
         CPUGuard[var2] = 0;
         CPUGuardTime[var2] = 0;
         CancelTime[var2] = 0;
         tcbNow._work[8] = 0;
         tcbNow.md = 948;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 948:
         var22 = tcbNow._work[5];
         var2 = tcbNow._work[0];
         var20 = 1 - var2;
         PlayerKey[var2] = 0;
         JoyTrig[var2] = 0;
         if (tcbPlayer[var20].md != 925 && tcbPlayer[var2].md != 925 && tcbPlayer[var20].obj.ano != 25) {
            if (iPlayMode != 8 && var2 == 1 && iTCBReqNum[var20] != 0) {
               Math.abs(tcbPlayer[var2].obj.x - tcbReqHit[var20 * 16 + 0].obj.x);
            }

            CPUSeqNo[var2] = 0;
            if (var22 > 0 && var22 < 500) {
               CPUSeqNo[var2] = var22;
            }

            if (var22 == 200) {
               CPUSeqNo[var2] = 55;
            } else if (var22 == 201) {
               CPUSeqNo[var2] = 7;
            }

            tcbNow._work[7] = 3;
            int var10000 = CPULevel[var2];
            if (PlayerYPos[var2] != 15728640) {
            }

            if (CPUSeqNo[var2] >= this.ChrGameData[var2 + 3].piGameDataYSize[6]) {
               CPUSeqNo[var2] = 0;
            }

            tcbNow.md = 953;
            tcbNow.lp = 0;
         }
         break;
      case 949:
         var2 = tcbNow._work[0];
         CPUCount[var2] = 0;
         CPUIndex[var2] = 0;
         CPUGuard[var2] = 0;
         CPUGuardTime[var2] = 0;
         tcbNow.md = 950;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 950:
         var2 = tcbNow._work[5];
         var2 = tcbNow._work[0];
         PlayerKey[var2] = 0;
         JoyTrig[var2] = 0;
         CPUSeqNo[var2] = 39;
         if (CPUSeqNo[var2] >= this.ChrGameData[var2 + 3].piGameDataYSize[6]) {
            CPUSeqNo[var2] = 0;
         }

         tcbNow.md = 953;
         tcbNow.lp = 0;
         break;
      case 951:
         var2 = tcbNow._work[0];
         CPUCount[var2] = 0;
         CPUIndex[var2] = 0;
         CPUGuard[var2] = 0;
         CPUGuardTime[var2] = 0;
         tcbNow.md = 952;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 952:
         var20 = tcbNow._work[0];
         var23 = 1 - var20;
         short var33 = 480;
         PlayerKey[var20] = 0;
         JoyTrig[var20] = 0;
         var2 = PracticeSetting[2];
         if (bAIStart[var20]) {
            if (iPlayMode == 0 && this.isMission(var1) == 0) {
               if (iStage == 0) {
                  PlayerKey[var20] = 0;
                  JoyTrig[var20] = 0;
                  if (iControlType[iPlayerNo] == 2 && iMissionPross == 4 && Math.abs(tcbPlayer[1].obj.x - tcbPlayer[0].obj.x >> 16) < 320 && tcbPlayer[var23].obj.ano == 0) {
                     CPUSeqNo[var20] = 58;
                     tcbNow.md = 953;
                     tcbNow.lp = 0;
                  }

                  return;
               }

               if (iStage == 3) {
                  PlayerKey[var20] = 0;
                  JoyTrig[var20] = 0;
                  if (iMissionPross == 2) {
                     CPUSeqNo[var20] = 59;
                     tcbNow.md = 953;
                     tcbNow.lp = 0;
                  }

                  return;
               }

               if (iStage <= 2) {
                  CPUIndex[var20] = 4;
                  CPUGuardTime[var20] = 30;
                  tcbNow.md = 960;
                  tcbNow.lp = 0;
                  return;
               }
            }

            if (var2 != 0) {
               if (var2 == 2) {
                  if (!PlayerAir[var20]) {
                     PlayerKey[var20] = 1;
                     if (tcbPlayer[var20].obj.iYSpeed > 0) {
                        JoyTrig[var20] = 1;
                     }
                  }
               } else if (var2 == 3) {
                  PlayerKey[var20] = 1;
               } else {
                  PlayerKey[var20] = 0;
                  JoyTrig[var20] = 0;
               }

               if (PracticeSetting[4] == 1 && tcbPlayer[var20].md == 876) {
                  CPUIndex[var20] = 4;
                  CPUGuardTime[var20] = 30;
                  tcbNow.md = 960;
                  tcbNow.lp = 0;
               }
            } else if (tcbPlayer[var23].md != 925 && tcbPlayer[var20].md != 925) {
               var2 = tcbPlayer[var20].md;
               if (var2 == 872 || var2 == 886 || var2 == 882 || var2 == 925) {
                  var2 = tcbPlayer[var23].md;
                  if (var2 != 889 && var2 != 894 && var2 != 925) {
                     var2 = tcbPlayer[var23].obj.ano;
                     if (var2 != 24 && var2 != 25 && var2 != 23) {
                        var2 = var33;
                        if (var20 == 1) {
                           var2 = var33;
                           if (iTCBReqNum[var23] != 0) {
                              var2 = Math.abs(tcbPlayer[var20].obj.x - tcbReqHit[var23 * 16 + 0].obj.x) >> 16;
                           }
                        }

                        byte var34;
                        if (var2 < iRangeBulletGuard && var20 == 1 && (PlayerState[var23] & 2) == 0 && (PlayerYPos[var23] == 15728640 || PlayerAir[var23]) && CPUGuardTime[var20] == 0) {
                           var34 = 6;
                        } else if (((tcbPlayer[var23].iHitFlag & 4) != 0 || PlayerAttack[var23] != 0) && var20 == 1 && (PlayerState[var23] & 2) == 0 && (PlayerYPos[var23] == 15728640 || PlayerAir[var23]) && CPUGuardTime[var20] == 0) {
                           var34 = 7;
                        } else if (iCPUDist < iDistNear && (PlayerYPos[var23] == 15728640 || PlayerAir[var23]) || iCPUDist < iDistNearAir && (PlayerYPos[var23] != 15728640 || PlayerAir[var23])) {
                           if (PlayerYPos[var23] <= 10485760) {
                              var34 = 8;
                           } else if (PlayerYPos[var23] == 15728640) {
                              var34 = 0;
                           } else {
                              var34 = 3;
                           }
                        } else if (iCPUDist < iDistMiddle && (PlayerYPos[var23] == 15728640 || PlayerAir[var23]) || iCPUDist < iDistMiddleAir && (PlayerYPos[var23] != 15728640 || PlayerAir[var23])) {
                           if (PlayerYPos[var23] <= 10485760) {
                              var34 = 9;
                           } else if (PlayerYPos[var23] == 15728640) {
                              var34 = 1;
                           } else {
                              var34 = 4;
                           }
                        } else if (PlayerYPos[var23] <= 10485760) {
                           var34 = 10;
                        } else if (PlayerYPos[var23] != 15728640) {
                           var34 = 5;
                        } else {
                           var34 = 2;
                        }

                        var23 = var34 * 4;
                        tcbNow._work[7] = var23;
                        var22 = CPULevel[var20];
                        var2 = var22;
                        if (PlayerYPos[var20] != 15728640) {
                           var2 = var22 + 8;
                        }

                        var24 = this.ChrGameData[var20 + 3].piGameData[this.ChrGameData[var20 + 3].piGameDataPos[0] + this.ChrGameData[var20 + 3].piGameDataXSize[0] * 44 + var2];
                        if (var24 <= 0) {
                           tcbNow._work[8] = 0;
                        } else {
                           tcbNow._work[8] = CPURand[var20] % var24;
                        }

                        var22 = CPURand[var20];
                        var18 = this.ChrGameData[var20 + 3].piGameData[this.ChrGameData[var20 + 3].piGameDataPos[0] + this.ChrGameData[var20 + 3].piGameDataXSize[0] * (var23 + var22 % 4) + var2];
                        CPUSeqNo[var20] = var18;
                        if (var20 == 1 && !AngryOn[var20] && Angry[var20] >= 100) {
                           CPUSeqNo[var20] = 55;
                        }

                        if (CPUSeqNo[var20] == 7 && !AngryOn[var20] || CPUSeqNo[var20] == 20 && !AngryOn[var20]) {
                           CPUSeqNo[var20] = 8;
                        }

                        if (iExtOn != 0) {
                           if (iExtCount < 0 && Synchro[var20] >= 100) {
                              iExtCount = 12;
                              CPUSeqNo[var20] = 36;
                           } else {
                              --iExtCount;
                           }
                        }

                        if (CPUSeqNo[var20] >= this.ChrGameData[var20 + 3].piGameDataYSize[6]) {
                           CPUSeqNo[var20] = 8;
                        }

                        tcbNow.md = 953;
                        tcbNow.lp = 0;
                     }
                  }
               }
            }
         }
         break;
      case 953:
         var2 = tcbNow._work[0];
         var22 = tcbPlayer[var2].md;
         JoyTrig[var2] = 0;
         if (iPlayMode == 8 || var2 != 1 || var22 != 876 && var22 != 908) {
            if (tcbNow._work[8] != 0) {
               var17 = tcbNow._work;
               var10002 = var17[8]--;
            } else {
               var24 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[6] + CPUSeqNo[var2] * this.ChrGameData[var2 + 3].piGameDataXSize[6] + CPUIndex[var2] * 2];
               CPUCount[var2] = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[6] + CPUSeqNo[var2] * this.ChrGameData[var2 + 3].piGameDataXSize[6] + CPUIndex[var2] * 2 + 1];
               if (var24 == 0) {
                  CPUIndex[var2] = 4;
                  tcbNow.md = 954;
                  tcbNow.lp = 0;
               } else {
                  var22 = var24 - 1;
                  CPUCommand[var2] = var22;
                  if (CPUCommand[var2] >= 2 && CPUCount[var2] == 0) {
                     CPUCount[var2] = 1;
                  }

                  if (var22 == 24) {
                     tcbNow.md = 959;
                     tcbNow.lp = 0;
                  } else if (var22 == 1) {
                     CPUGuard[var2] = 1;
                     tcbNow.md = 960;
                     tcbNow.lp = 0;
                  } else {
                     tcbNow.md = 955;
                     tcbNow.lp = 0;
                  }
               }

               this.Game(var1, tcbNow.md);
            }
         } else {
            CPUIndex[var2] = 4;
            tcbNow.md = 960;
            tcbNow.lp = 0;
         }
         break;
      case 954:
         var2 = tcbNow._work[0];
         JoyTrig[var2] = 0;
         var22 = this.SeqKey[CPUCommand[var2]][0];
         if (((var22 & 16384) != 0 || var22 == 32768 || var22 == 65536 || var22 == 524288) && this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[6] + CPUSeqNo[var2] * this.ChrGameData[var2 + 3].piGameDataXSize[6] + 9] == 1 && CancelTime[var2] == 0) {
            if (var2 != 0 && iPlayMode != 8) {
               tcbNow.md = 951;
               tcbNow.lp = 0;
            } else {
               AICtrl[var2] = false;
               this._TKill(var1);
            }
         } else {
            var22 = tcbPlayer[var2].md;
            if (var22 != 865 && var22 != 866) {
               PlayerKey[var2] = 0;
               var30 = CPUIndex;
               var10002 = var30[var2]++;
               if (CPUIndex[var2] >= 4) {
                  if (var2 != 0 && iPlayMode != 8) {
                     var24 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[6] + CPUSeqNo[var2] * this.ChrGameData[var2 + 3].piGameDataXSize[6] + 8];
                     if (var24 != 0) {
                        CPUSeqNo[var2] = var24;
                        CPUIndex[var2] = 0;
                        tcbNow.md = 953;
                        tcbNow.lp = 0;
                     } else {
                        tcbNow.md = 951;
                        tcbNow.lp = 0;
                     }

                     this.Game(var1, tcbNow.md);
                  } else {
                     AICtrl[var2] = false;
                     this._TKill(var1);
                  }
               } else {
                  tcbNow.md = 953;
                  tcbNow.lp = 0;
               }
            }
         }
         break;
      case 955:
         var20 = tcbNow._work[0];
         JoyTrig[var20] = 0;
         if (iBackXOffset == 0 && !bEffectFullScreen) {
            var22 = CPUCommand[var20];
            var2 = var22;
            if (var22 >= 30) {
               var2 = 0;
            }

            if ((tcbPlayer[var20].obj.wObjFlag & 16) == 0) {
               PlayerKey[var20] = this.SeqKey[var2][0];
            } else {
               PlayerKey[var20] = this.SeqKey[var2][1];
            }

            JoyTrig[var20] = PlayerKey[var20];
            if (var2 == 19 && Synchro[var20] >= SynchroMax[var20]) {
               tcbNow.md = 954;
               tcbNow.lp = 0;
            } else if (var2 == 0) {
               var2 = tcbNow._work[7];
               var22 = CPUCount[var20];
               if (iPlayMode != 8) {
                  this.Game(var1, 952);
               }

               CPUCount[var20] = var22;
               if (iPlayMode != 8 && var20 == 1 && tcbNow._work[7] != var2) {
                  CPUCount[var20] = 0;
                  CPUIndex[var20] = 0;
                  CPUGuard[var20] = 0;
                  tcbNow.md = 953;
                  tcbNow.lp = 0;
               }
            } else {
               tcbNow.md = 956;
               tcbNow.lp = 0;
            }
         } else {
            PlayerKey[var20] = 0;
         }
         break;
      case 956:
         var2 = tcbNow._work[0];
         JoyTrig[var2] = 0;
         tcbNow.md = 957;
         tcbNow.lp = 0;
         break;
      case 957:
         var22 = tcbNow._work[0];
         JoyTrig[var22] = 0;
         if (tcbPlayer[var22].iHitStop == 0) {
            if (CPUCommand[var22] == 19 && Synchro[var22] >= SynchroMax[var22]) {
               CPUCount[var22] = 0;
            }

            if ((this.SeqKey[CPUCommand[var22]][0] & 65536) != 0) {
               PlayerKey[var22] = this.SeqKey[CPUCommand[var22]][0] & -65537;
            }

            if (CPUCount[var22] != 0 || PlayerAttack[var22] == 0 || CancelTime[var22] != 0) {
               var30 = CPUCount;
               var10002 = var30[var22]--;
               var2 = tcbPlayer[var22].md;
               if (CPUCount[var22] <= 0) {
                  tcbNow.md = 958;
                  tcbNow.lp = 0;
                  this.Game(var1, tcbNow.md);
               }
            }
         }
         break;
      case 958:
         var2 = tcbNow._work[0];
         if (CancelTime[var2] <= 0) {
            tcbNow.md = 954;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 959:
         var2 = tcbNow._work[0];
         PlayerKey[var2] = 0;
         JoyTrig[var2] = 0;
         if (!PlayerAir[var2] && AirType[var2]) {
            PlayerKey[var2] = 1;
            if (tcbPlayer[var2].obj.iYSpeed > 0) {
               JoyTrig[var2] = 1;
            }
         } else {
            tcbNow.md = 954;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 960:
         var22 = tcbNow._work[0];
         var20 = 1 - var22;
         var23 = tcbPlayer[var22].obj.ano;
         JoyTrig[var22] = 0;
         if (iTCBReqNum[var20] != 0) {
            var2 = Math.abs(tcbPlayer[var22].obj.x - tcbReqHit[var20 * 16 + 0].obj.x) >> 16;
         } else {
            var2 = 480;
         }

         if (var23 == 4 || var23 == 80 || var23 == 81) {
            if (PlayerAttack[var20] == 0) {
               CPUGuardTime[var22] = 0;
            } else {
               CPUGuardTime[var22] = 30;
            }
         }

         var6 = tcbPlayer[var20].obj.ano;
         if (((tcbPlayer[var20].iHitFlag & 4) != 0 || var2 < iRangeBulletGuard || ExtremeObject[var20] != 0 || iPlayMode == 2 && PracticeSetting[4] == 1 && (iTCBReqNum[var20] != 0 || PlayerAttack[var20] != 0)) && (PlayerState[var20] & 2) == 0) {
            if (CPUGuardTime[var22] != 0) {
               CPUGuardTime[var22] = 30;
            } else {
               CPUCount[var22] = 0;
            }
         } else {
            PlayerKey[var22] = 0;
            CPUCount[var22] = 0;
            if (PracticeSetting[2] == 0) {
               CPUGuardTime[var22] = 0;
               tcbNow.md = 954;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
               break;
            }

            if (CPUGuardTime[var22] == 0 || var6 == 25 || iPlayMode != 2) {
               CPUGuardTime[var22] = 0;
               tcbNow.md = 951;
               tcbNow.lp = 0;
               this.Game(var1, tcbNow.md);
               break;
            }

            var17 = CPUGuardTime;
            var10002 = var17[var22]--;
         }

         if (var23 == 4 || var23 == 80 || var23 == 81) {
            if ((tcbPlayer[var22].obj.wObjFlag & 16) == 0) {
               PlayerKey[var22] = 4;
            } else {
               PlayerKey[var22] = 8;
            }
         }
         break;
      case 961:
         this._SetAct(var1, tcbNow._work[6], tcbNow._work[0]);
         this._SetObj(var1, 200);
         var32 = objExec;
         var32.wObjFlag |= tcbNow._work[5];
         tcbNow.md = 962;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 962:
         var22 = iBackXPos + iBackXOffset;
         var2 = iBackYPos;
         this._SetXY(var1, tcbNow._work[3] - var22, tcbNow._work[4] - var2);
         this._ActReq(var1);
         tcbNow._work[3] = objExec.x + var22 + iBackXAdd;
         tcbNow._work[4] = objExec.y + var2;

         for(var2 = 0; var2 < objExec.iHitNum; ++var2) {
            var23 = var2 * 5;
            var22 = objExec.hit[var23 + 0];
            if (var22 != -1) {
               iSmokeEffectNumber = (iSmokeEffectNumber + 1) % 6;
               var20 = iSmokeEffectNumber + 13599;
               this._TKilx(var1, var20, var20);
               var15 = this._TaskMake(var1, 961, var20);
               var15._work[0] = var22 + 70;
               var20 = objExec.hit[var23 + 1] << 16;
               var22 = var20;
               if (tcbNow._work[5] != 0) {
                  var22 = -var20;
               }

               var15._work[3] = tcbNow._work[3] + var22;
               var15._work[4] = tcbNow._work[4] + (objExec.hit[var23 + 2] << 16);
               var15._work[5] = tcbNow._work[5];
               var15._work[6] = 2;
               objExec.hit[var23 + 0] = -1;
            }
         }

         if ((objExec.wActFlag & 2) != 0) {
            this._TKill(var1);
         }
         break;
      case 965:
         this._SetAct(var1, 5, tcbNow._work[0]);
         if (objExec.ano == 2) {
            var21 = 328;
         } else {
            var21 = 200;
         }

         this._SetObj(var1, var21);
         if (objExec.ano != 2) {
            var32 = objExec;
            var32.wObjFlag |= tcbNow._work[5];
         }

         tcbNow.md = 966;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 966:
         this._ActReq(var1);
         var30 = tcbNow._work;
         var30[3] += iBackXAdd;
         this._SetXY(var1, tcbNow._work[3] - iBackXPos, tcbNow._work[4] - iBackYPos);
         if ((objExec.wActFlag & 2) != 0) {
            this._TKill(var1);
         }
         break;
      case 967:
         this._SetAct(var1, 4096, 0);
         objExec.pal = 2299063;
         this._SetObj(var1, 10);
         objExec.iAlpha = 128;
         this._SetSize(var1, 0, 0, 31457280, 20971520);
         bBlackOut = true;
         if (tcbPlayer[0].md != 910 && tcbPlayer[1].md != 910) {
            tcbNow.md = 969;
            tcbNow.lp = 0;
         }
         break;
      case 969:
         bBlackOut = false;
         this._TKill(var1);
         break;
      case 970:
         var2 = tcbNow._work[0];
         var30 = BulletNum;
         var10002 = var30[var2]++;
         this._SetAct(var1, tcbNow._work[0] + 3, tcbNow._work[4]);
         this._SetObj(var1, var2 * 4 + 153);
         var32 = objExec;
         var32.wObjFlag |= tcbNow._work[6];
         tcbNow._work[10] = 0;
         tcbNow._work[15] = 0;
         tcbNow._work[16] = 0;
         tcbNow.md = 971;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 971:
         var6 = tcbNow._work[0];
         var23 = 1 - var6;
         var20 = tcbNow._work[11];
         if ((objExec.wActFlag & 2) != 0) {
            if (tcbNow._work[8] != 0 && ExtremeObject[var6] >= 1) {
               var30 = ExtremeObject;
               var10002 = var30[var6]--;
            }

            var30 = BulletNum;
            var10002 = var30[var6]--;
            this._TKill(var1);
         } else {
            if ((tcbNow.wFlag & 1) != 0 && CancelTime[var6] == 0 && tcbNow._work[10] == 0) {
               if (tcbNow._work[11] == SpecialType[var6]) {
                  var15 = tcbPlayer[var6];
                  var15.wFlag |= 4096;
               }

               tcbNow._work[10] = 1;
               CancelTime[var6] = 20;
            }

            if ((tcbNow.wFlag & 1) != 0 && ((short)(this.ChrGameData[var6 + 3].piGameData[this.ChrGameData[var6 + 3].piGameDataPos[4] + var20 * 2 * this.ChrGameData[var6 + 3].piGameDataXSize[4] + 0 + 1] << 8 & '\uff00' | this.ChrGameData[var6 + 3].piGameData[this.ChrGameData[var6 + 3].piGameDataPos[4] + var20 * 2 * this.ChrGameData[var6 + 3].piGameDataXSize[4] + 0]) & 1) == 0 || tcbNow._work[3] > 15728640) {
               var15 = tcbNow;
               var15.wFlag &= -2;
               if (objExec.ano != tcbNow._work[12] && tcbNow._work[12] != 0 && tcbPlayer[var23].md != 876 && tcbPlayer[var23].md != 877) {
                  this._SetAct(var1, objExec.acttype, tcbNow._work[12]);
                  tcbNow._work[9] = 0;
               } else if (objExec.ano != tcbNow._work[13] && tcbNow._work[3] > 15728640 && tcbNow._work[13] != 0) {
                  this._SetAct(var1, objExec.acttype, tcbNow._work[13]);
                  tcbNow._work[9] = 0;
               }

               if (tcbNow._work[9] == 1) {
                  if (tcbNow._work[5] == 0) {
                     tcbNow.md = 973;
                     tcbNow.lp = 0;
                     break;
                  }

                  if (objExec.ano != tcbNow._work[5]) {
                     this._SetAct(var1, objExec.acttype, tcbNow._work[5]);
                  }
               }

               if (tcbNow._work[3] > 15728640) {
                  tcbNow._work[3] = 15728640;
                  objExec.y = tcbNow._work[3] - iBackYPos;
               }

               var32 = objExec;
               var32.wActFlag &= -5;
            }

            if ((tcbNow.iHitStop != 0 || tcbPlayer[var23].md == 925 || tcbPlayer[var6].md == 925) && tcbPlayer[var6].md != 876 && tcbPlayer[var6].md != 877) {
               var32 = objExec;
               var32.wActFlag |= 4;
            } else {
               var32 = objExec;
               var32.wActFlag &= -5;
            }

            short var26;
            if ((objExec.wActFlag & 4) == 0 && (short)(this.ChrGameData[var6 + 3].piGameData[this.ChrGameData[var6 + 3].piGameDataPos[4] + var20 * 2 * this.ChrGameData[var6 + 3].piGameDataXSize[4] + 26 + 1] << 8 & '\uff00' | this.ChrGameData[var6 + 3].piGameData[this.ChrGameData[var6 + 3].piGameDataPos[4] + var20 * 2 * this.ChrGameData[var6 + 3].piGameDataXSize[4] + 26]) == 0) {
               var24 = (short)(this.ChrGameData[var6 + 3].piGameData[this.ChrGameData[var6 + 3].piGameDataPos[4] + var20 * 2 * this.ChrGameData[var6 + 3].piGameDataXSize[4] + 28 + 1] << 8 & '\uff00' | this.ChrGameData[var6 + 3].piGameData[this.ChrGameData[var6 + 3].piGameDataPos[4] + var20 * 2 * this.ChrGameData[var6 + 3].piGameDataXSize[4] + 28]);
               if (tcbNow._work[10] == 0 && tcbNow._work[16] != 0) {
                  if ((objExec.wObjFlag & 16) == 0 && PlayerXPos[var23] < tcbNow._work[2]) {
                     var2 = PlayerXPos[var6] + 31457280;
                  } else if ((objExec.wObjFlag & 16) != 0 && PlayerXPos[var23] > tcbNow._work[2]) {
                     var2 = PlayerXPos[var6] - 31457280;
                  } else {
                     var2 = PlayerXPos[var23];
                  }

                  var7 = this.GetAtanTable(var2 - tcbNow._work[2], tcbNow._work[3] - PlayerYPos[var23]) * 360 / 512;
                  var18 = this.SinTable[(var7 + 90) % 360];
                  var26 = this.SinTable[var7 % 360];
                  var30 = tcbNow._work;
                  var30[2] += (var18 * var24 << 16) / 64;
                  var30 = tcbNow._work;
                  var30[3] -= (var26 * var24 << 16) / 32;
               }
            }

            objExec.x = tcbNow._work[2] - iBackXPos - iBackXOffset;
            objExec.y = tcbNow._work[3] - iBackYPos;
            if (tcbNow._work[15] == 0) {
               tcbNow._work[15] = objExec.x;
            }

            if (tcbNow._work[15] != objExec.x) {
               tcbNow._work[16] = 1;
            }

            this._ActReq(var1);
            this.ChrSePlay(var1, var6);
            tcbNow._work[2] = objExec.x + iBackXPos + iBackXOffset;
            tcbNow._work[3] = objExec.y + iBackYPos;
            if (iTCBReqNum[var6] < 16) {
               tcbReqHit[var6 * 16 + iTCBReqNum[var6]] = tcbNow;
               var30 = iTCBReqNum;
               var10002 = var30[var6]++;
            }

            if ((objExec.wActFlag & 4) == 0) {
               if (tcbNow._work[9] == 0 && (tcbPlayer[var6].md == 876 || tcbPlayer[var6].md == 877)) {
                  tcbNow.md = 973;
                  tcbNow.lp = 0;
               } else {
                  this.CheckOptFlag(var1);

                  for(var2 = 0; var2 < objExec.iHitNum; ++var2) {
                     if (objExec.hit[var2 * 5 + 0] == 0) {
                        var26 = (short)(this.ChrGameData[var6 + 3].piGameData[this.ChrGameData[var6 + 3].piGameDataPos[4] + var20 * 2 * this.ChrGameData[var6 + 3].piGameDataXSize[4] + 18 + 1] << 8 & '\uff00' | this.ChrGameData[var6 + 3].piGameData[this.ChrGameData[var6 + 3].piGameDataPos[4] + var20 * 2 * this.ChrGameData[var6 + 3].piGameDataXSize[4] + 18]);
                        if (var26 != 0 && BulletNum[var6] < 8) {
                           var22 = objExec.hit[var2 * 5 + 1] << 16;
                           var15 = this._TaskMake(var1, 970, var6 + 13312);
                           var15._work[0] = var6;
                           var15._work[1] = var23;
                           if ((objExec.wObjFlag & 16) != 0) {
                              var22 = tcbNow._work[2] - var22;
                           } else {
                              var22 += tcbNow._work[2];
                           }

                           var15._work[2] = var22;
                           var15._work[3] = tcbNow._work[3] + (objExec.hit[var2 * 5 + 2] << 16);
                           var15._work[4] = var26;
                           var15._work[5] = (short)(this.ChrGameData[var6 + 3].piGameData[this.ChrGameData[var6 + 3].piGameDataPos[4] + var20 * 2 * this.ChrGameData[var6 + 3].piGameDataXSize[4] + 20 + 1] << 8 & '\uff00' | this.ChrGameData[var6 + 3].piGameData[this.ChrGameData[var6 + 3].piGameDataPos[4] + var20 * 2 * this.ChrGameData[var6 + 3].piGameDataXSize[4] + 20]);
                           var15._work[6] = objExec.wObjFlag & 16;
                           var15._work[7] = 1;
                           var15._work[8] = tcbNow._work[8];
                           if (var15._work[5] == 0) {
                              var15._work[9] = 0;
                           } else {
                              var15._work[9] = 1;
                           }

                           var15._work[11] = tcbNow._work[11];
                           var15._work[12] = (short)(this.ChrGameData[var6 + 3].piGameData[this.ChrGameData[var6 + 3].piGameDataPos[4] + tcbNow._work[11] * 2 * this.ChrGameData[var6 + 3].piGameDataXSize[4] + 38 + 1] << 8 & '\uff00' | this.ChrGameData[var6 + 3].piGameData[this.ChrGameData[var6 + 3].piGameDataPos[4] + tcbNow._work[11] * 2 * this.ChrGameData[var6 + 3].piGameDataXSize[4] + 38]);
                           var15._work[13] = (short)(this.ChrGameData[var6 + 3].piGameData[this.ChrGameData[var6 + 3].piGameDataPos[4] + var20 * 2 * this.ChrGameData[var6 + 3].piGameDataXSize[4] + 42 + 1] << 8 & '\uff00' | this.ChrGameData[var6 + 3].piGameData[this.ChrGameData[var6 + 3].piGameDataPos[4] + var20 * 2 * this.ChrGameData[var6 + 3].piGameDataXSize[4] + 42]);
                           if (var15._work[8] != 0) {
                              var30 = ExtremeObject;
                              var10002 = var30[var6]++;
                           }
                        }

                        objExec.hit[var2 * 5 + 0] = -1;
                     }
                  }
               }
            }
         }
         break;
      case 972:
         objExec.x = tcbNow._work[2] - iBackXPos - iBackXOffset;
         objExec.y = tcbNow._work[3] - iBackYPos;
         this._ActReq(var1);
         this.CheckOptFlag(var1);
         tcbNow._work[2] = objExec.x + iBackXPos + iBackXOffset;
         tcbNow._work[3] = objExec.y + iBackYPos;
         if ((objExec.wActFlag & 2) != 0) {
            tcbNow.md = 973;
            tcbNow.lp = 0;
            this.Game(var1, tcbNow.md);
         }
         break;
      case 973:
         var2 = tcbNow._work[0];
         if (tcbNow._work[8] != 0 && ExtremeObject[var2] >= 1) {
            var30 = ExtremeObject;
            var10002 = var30[var2]--;
         }

         var30 = BulletNum;
         var10002 = var30[var2]--;
         this._TKill(var1);
         break;
      case 974:
         if ((tcbNow._work[1] & 16) != 0) {
            var22 = 23592960;
            var20 = 18350080;
            var23 = -2097152;
            var21 = 179;
         } else {
            var22 = -7864320;
            var20 = -2621440;
            var23 = 2097152;
            var21 = 178;
         }

         this.CreatePanel(var1, tcbNow.prio, tcbNow._work[0] + 3, var21, 12291, tcbNow._work[1], var22, 6422528, var20, 6422528, var23, 0, 0, 0, 0, 0);
         this._SetAct(var1, 5, 6);
         this._SetObj(var1, 12290);
         this._SetXY(var1, 0, 6422528);
         tcbNow.md = 975;
         tcbNow.lp = 0;
         break;
      case 976:
         tcbNow.md = 977;
         tcbNow.lp = 0;
         break;
      case 977:
         var6 = tcbNow._work[0];
         var23 = tcbPlayer[var6].obj.wObjFlag;
         var7 = tcbNow._work[1];
         if (var7 == 62) {
            var2 = 0;

            label1140:
            while(true) {
               if (var2 >= tcbPlayer[var6].obj.iHitNum) {
                  var2 = 0;

                  while(true) {
                     if (var2 >= iTCBReqNum[var6]) {
                        break label1140;
                     }

                     if (tcbReqHit[var6 * 16 + var2] != null && tcbReqHit[var6 * 16 + var2].act) {
                        var22 = tcbReqHit[var6 * 16 + var2].obj.hit[0];
                        if (var22 >= 10 && var22 <= 17 || var22 >= 71 && var22 <= 125) {
                           var8 = tcbReqHit[var6 * 16 + var2].obj.wActFlag;
                           var27 = tcbReqHit[var6 * 16 + var2].obj.wObjFlag;
                           if (var22 <= 17) {
                              var22 -= 10;
                           } else {
                              var22 = var22 - 71 + 8;
                           }

                           AuraAction[var6][var22] = 1;
                           var20 = tcbReqHit[var6 * 16 + var2].obj.hit[1];
                           var30 = AuraPosition[var6];
                           if ((var8 & 16 ^ var27 & 16) != 0) {
                              var20 = -var20;
                           }

                           var30[var22 * 2 + 0] = var20;
                           AuraPosition[var6][var22 * 2 + 1] = tcbReqHit[var6 * 16 + var2].obj.hit[2];
                        }
                     }

                     ++var2;
                  }
               }

               var22 = tcbPlayer[var6].obj.hit[var2 * 5 + 0];
               if (var22 >= 10 && var22 <= 17 || var22 >= 71 && var22 <= 125) {
                  var27 = tcbPlayer[var6].obj.wActFlag;
                  var8 = tcbPlayer[var6].obj.wObjFlag;
                  if (var22 <= 17) {
                     var22 -= 10;
                  } else {
                     var22 = var22 - 71 + 8;
                  }

                  AuraAction[var6][var22] = 1;
                  var20 = tcbPlayer[var6].obj.hit[var2 * 5 + 1];
                  var30 = AuraPosition[var6];
                  if ((var27 & 16 ^ var8 & 16) != 0) {
                     var20 = -var20;
                  }

                  var30[var22 * 2 + 0] = var20;
                  AuraPosition[var6][var22 * 2 + 1] = tcbPlayer[var6].obj.hit[var2 * 5 + 2];
               }

               ++var2;
            }
         }

         if (var7 < 8) {
            var2 = var7 + 50;
         } else {
            var2 = var7 + 201 - 8;
         }

         if (AuraAction[var6][var7] != 0 && (var23 & 1) == 0 && (PlayerState[var6] & 16777216) == 0) {
            if (var7 < 8) {
               var22 = 5;
            } else {
               var22 = var6 + 3;
            }

            this._SetAct(var1, var22, var2);
            this._SetObj(var1, tcbPlayer[var6].obj.prio);
            objExec.x = tcbPlayer[var6].obj.x + (AuraPosition[var6][var7 * 2 + 0] << 16);
            objExec.y = tcbPlayer[var6].obj.y + (AuraPosition[var6][var7 * 2 + 1] << 16);
            if (tcbPlayer[var6].md != 925 && tcbPlayer[1 - var6].md != 925 && (tcbPlayer[var6].obj.wActFlag & 4) == 0) {
               var32 = objExec;
               var32.wActFlag &= -5;
            } else {
               var32 = objExec;
               var32.wActFlag |= 4;
            }

            var22 = 0;

            for(var2 = 0; var22 < objExec.iHitNum; var23 = var20) {
               var20 = var23;
               if (objExec.hit[var2 + 0] == 0) {
                  var20 = var23 & -17;
               }

               ++var22;
               var2 += 5;
            }

            var32 = objExec;
            var32.wObjFlag &= -17;
            var32 = objExec;
            var32.wObjFlag |= var23 & 16;
            this._ActReq(var1);
            this.ChrSePlay(var1, var6);
            AuraAction[var6][var7] = 0;
         } else {
            this._SetAct(var1, 0, 2);
            this._SetObj(var1, -1);
         }
         break;
      case 978:
         var6 = tcbNow._work[0];
         var23 = tcbPlayer[var6].obj.wObjFlag;
         var20 = tcbNow._work[1];
         if (tcbNow._work[2] != PlayerType[var6]) {
            this._SetAct(var1, 0, 0);
            this._ActReq(var1);
            this.ChrSePlay(var1, var6);
            tcbNow._work[2] = PlayerType[var6];
         }

         if (var20 == 29) {
            for(var2 = 0; var2 < tcbPlayer[var6].obj.iHitNum; ++var2) {
               var22 = tcbPlayer[var6].obj.hit[var2 * 5 + 0];
               if (var22 >= 41 && var22 <= 70) {
                  var27 = tcbPlayer[var6].obj.wActFlag;
                  var8 = tcbPlayer[var6].obj.wObjFlag;
                  var7 = var22 - 41;
                  BubbleAction[var6][var7] = 1;
                  var22 = tcbPlayer[var6].obj.hit[var2 * 5 + 1];
                  var30 = BubblePosition[var6];
                  if ((var27 & 16 ^ var8 & 16) != 0) {
                     var22 = -var22;
                  }

                  var30[var7 * 2 + 0] = var22;
                  BubblePosition[var6][var7 * 2 + 1] = tcbPlayer[var6].obj.hit[var2 * 5 + 2];
               }
            }
         }

         if (BubbleAction[var6][var20] != 0 && (var23 & 1) == 0) {
            this._SetAct(var1, var6 + 27, var20 + 3);
            this._SetObj(var1, tcbPlayer[var6].obj.prio);
            objExec.x = tcbPlayer[var6].obj.x + (BubblePosition[var6][var20 * 2 + 0] << 16);
            objExec.y = tcbPlayer[var6].obj.y + (BubblePosition[var6][var20 * 2 + 1] << 16);
            if (tcbPlayer[var6].md != 925 && tcbPlayer[1 - var6].md != 925 && (tcbPlayer[var6].obj.wActFlag & 4) == 0) {
               var32 = objExec;
               var32.wActFlag &= -5;
            } else {
               var32 = objExec;
               var32.wActFlag |= 4;
            }

            this._ActReq(var1);
            this.ChrSePlay(var1, var6);
            BubbleAction[var6][var20] = 0;
         } else {
            this._SetAct(var1, 0, 0);
            this._SetObj(var1, -1);
         }
         break;
      case 979:
         this.DamageEnd(var1);
         tcbNow.md = 864;
         tcbNow.lp = 0;
         break;
      case 980:
         var2 = tcbNow._work[0];
         objExec.ano = 0;
         this._SetAct(var1, objExec.acttype, 82);
         JoyTrig[var2] = 0;
         PlayerKey[var2] = 0;
         this.CmdClear(var1, var2);
         tcbNow.md = 891;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 981:
         var2 = tcbNow._work[0];
         objExec.ano = 0;
         this._SetAct(var1, objExec.acttype, 83);
         JoyTrig[var2] = 0;
         PlayerKey[var2] = 0;
         this.CmdClear(var1, var2);
         tcbNow.md = 891;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 982:
         var2 = tcbNow._work[0];
         this.AttackEnd(var1);
         Dash[var2] = 0;
         if (!AirType[var2]) {
            PlayerYPos[var2] = 15728640;
         }

         if (PlayerYPos[var2] != 15728640) {
            this._SetAct(var1, objExec.acttype, 8);
         } else {
            this._SetAct(var1, objExec.acttype, 6);
         }

         JoyTrig[var2] = 0;
         this.CmdClear(var1, var2);
         tcbNow.md = 891;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 983:
         var2 = tcbNow._work[0];
         this.AttackEnd(var1);
         Dash[var2] = 0;
         if (!AirType[var2]) {
            PlayerYPos[var2] = 15728640;
         }

         if (PlayerYPos[var2] != 15728640) {
            this._SetAct(var1, objExec.acttype, 9);
         } else {
            this._SetAct(var1, objExec.acttype, 7);
         }

         JoyTrig[var2] = 0;
         this.CmdClear(var1, var2);
         tcbNow.md = 891;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 986:
         this.PlayerTail(var1);
         this._SetObj(var1, 150);
         break;
      case 987:
         this._SetAct(var1, objExec.acttype, 17);
         this._ActReq(var1);
         this.PlayerTail(var1);
         break;
      case 988:
         var2 = tcbNow._work[0];
         if ((tcbPlayer[var2].obj.wActFlag & 2) != 0) {
            bActionStop = true;
            tcbNow._work[2] = 0;
            tcbNow.md = 989;
            tcbNow.lp = 0;
         }
         break;
      case 989:
         this._SetAct(var1, 4096, 0);
         this._SetSize(var1, 0, 0, 31457280, 20971520);
         this._SetObj(var1, 4095);
         var17 = tcbNow._work;
         var17[2] += 10;
         if (tcbNow._work[2] >= 255) {
            tcbNow._work[2] = 255;
            tcbNow.md = 990;
            tcbNow.lp = 0;
         }

         objExec.pal = 16777215 | 255 - tcbNow._work[2] << 24;
         break;
      case 990:
         var2 = tcbNow._work[0];
         PlayerType[var2] = this.pGameData.piGameData[this.pGameData.piGameDataPos[54] + PlayerType[var2] * this.pGameData.piGameDataXSize[54] + 0];
         LoadData[3] = PlayerType[0];
         LoadData[4] = PlayerType[1];
         LoadData[27] = PlayerType[0];
         LoadData[28] = PlayerType[1];
         this.SetLoad(var1, true);
         tcbNow.md = 991;
         tcbNow.lp = 0;
         break;
      case 991:
         var2 = tcbNow._work[0];
         Angry[var2] = 0;
         bActionStop = false;
         tcbPlayer[var2].md = 987;
         tcbNow.md = 992;
         tcbNow.lp = 0;
         break;
      case 992:
         var2 = tcbNow._work[0];
         if ((tcbPlayer[var2].obj.wActFlag & 2) != 0) {
            tcbPlayer[var2].md = 864;
            tcbNow._work[2] = 0;
            tcbNow.md = 993;
            tcbNow.lp = 0;
         }
         break;
      case 993:
         var2 = tcbNow._work[0];
         bActionStop = true;
         var30 = tcbNow._work;
         var30[2] += 10;
         if (tcbNow._work[2] >= 255) {
            tcbNow._work[2] = 255;
            tcbPlayer[1 - var2].md = tcbNow._work[1];
            bActionStop = false;
            this._TKill(var1);
         } else {
            objExec.pal = 16777215 | tcbNow._work[2] << 24;
         }
         break;
      case 994:
         var2 = tcbNow._work[0];
         this.PlayerTail(var1);
         this._SetObj(var1, 150);
         objExec.iXZoomObj = iZoomBase;
         objExec.iYZoomObj = iZoomBase;
         break;
      case 995:
         var22 = tcbNow._work[0];
         var23 = iBackXPos + 15728640;
         var20 = iBackYPos + 10485760;
         if (HitFocusTime[var22] != 0) {
            var17 = tcbNow._work;
            var17[3] += 5;
            if (tcbNow._work[3] >= 100) {
               tcbNow._work[3] = 100;
               var17 = HitFocusTime;
               var10002 = var17[var22]--;
            }
         } else {
            var30 = tcbNow._work;
            var30[3] -= 5;
            if (tcbNow._work[3] <= 0) {
               for(var2 = 0; var2 <= 1; ++var2) {
                  tcbPlayer[var2].md = tcbNow._work[var2 + 1];
               }

               iFocusTarget = -1;
               this._TKill(var1);
            }
         }

         iZoomBase = (FocusZoom[var22] - 100) * tcbNow._work[3] / 100 + 100;
         iZoomXCenter = (FocusXPos[var22] - var23) * tcbNow._work[3] / 100 + var23;
         iZoomYCenter = (FocusYPos[var22] - var20) * tcbNow._work[3] / 100 + var20;
         break;
      case 996:
         var8 = tcbNow._work[0];
         var15 = tcbNow.ptr;
         var7 = tcbNow._work[1];
         short var10 = (short)(this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 6 + 1] << 8 & '\uff00' | this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 6]);
         var6 = 1 - var8;
         short var9 = (short)(this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 14 + 1] << 8 & '\uff00' | this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 14]);
         short var5 = (short)(this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 10 + 1] << 8 & '\uff00' | this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 10]);
         boolean var4 = false;
         if (var15.obj == null) {
            this._TKill(var1);
         } else {
            int var11 = var15.obj.wObjFlag & 16;
            if (var7 >= this.ChrGameData[var8 + 3].piGameDataYSize[13]) {
               this._TKill(var1);
            } else {
               if (tcbNow._work[4] == 0) {
                  if (var10 != 0) {
                     var18 = (short)(this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 0 + 1] << 8 & '\uff00' | this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 0]);
                     if (var18 == 0) {
                        var2 = 5;
                     } else if (var18 == 1) {
                        var2 = var8 + 3;
                     } else {
                        var2 = 2;
                     }

                     short[] var16 = this.ChrGameData[var8 + 3].piGameData;
                     int var13 = this.ChrGameData[var8 + 3].piGameDataPos[13];
                     int var12 = this.ChrGameData[var8 + 3].piGameDataXSize[13];
                     byte var3;
                     if (var11 != 0) {
                        var3 = 4;
                     } else {
                        var3 = 3;
                     }

                     short var29 = var16[var13 + var7 * 2 * var12 + var3 * 2 + 1];
                     var16 = this.ChrGameData[var8 + 3].piGameData;
                     int var14 = this.ChrGameData[var8 + 3].piGameDataPos[13];
                     var12 = this.ChrGameData[var8 + 3].piGameDataXSize[13];
                     if (var11 != 0) {
                        var3 = 4;
                     } else {
                        var3 = 3;
                     }

                     this._SetAct(var1, var2, (short)(var29 << 8 & '\uff00' | var16[var14 + var7 * 2 * var12 + var3 * 2]));
                     var18 = (short)(this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 4 + 1] << 8 & '\uff00' | this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 4]);
                     if (var18 == 0) {
                        if (var7 != 8 && var7 != 9) {
                           var21 = 200;
                        } else {
                           var21 = 10;
                        }
                     } else if (var18 == 1) {
                        if (var7 == 8) {
                           var21 = 19;
                        } else if (var7 == 9) {
                           var21 = 21;
                        } else {
                           var21 = 17;
                        }
                     } else {
                        var21 = 400;
                     }

                     this._SetObj(var1, var21);
                     if (var7 == 8 || var7 == 9) {
                        this._SetXY(var1, 0, 0);
                     }
                  }

                  if ((short)(this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 12 + 1] << 8 & '\uff00' | this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 12]) != 0) {
                     tcbNow._work[7] = tcbPlayer[var6].md;
                     if (tcbPlayer[var6].md != 925) {
                        tcbPlayer[var6].md = 925;
                     }
                  }

                  if (var9 == 3) {
                     if (tcbNow._work[9] == 0) {
                        tcbNow._work[10] = PlayerXPos[var8] + tcbNow._work[7];
                     } else {
                        tcbNow._work[10] = PlayerXPos[var8] + tcbNow._work[7] - 31457280;
                     }
                  }
               }

               if (var10 != 0) {
                  if (var5 == 0) {
                     if (iZoomBase != 100) {
                        var22 = tcbNow._work[5];
                        var2 = iZoomXCenter;
                        int var28 = tcbNow._work[6];
                        var11 = iZoomYCenter;
                        this._SetXY(var1, 15728640 + ((var22 - var2 >> 16) * iZoomBase / 100 << 16), 10485760 + ((var28 - var11 >> 16) * iZoomBase / 100 << 16));
                     } else {
                        this._SetXY(var1, tcbNow._work[5] - iBackXPos - iBackXOffset, tcbNow._work[6] - iBackYPos - iBackYOffset);
                     }
                  } else {
                     if (var7 != 8 && var7 != 9) {
                        this._SetXY(var1, 0, 0);
                     }

                     if (var5 == 1) {
                        bEffectFullScreen = true;
                     }
                  }

                  this._ActReq(var1);
                  this.ChrSePlay(var1, var8);
                  objExec.iXZoomObj = iZoomBase;
                  objExec.iYZoomObj = iZoomBase;
               }

               if (var9 != 0) {
                  int[] var31;
                  switch(var9) {
                  case 1:
                     var31 = PlayerState;
                     var31[var8] |= 33554432;
                     break;
                  case 2:
                     if (Life[var6] <= 0) {
                        var31 = PlayerState;
                        var31[var6] |= 16777216;
                     }
                  case 3:
                  case 4:
                  default:
                     break;
                  case 5:
                     iScrollTarget = var6;
                     break;
                  case 6:
                     bForceWall = true;
                     break;
                  case 7:
                     ScreenEdgeOff[var6] = true;
                     break;
                  case 8:
                     ScreenEdgeOff[var8] = true;
                     break;
                  case 9:
                     ScreenEdgeOff[var8] = true;
                     ScreenEdgeOff[var6] = true;
                     break;
                  case 10:
                     PlayerXPos[var6] = iBackXPos - 7864320;
                     break;
                  case 11:
                     PlayerXPos[var6] = iBackXPos + 39321600;
                     break;
                  case 12:
                     PlayerYPos[var6] = iBackYPos - 2097152;
                  }

                  if (var9 >= 13 && var9 <= 15) {
                     if (tcbNow._work[4] == 0) {
                        switch(var9) {
                        case 13:
                           PlayerXPos[var8] = iBackXPos - 7864320;
                           break;
                        case 14:
                           PlayerXPos[var8] = iBackXPos + 39321600;
                           break;
                        case 15:
                           PlayerYPos[var8] = iBackYPos - 2097152;
                        }

                        PlayerOldXPos[var8] = PlayerXPos[var8];
                     }

                     ScreenEdgeOff[var8] = true;
                  }

                  if (var9 >= 10 && var9 <= 12) {
                     if (tcbNow._work[4] == 0) {
                        switch(var9) {
                        case 10:
                           PlayerXPos[var6] = iBackXPos - 7864320;
                           break;
                        case 11:
                           PlayerXPos[var6] = iBackXPos + 39321600;
                           break;
                        case 12:
                           PlayerYPos[var6] = iBackYPos - 2097152;
                        }

                        PlayerOldXPos[var6] = PlayerXPos[var6];
                     }

                     ScreenEdgeOff[var6] = true;
                  }

                  if (var9 == 3 || var9 == 4 || var9 == 7 || var9 == 9) {
                     ScrollCheckOff[var8] = true;
                  }

                  if (var9 == 8 || var9 == 9) {
                     ScrollCheckOff[var6] = true;
                  }
               }

               tcbNow._work[4] = 1;
               if (var9 == 3) {
                  if ((short)(this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 10 + 1] << 8 & '\uff00' | this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 10]) == 0) {
                     iBackXPos = tcbNow._work[10];
                     iBackXPosSprite[0] = tcbNow._work[10];
                     iBackXPosSprite[1] = tcbNow._work[10];
                     iBackXPosSprite[2] = tcbNow._work[10];
                  }

                  if (tcbNow._work[10] < iBackXPos) {
                     iBackXPos -= 655360;
                     var30 = iBackXPosSprite;
                     var30[0] -= 655360;
                     var30 = iBackXPosSprite;
                     var30[1] -= 655360;
                     var30 = iBackXPosSprite;
                     var30[2] -= 655360;
                     var25 = var4;
                     if (tcbNow._work[10] > iBackXPos) {
                        iBackXPos = tcbNow._work[10];
                        iBackXPosSprite[0] = tcbNow._work[10];
                        iBackXPosSprite[1] = tcbNow._work[10];
                        iBackXPosSprite[2] = tcbNow._work[10];
                        var25 = var4;
                     }
                  } else if (tcbNow._work[10] > iBackXPos) {
                     iBackXPos += 655360;
                     var30 = iBackXPosSprite;
                     var30[0] += 655360;
                     var30 = iBackXPosSprite;
                     var30[1] += 655360;
                     var30 = iBackXPosSprite;
                     var30[2] += 655360;
                     var25 = var4;
                     if (tcbNow._work[10] < iBackXPos) {
                        iBackXPos = tcbNow._work[10];
                        iBackXPosSprite[0] = tcbNow._work[10];
                        iBackXPosSprite[1] = tcbNow._work[10];
                        iBackXPosSprite[2] = tcbNow._work[10];
                        var25 = var4;
                     }
                  } else {
                     var25 = true;
                  }
               } else {
                  label1404: {
                     var24 = (short)(this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 2 + 1] << 8 & '\uff00' | this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 2]);
                     if (var15.obj.ano == tcbNow._work[2]) {
                        var25 = var4;
                        if (var15.obj.pat < tcbNow._work[3] + var24) {
                           break label1404;
                        }

                        var25 = var4;
                        if (var24 <= 0) {
                           break label1404;
                        }
                     }

                     if ((short)(this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 12 + 1] << 8 & '\uff00' | this.ChrGameData[var8 + 3].piGameData[this.ChrGameData[var8 + 3].piGameDataPos[13] + var7 * 2 * this.ChrGameData[var8 + 3].piGameDataXSize[13] + 12]) != 0 && tcbNow._work[7] != 925) {
                        tcbPlayer[var6].md = tcbNow._work[7];
                     }

                     var25 = true;
                  }
               }

               if (var25) {
                  if (var5 == 1) {
                     bEffectFullScreen = false;
                  }

                  this._TKill(var1);
               }
            }
         }
      }

   }

   public void Game8(GlobalWork var1, int var2) {
      int var3;
      int var4;
      byte var5;
      int var7;
      int var8;
      int[] var18;
      int var10002;
      byte var24;
      int var27;
      byte var32;
      int var35;
      int var36;
      switch(var2) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 35:
      default:
         break;
      case 26:
         this._SetAct(var1, 65536, 0);
         this._SetObj(var1, tcbNow._work[10]);
         tcbNow.md = 27;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 27:
         objExec.Work[6] = 0;
         break;
      case 28:
         _screeneffect[0] = 0;
         _screeneffect[1] = 0;
         _screeneffect[2] = 0;
         _screeneffect[3] = 100;
         _screeneffect[4] = 100;
         _screeneffect[5] = 100;
         _screenoffect_frame[0] = 0;
         _screenoffect_frame[1] = 0;
         _screenoffect_frame[2] = 0;
         _screenoffect_frame[3] = 100;
         _screenoffect_frame[4] = 100;
         _screenoffect_frame[5] = 100;
         tcbNow._work[0] = 0;
         tcbNow._work[1] = 0;
         tcbNow._work[2] = 0;
         tcbNow._work[3] = 12800;
         tcbNow._work[4] = 12800;
         tcbNow._work[5] = 12800;
         tcbNow._work[10] = 0;
         tcbNow._work[11] = 0;
         tcbNow._work[12] = 0;
         tcbNow._work[13] = 100;
         tcbNow._work[14] = 100;
         tcbNow._work[15] = 100;
         _screeneffect[0] = 0;
         _screeneffect[1] = 0;
         _screeneffect[2] = 0;
         _screeneffect[3] = 100;
         _screeneffect[4] = 100;
         _screeneffect[5] = 100;
         iCameraLock = -1;
         tcbNow.md = 29;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 29:
         if (tcbPlayer[0] != null && tcbPlayer[1] != null && tcbPlayer[0].obj != null && tcbPlayer[1].obj != null) {
            var27 = tcbPlayer[0].obj.x >> 16;
            var4 = tcbPlayer[0].obj.y >> 16;
            int var30 = tcbPlayer[1].obj.x >> 16;
            var2 = tcbPlayer[1].obj.y >> 16;
            var3 = tcbPlayer[1].obj.wActFlag;
            var3 = (int)this.sqrt2((long)((var30 - var27) * (var30 - var27) + (var2 - var4) * (var2 - var4)));
            var32 = 12;
            if (iCameraLock >= 0) {
               switch(iCameraLock) {
               case 0:
               case 1:
                  iActionZoomFrame = 0;
                  iActionZoomW = 100;
                  iActionZoomH = 100;
                  _screeneffect[3] = 200;
                  _screeneffect[4] = 200;
                  byte var38;
                  if (iCameraLock == 0) {
                     var3 = 160 - var4;
                     if (var27 > var30) {
                        var38 = -40;
                     } else {
                        var38 = 40;
                     }

                     var4 = 240 - var27 + var38;
                     var2 = var3;
                     var3 = var4;
                  } else {
                     var4 = 160 - var2;
                     if (var30 > var27) {
                        var38 = -40;
                     } else {
                        var38 = 40;
                     }

                     var3 = 240 - var30 + var38;
                     var2 = var4;
                  }

                  _screeneffect[0] = var3 * 2 + 0;
                  _screeneffect[1] = -(var2 + 48) * 2;
                  var2 = 4;
                  break;
               case 3:
                  _screeneffect[0] = 0;
                  _screeneffect[1] = 0;
                  _screeneffect[3] = 140;
                  _screeneffect[4] = 140;
                  var2 = 30;
                  break;
               case 4:
                  _screeneffect[0] = 0;
                  _screeneffect[1] = 0;
                  _screeneffect[2] = 0;
                  _screeneffect[3] = 100;
                  _screeneffect[4] = 100;
                  _screeneffect[5] = 100;
                  var2 = 1;
                  break;
               case 5:
                  _screeneffect[0] = 0;
                  _screeneffect[1] = 0;
                  _screeneffect[3] = 150;
                  _screeneffect[4] = 150;
                  var2 = 4;
                  break;
               case 6:
                  _screeneffect[0] = 0;
                  _screeneffect[1] = 0;
                  _screeneffect[3] = 140;
                  _screeneffect[4] = 140;
                  var2 = 1;
                  break;
               case 255:
                  var2 = var32;
                  if ((iEventStatus & 1) == 0) {
                     var2 = var32;
                     if (tcbPlayer[0].md == 864) {
                        var2 = var32;
                        if (tcbPlayer[1].md == 864) {
                           iCameraLock = -1;
                           var2 = var32;
                        }
                     }
                  }
                  break;
               default:
                  var2 = var32;
               }

               iCameraLock = 255;
            } else if (iActionZoomFrame > 0) {
               label494: {
                  if (iActionZoomW == 100) {
                     var2 = var32;
                     if (iActionZoomH == 100) {
                        break label494;
                     }
                  }

                  _screeneffect[0] = 240 - (iActionZoomX >> 16);
                  _screeneffect[1] = -(160 - (iActionZoomY >> 16));
                  _screeneffect[0] = _screeneffect[0] * iActionZoomW / 100 + 0;
                  _screeneffect[1] = _screeneffect[1] * iActionZoomH / 100;
                  _screeneffect[3] = iActionZoomW;
                  _screeneffect[4] = iActionZoomH;
                  var2 = iActionZoomFrame;
                  iActionZoomFrame = 0;
                  iActionZoomW = 100;
                  iActionZoomH = 100;
               }
            } else {
               var30 = Math.abs(var30 - var27);
               var2 = Math.abs(var2 - var4);
               if (var30 <= 320 && var2 <= 200) {
                  _screeneffect[0] = 0;
                  _screeneffect[1] = 0;
                  _screeneffect[2] = 0;
                  _screeneffect[3] = 100;
                  _screeneffect[4] = 100;
                  _screeneffect[5] = 100;
                  var2 = var32;
               } else {
                  _screeneffect[0] = 0;
                  _screeneffect[1] = 0;
                  _screeneffect[2] = 0;
                  _screeneffect[3] = 90;
                  _screeneffect[4] = 90;
                  _screeneffect[5] = 90;
                  var2 = 16;
               }
            }

            if (tcbNow._work[10] != _screeneffect[0] || tcbNow._work[11] != _screeneffect[1] || tcbNow._work[12] != _screeneffect[2] || tcbNow._work[13] != _screeneffect[3] || tcbNow._work[14] != _screeneffect[4] || tcbNow._work[15] != _screeneffect[5]) {
               tcbNow._work[10] = _screeneffect[0];
               tcbNow._work[11] = _screeneffect[1];
               tcbNow._work[12] = _screeneffect[2];
               tcbNow._work[13] = _screeneffect[3];
               tcbNow._work[14] = _screeneffect[4];
               tcbNow._work[15] = _screeneffect[5];
               tcbNow._work[16] = ((_screeneffect[0] << 7) - tcbNow._work[0]) / var2;
               tcbNow._work[17] = ((_screeneffect[1] << 7) - tcbNow._work[1]) / var2;
               tcbNow._work[18] = ((_screeneffect[2] << 7) - tcbNow._work[2]) / var2;
               tcbNow._work[19] = ((_screeneffect[3] << 7) - tcbNow._work[3]) / var2;
               tcbNow._work[20] = ((_screeneffect[4] << 7) - tcbNow._work[4]) / var2;
               tcbNow._work[21] = ((_screeneffect[5] << 7) - tcbNow._work[5]) / var2;
               tcbNow._work[22] = var2;
            }

            if (tcbNow._work[22] != 0) {
               var18 = tcbNow._work;
               var10002 = var18[22]--;
               if (tcbNow._work[22] == 0) {
                  tcbNow._work[0] = tcbNow._work[10] << 7;
                  tcbNow._work[1] = tcbNow._work[11] << 7;
                  tcbNow._work[2] = tcbNow._work[12] << 7;
                  tcbNow._work[3] = tcbNow._work[13] << 7;
                  tcbNow._work[4] = tcbNow._work[14] << 7;
                  tcbNow._work[5] = tcbNow._work[15] << 7;
                  iActionZoomFrame = 0;
               } else {
                  var18 = tcbNow._work;
                  var18[0] += tcbNow._work[16];
                  var18 = tcbNow._work;
                  var18[1] += tcbNow._work[17];
                  var18 = tcbNow._work;
                  var18[2] += tcbNow._work[18];
                  var18 = tcbNow._work;
                  var18[3] += tcbNow._work[19];
                  var18 = tcbNow._work;
                  var18[4] += tcbNow._work[20];
                  var18 = tcbNow._work;
                  var18[5] += tcbNow._work[21];
               }
            }

            _screenoffect_frame[0] = tcbNow._work[0] >> 7;
            _screenoffect_frame[1] = tcbNow._work[1] >> 7;
            _screenoffect_frame[2] = tcbNow._work[2] >> 7;
            _screenoffect_frame[3] = tcbNow._work[3] >> 7;
            _screenoffect_frame[4] = tcbNow._work[4] >> 7;
            _screenoffect_frame[5] = tcbNow._work[5] >> 7;
         }
         break;
      case 30:
         this._SetAct(var1, 65536, 0);
         this._SetObj(var1, tcbNow._work[10]);
         objExec.Work[0] = 0;
         objExec.Work[1] = 0;
         objExec.Work[2] = 0;
         objExec.Work[3] = 100;
         objExec.Work[4] = 100;
         objExec.Work[5] = 100;
         tcbNow.md = 31;
         tcbNow.lp = 0;
         break;
      case 31:
         if (tcbPlayer[0] != null && tcbPlayer[1] != null && tcbPlayer[0].obj != null && tcbPlayer[1].obj != null) {
            if (_cameraPrio == 0) {
               this._SetObj(var1, 9);
            }

            if (tcbPlayer[0].obj.ano == 61 || tcbPlayer[0].obj.ano == 62 || tcbPlayer[1].obj.ano == 61 || tcbPlayer[1].obj.ano == 62 || tcbPlayer[0].obj.ano == 51 || tcbPlayer[1].obj.ano == 51 || tcbPlayer[0].obj.ano == 260 || tcbPlayer[1].obj.ano == 260 || _cameraPrio != 0) {
               if (_cameraPrio == 3) {
                  var3 = tcbPlayer[0].obj.prio - tcbPlayer[0].obj.iActPrio;
                  var2 = tcbPlayer[1].obj.prio - tcbPlayer[1].obj.iActPrio;
                  if (var3 <= var2) {
                     var2 = var3;
                  }

                  this._SetObj(var1, var2 - 1);
               } else if (_cameraPrio == 2) {
                  this._SetObj(var1, 204);
               } else {
                  var3 = tcbPlayer[0].obj.prio - tcbPlayer[0].obj.iActPrio;
                  var2 = tcbPlayer[1].obj.prio - tcbPlayer[1].obj.iActPrio;
                  if (var3 <= var2) {
                     var2 = var3;
                  }

                  this._SetObj(var1, var2 - 3);
               }
            }

            objExec.Work[0] = _screenoffect_frame[0];
            objExec.Work[1] = _screenoffect_frame[1];
            objExec.Work[2] = _screenoffect_frame[2];
            objExec.Work[3] = _screenoffect_frame[3];
            objExec.Work[4] = _screenoffect_frame[4];
            objExec.Work[5] = _screenoffect_frame[5];
            objExec.Work[6] = 1;
         }
         break;
      case 32:
         tcbNow._work[1] = 0;
         tcbNow.md = 33;
         tcbNow.lp = 0;
         break;
      case 33:
         var7 = tcbNow.prio + 1;
         int var34 = tcbNow._work[2];
         var8 = tcbNow._work[3];
         if (tcbPlayer[var34] != null && tcbPlayer[var8] != null && tcbPlayer[var34].obj != null && tcbPlayer[var8].obj != null) {
            var2 = tcbPlayer[var34].obj.x >> 16;
            var3 = tcbPlayer[var34].obj.y >> 16;
            int var31 = tcbPlayer[var8].obj.x >> 16;
            var27 = tcbPlayer[var8].obj.y >> 16;
            var2 = Math.abs(var2 - var31);
            Math.abs(var3 - var27);
            var36 = tcbPlayer[var8].obj.prio;
            var35 = tcbPlayer[var8].obj.iActPrio;
            _commandButtonTmp = 0;
            var32 = 0;
            var5 = 0;
            if (tcbPlayer[var34].obj.ano != 10 && tcbPlayer[var34].obj.ano != 11 && tcbPlayer[var34].obj.ano != 12) {
               if (PlayerAir[var34]) {
                  var32 = 80;
               }
            } else {
               var32 = 40;
            }

            if (var2 >= 80) {
               if (var2 < 160) {
                  label510: {
                     tcbNow._work[1] = 0;
                     if (iMissionJoyFillter != 0) {
                        var2 = var32;
                        var24 = var5;
                        if (iMissionJoyFillter != 2) {
                           break label510;
                        }
                     }

                     var2 = CPURand[0];
                     var2 = var32 + 5;
                     var24 = var5;
                  }
               } else if (var2 < 320) {
                  label513: {
                     tcbNow._work[1] = 1;
                     var5 = 1;
                     if (iMissionJoyFillter != 0) {
                        var2 = var32;
                        var24 = var5;
                        if (iMissionJoyFillter != 3) {
                           break label513;
                        }
                     }

                     var2 = CPURand[0];
                     var2 = var32 + 10;
                     var24 = var5;
                  }
               } else {
                  label795: {
                     tcbNow._work[1] = 2;
                     var5 = 2;
                     if (iMissionJoyFillter != 0 && iMissionJoyFillter != 5) {
                        var2 = var32;
                        var24 = var5;
                        if (iMissionJoyFillter != 6) {
                           break label795;
                        }
                     }

                     if (100 <= Synchro[var34]) {
                        tcbNow._work[1] = 3;
                     } else {
                        var2 = CPURand[0];
                     }

                     var2 = var32 + 15;
                     var24 = var5;
                  }
               }
            } else {
               if (iMissionJoyFillter == 0 || iMissionJoyFillter == 1) {
                  var2 = CPURand[0];
               }

               tcbNow._work[1] = 0;
               var24 = var5;
               var2 = var32;
            }

            var3 = var2;
            if (Synchro[var34] >= 100) {
               var3 = var2 + 20;
            }

            _commandButtonTmp = var3;
            this._TKilx(var1, var7, var7);
            if (iMarkVisible != 1 && tcbPlayer[var8].obj.ano != 28 && (iEventStatus & 1795) == 0 && Life[0] > 0 && Life[1] > 0 && tcbNow._work[1] >= 0) {
               this.CreatePanelSingle(var1, var7, 5, tcbNow._work[1] + 212, var36 - var35 + 2, 0, var31, var27);
               if (tcbNow._work[1] > 2) {
                  tcbNow._work[1] = 2;
               }

               this.CreatePanelSingle(var1, var7, 5, var24 + 132, 302, 0, 240, 280);
            }
         }
         break;
      case 34:
         this._SetAct(var1, 131072, 0);
         this._SetObj(var1, tcbNow._work[0]);
         objExec.x = tcbNow._work[1];
         objExec.y = tcbNow._work[2];
         objExec.Work[0] = tcbNow._work[3];
         objExec.Work[1] = tcbNow._work[4];
         objExec.Work[2] = tcbNow._work[5];
         objExec.Work[3] = tcbNow._work[6];
         objExec.Work[4] = tcbNow._work[8];
         if (tcbNow._work[7] == 1) {
            objExec.iGlobalAlpha = 1;
            tcbNow.md = 36;
            tcbNow.lp = 0;
         } else if (tcbNow._work[7] == 2) {
            objExec.iGlobalAlpha = 254;
            tcbNow.md = 36;
            tcbNow.lp = 0;
         } else {
            objExec.iGlobalAlpha = 255;
            tcbNow.md = 35;
            tcbNow.lp = 0;
         }
         break;
      case 36:
         ObjReq var19;
         if (tcbNow._work[7] == 1) {
            var19 = objExec;
            var19.iGlobalAlpha += 24;
            if (objExec.iGlobalAlpha >= 255) {
               tcbNow.md = 35;
               tcbNow.lp = 0;
               objExec.iGlobalAlpha = 255;
            }
         } else if (tcbNow._work[7] == 2) {
            var19 = objExec;
            var19.iGlobalAlpha -= 24;
            if (objExec.iGlobalAlpha <= 0) {
               tcbNow.md = 35;
               tcbNow.lp = 0;
               objExec.iGlobalAlpha = 0;
            }
         }
         break;
      case 37:
         this.controller.Init();

         for(var2 = 0; var2 < 10; ++var2) {
            this.padID[var2] = -1;
            iGamePadWork[var2] = 0;
         }

         if (iControlType[iPlayerNo] != 2) {
            this.padID[0] = this.controller.AddPad(90, 237, 230, 0, 1, 0);
            this.padID[1] = this.controller.AddPad(430, 268, 48, 0, 4, 16640);
            iGamePadWork[0] = -1;
            iGamePadWork[1] = -1;
            if (iControlType[iPlayerNo] == 1) {
               this.padID[2] = this.controller.AddPad(340, 268, 48, 0, 4, 1048576);
               this.padID[3] = this.controller.AddPad(380, 218, 48, 0, 4, 2097152);
               this.padID[4] = this.controller.AddPad(440, 188, 48, 0, 4, 4194304);
               iGamePadWork[2] = -1;
               iGamePadWork[3] = -1;
               iGamePadWork[4] = -1;
               this.padID[5] = this.controller.AddPad(440, 128, 48, 0, 4, 8388608);
               iGamePadWork[5] = -1;
            }
         }

         if (tcbNow._work[1] == 0) {
            this.padID[6] = this.controller.AddPad(60, 40, 108, 0, 4, 553648128);
         } else {
            this.padID[6] = this.controller.AddPad(420, 40, 108, 0, 4, 553648128);
         }

         iGamePadWork[6] = -1;
         bBTSendGo = true;
         iBTJoyCount = 30;
         iJoyBufCount = 0;
         _commandButtonTmp2[0] = 0;
         _commandButtonTmp2[1] = 0;
         _commandButtonTmp2[2] = 0;
         if (iPlayMode != 8) {
            bBTSend = false;
            bBTRevOK = false;
            bBTDataSetOK = false;
         }

         tcbNow.md = 38;
         tcbNow.lp = 0;
         break;
      case 38:
         int var13 = tcbNow._work[1];
         int var14 = 1 - var13;
         int[] var17 = new int[3];
         var3 = tcbNow.prio + 1;
         var8 = tcbNow._work[0];
         var17[0] = this.controller.GetKey(this.padID[0], 2);
         var5 = 0;
         byte var12 = 0;
         byte var11 = 0;
         short var6 = 0;
         byte var10 = 0;
         byte var9 = 0;
         if (!bPause) {
            if (TouchesXPos[0] > 220 && TouchesXPos[0] < 260 && TouchesYPos[0] > 0 && TouchesYPos[0] < 60 && TouchesStatus[0] != 0 && iPlayMode != 8 && bGameStart) {
               bPause = true;
               bTaskSkip = true;
            } else if (bResume) {
               this.CreateGamepad(var1, var13);
            } else {
               byte var20;
               if (iMarkVisible != 1 && bGameStart) {
                  if (iControlType[iPlayerNo] != 2 && iGamePadWork[this.padID[0]] != var17[0]) {
                     this._TKilx(var1, var3, var3);
                     var4 = this.controller.GetX(this.padID[0]);
                     var2 = this.controller.GetY(this.padID[0]);
                     iGamePadWork[this.padID[0]] = var17[0];
                     if ((var17[0] & 1) != 0 && (var17[0] & 4) != 0) {
                        this.CreatePanelSingle(var1, var3, 5, 208, var8, 0, var4, var2);
                     } else if ((var17[0] & 1) != 0 && (var17[0] & 8) != 0) {
                        this.CreatePanelSingle(var1, var3, 5, 202, var8, 0, var4, var2);
                     } else if ((var17[0] & 2) != 0 && (var17[0] & 4) != 0) {
                        this.CreatePanelSingle(var1, var3, 5, 206, var8, 0, var4, var2);
                     } else if ((var17[0] & 2) != 0 && (var17[0] & 8) != 0) {
                        this.CreatePanelSingle(var1, var3, 5, 204, var8, 0, var4, var2);
                     } else if ((var17[0] & 1) != 0) {
                        this.CreatePanelSingle(var1, var3, 5, 201, var8, 0, var4, var2);
                     } else if ((var17[0] & 2) != 0) {
                        this.CreatePanelSingle(var1, var3, 5, 205, var8, 0, var4, var2);
                     } else if ((var17[0] & 4) != 0) {
                        this.CreatePanelSingle(var1, var3, 5, 207, var8, 0, var4, var2);
                     } else if ((var17[0] & 8) != 0) {
                        this.CreatePanelSingle(var1, var3, 5, 203, var8, 0, var4, var2);
                     } else {
                        this.CreatePanelSingle(var1, var3, 5, 200, var8, 0, var4, var2);
                     }
                  }

                  var20 = 0;
                  if (iControlType[iPlayerNo] == 2) {
                     var20 = 5;
                  }

                  var4 = var20;
                  var2 = var3;

                  while(true) {
                     int var15;
                     short var23;
                     if (var4 >= 7) {
                        var20 = var12;
                        var7 = var10;
                        var8 = var9;
                        if (iControlType[iPlayerNo] != 2) {
                           break;
                        }

                        var2 = this.controller.GetKey(this.padID[6], 0);
                        short var26 = var11;
                        var24 = var5;
                        if (!AICtrl[var13]) {
                           var26 = var11;
                           var24 = var5;
                           if (PlayerAttack[var13] == 0) {
                              var26 = var11;
                              var24 = var5;
                              if (var2 != 0) {
                                 if (!AngryOn[var13]) {
                                    var26 = var11;
                                    var24 = var5;
                                    if (Angry[var13] >= 100) {
                                       var24 = 18;
                                       var26 = 200;
                                    }
                                 } else {
                                    var26 = var11;
                                    var24 = var5;
                                    if (Synchro[var13] >= 200) {
                                       var24 = 18;
                                       var26 = 201;
                                    }
                                 }
                              }
                           }
                        }

                        var6 = var26;
                        var20 = var24;
                        var7 = var10;
                        var8 = var9;
                        if (iMissionJoyFillter == 255) {
                           break;
                        }

                        var36 = tcbPlayer[var13].obj.x >> 16;
                        var35 = (tcbPlayer[var13].obj.y >> 16) - 40;
                        var8 = tcbPlayer[var14].obj.x >> 16;
                        var15 = (tcbPlayer[var14].obj.y >> 16) - 40;
                        short var25 = var26;
                        var20 = var24;
                        if (var24 == 0) {
                           if (!AICtrl[var13]) {
                              var27 = 0;

                              while(true) {
                                 var25 = var26;
                                 var20 = var24;
                                 if (var27 >= 2) {
                                    break;
                                 }

                                 if (TouchesXPosGame[var27] > var8 - 48 && TouchesXPosGame[var27] < var8 + 48 && TouchesYPosGame[var27] > var15 - 48 && TouchesYPosGame[var27] < var15 + 48 && TouchesStatus[var27] != 0 && (PlayerAttack[var13] == 0 || CancelTime[var13] > 0 && (PlayerState[var13] & 524288) == 0 && (tcbPlayer[var13].obj.wOptFlag & 512) != 0)) {
                                    var25 = (short)(this.ChrGameData[var13 + 3].piGameData[this.ChrGameData[var13 + 3].piGameDataPos[42] + _commandButtonTmp * 2 * this.ChrGameData[var13 + 3].piGameDataXSize[42] + 0 + 1] << 8 & '\uff00' | this.ChrGameData[var13 + 3].piGameData[this.ChrGameData[var13 + 3].piGameDataPos[42] + _commandButtonTmp * 2 * this.ChrGameData[var13 + 3].piGameDataXSize[42] + 0]);
                                    if (var25 > 0) {
                                       var20 = 1;
                                       _commandButtonTmp2[0] = _commandButtonTmp + 1;
                                       _commandButtonTmp2[1] = 4;
                                       _commandButtonTmp2[2] = 0;
                                       break;
                                    }
                                 }

                                 ++var27;
                              }
                           } else {
                              var25 = var26;
                              var20 = var24;
                              if (_commandButtonTmp2[1] > 0) {
                                 short var28 = (short)(this.ChrGameData[var13 + 3].piGameData[this.ChrGameData[var13 + 3].piGameDataPos[42] + _commandButtonTmp2[0] * 2 * this.ChrGameData[var13 + 3].piGameDataXSize[42] + 0 + 1] << 8 & '\uff00' | this.ChrGameData[var13 + 3].piGameData[this.ChrGameData[var13 + 3].piGameDataPos[42] + _commandButtonTmp2[0] * 2 * this.ChrGameData[var13 + 3].piGameDataXSize[42] + 0]);
                                 var23 = (short)(this.ChrGameData[var13 + 3].piGameData[this.ChrGameData[var13 + 3].piGameDataPos[42] + _commandButtonTmp2[0] * 2 * this.ChrGameData[var13 + 3].piGameDataXSize[42] + 2 + 1] << 8 & '\uff00' | this.ChrGameData[var13 + 3].piGameData[this.ChrGameData[var13 + 3].piGameDataPos[42] + _commandButtonTmp2[0] * 2 * this.ChrGameData[var13 + 3].piGameDataXSize[42] + 2]);
                                 if (var28 != 0 && var23 * 100 <= Synchro[var13]) {
                                    if (_commandButtonTmp2[2] <= 0 && (tcbPlayer[var14].md == 876 || tcbPlayer[var14].md == 877 || tcbPlayer[var14].md == 908)) {
                                       for(var2 = 0; var2 < tcbPlayer[var13].obj.iHitNum; ++var2) {
                                          if (tcbPlayer[var13].obj.hit[var2 * 5 + 0] == 2) {
                                             _commandButtonTmp2[2] = 6;
                                             break;
                                          }
                                       }
                                    }

                                    var25 = var26;
                                    var20 = var24;
                                    if (_commandButtonTmp2[2] > 0) {
                                       var17 = _commandButtonTmp2;
                                       var10002 = var17[2]--;
                                       var27 = 0;

                                       while(true) {
                                          var25 = var26;
                                          var20 = var24;
                                          if (var27 >= 2) {
                                             break;
                                          }

                                          if (TouchesXPosGame[var27] > var8 - 88 && TouchesXPosGame[var27] < var8 + 88 && TouchesYPosGame[var27] > var15 - 88 && TouchesYPosGame[var27] < var15 + 88 && TouchesStatus[var27] != 0) {
                                             var20 = 1;
                                             var25 = var28;
                                             var17 = _commandButtonTmp2;
                                             var10002 = var17[0]++;
                                             var17 = _commandButtonTmp2;
                                             var10002 = var17[1]--;
                                             _commandButtonTmp2[2] = 0;
                                             break;
                                          }

                                          ++var27;
                                       }
                                    }
                                 } else {
                                    _commandButtonTmp2[1] = 0;
                                    var25 = var26;
                                    var20 = var24;
                                 }
                              }
                           }
                        }

                        var32 = var20;
                        if (!AICtrl[var13]) {
                           var32 = var20;
                           if (PlayerAttack[var13] == 0) {
                              var32 = var20;
                              if (Synchro[var13] < SynchroMax[var13]) {
                                 var32 = var20;
                                 if (var20 == 0) {
                                    var4 = 0;

                                    while(true) {
                                       var32 = var20;
                                       if (var4 >= 5) {
                                          break;
                                       }

                                       if (TouchesStatus[var4] == 0 && TouchesXPosGame[var4] != 0 && TouchesXPosGame[var4] > var36 - 32 && TouchesXPosGame[var4] < var36 + 32 && TouchesYPosGame[var4] > var35 - 32 && TouchesYPosGame[var4] < var35 + 64 && PlayerAttack[var13] == 0) {
                                          var32 = 2;
                                          break;
                                       }

                                       ++var4;
                                    }
                                 }
                              }
                           }
                        }

                        var6 = var25;
                        var20 = var32;
                        var7 = var10;
                        var8 = var9;
                        if (AICtrl[var13]) {
                           break;
                        }

                        var6 = var25;
                        var20 = var32;
                        var7 = var10;
                        var8 = var9;
                        if (PlayerAttack[var13] != 0) {
                           break;
                        }

                        if (tcbPlayer[var13].md >= 923) {
                           var6 = var25;
                           var20 = var32;
                           var7 = var10;
                           var8 = var9;
                           if (tcbPlayer[var13].md <= 928) {
                              break;
                           }
                        }

                        var6 = var25;
                        var20 = var32;
                        var7 = var10;
                        var8 = var9;
                        if (var32 != 0) {
                           break;
                        }

                        boolean var33 = false;
                        var4 = 0;

                        boolean var37;
                        while(true) {
                           var37 = var33;
                           if (var4 >= 3) {
                              break;
                           }

                           if (_commandButtonBuf[var13][var4] == 95 || _commandButtonBuf[var13][var4] == 135 || _commandButtonBuf[var13][var4] == 175 || _commandButtonWork[var13][var4] == 95 || _commandButtonWork[var13][var4] == 135 || _commandButtonWork[var13][var4] == 175) {
                              var37 = true;
                              break;
                           }

                           ++var4;
                        }

                        boolean var29;
                        label592: {
                           if (_commandButton[var13] != 95 && _commandButton[var13] != 135 && _commandButton[var13] != 175 && _commandButtonWork[var13][iJoyBufCount] != 95 && _commandButtonWork[var13][iJoyBufCount] != 135) {
                              var29 = var37;
                              if (_commandButtonWork[var13][iJoyBufCount] != 175) {
                                 break label592;
                              }
                           }

                           var29 = true;
                        }

                        var6 = var25;
                        var20 = var32;
                        var7 = var10;
                        var8 = var9;
                        if (var29) {
                           break;
                        }

                        if (TapType[0] == 0) {
                           if (PlayerAir[var13]) {
                              var4 = this.getAngleKey(var1, TapXPos[0], TapYPos[0], tcbPlayer[var13].obj.x >> 16, tcbPlayer[var13].obj.y >> 16);
                              if ((var4 & 1) != 0) {
                                 var20 = 8;
                                 var6 = var25;
                                 var7 = var10;
                                 var8 = var9;
                              } else if ((var4 & 4) != 0) {
                                 var20 = 9;
                                 var6 = var25;
                                 var7 = var10;
                                 var8 = var9;
                              } else if ((var4 & 8) != 0) {
                                 var20 = 10;
                                 var6 = var25;
                                 var7 = var10;
                                 var8 = var9;
                              } else {
                                 var6 = var25;
                                 var20 = var32;
                                 var7 = var10;
                                 var8 = var9;
                                 if ((var4 & 2) != 0) {
                                    var20 = 11;
                                    var6 = var25;
                                    var7 = var10;
                                    var8 = var9;
                                 }
                              }
                              break;
                           }

                           var4 = this.getAngleKey(var1, TapXPos[0], TapYPos[0], tcbPlayer[var13].obj.x >> 16, tcbPlayer[var13].obj.y >> 16);
                           if ((var4 & 1) != 0 && (var4 & 4) != 0) {
                              var20 = 12;
                              var6 = var25;
                              var7 = var10;
                              var8 = var9;
                              break;
                           }

                           if ((var4 & 1) != 0 && (var4 & 8) != 0) {
                              var20 = 13;
                              var6 = var25;
                              var7 = var10;
                              var8 = var9;
                              break;
                           }

                           if ((var4 & 1) != 0) {
                              var20 = 14;
                              var6 = var25;
                              var7 = var10;
                              var8 = var9;
                           } else if ((var4 & 4) != 0) {
                              var20 = 15;
                              var6 = var25;
                              var7 = var10;
                              var8 = var9;
                           } else {
                              var6 = var25;
                              var20 = var32;
                              var7 = var10;
                              var8 = var9;
                              if ((var4 & 8) != 0) {
                                 var20 = 16;
                                 var6 = var25;
                                 var7 = var10;
                                 var8 = var9;
                              }
                           }
                           break;
                        }

                        var6 = var25;
                        var20 = var32;
                        var7 = var10;
                        var8 = var9;
                        if (TapType[0] == 1) {
                           var20 = 17;
                           var7 = PlayerXPos[var13] + (TapXPos[0] - var36 << 16);
                           var8 = PlayerYPos[var13] + (TapYPos[0] - var35 << 16);
                           var6 = var25;
                        }
                        break;
                     }

                     if (this.padID[var4 + 1] == -1) {
                        var3 = var2;
                     } else {
                        byte var21 = -1;
                        var17[1] = this.controller.GetKey(this.padID[var4 + 1], 1);
                        var17[2] = this.controller.GetKey(this.padID[var4 + 1], 2);
                        int var16 = this.controller.GetX(this.padID[var4 + 1]);
                        var15 = this.controller.GetY(this.padID[var4 + 1]);
                        var7 = var2 + 1;
                        if (var4 == 4 && tcbNow._work[10] != Synchro[iPlayerNo] && Synchro[iPlayerNo] < 100) {
                        }

                        if (var17[2] != 0) {
                           var23 = var21;
                           if (iGamePadWork[this.padID[var4 + 1]] == 0) {
                              iGamePadWork[this.padID[var4 + 1]] = 1;
                              var23 = var21;
                              switch(var4) {
                              case 0:
                                 this._TKilx(var1, var7, var7);
                                 var23 = 210;
                                 break;
                              case 1:
                                 this._TKilx(var1, var7, var7);
                                 var23 = 331;
                                 break;
                              case 2:
                                 this._TKilx(var1, var7, var7);
                                 var23 = 334;
                                 break;
                              case 3:
                                 this._TKilx(var1, var7, var7);
                                 var23 = 337;
                                 break;
                              case 4:
                                 this._TKilx(var1, var7, var7);
                                 var23 = var21;
                                 if (Synchro[iPlayerNo] >= 100) {
                                    var23 = 340;
                                 }
                              case 5:
                                 break;
                              case 6:
                                 bPause = true;
                                 var23 = var21;
                                 break;
                              default:
                                 var23 = var21;
                              }
                           }
                        } else {
                           label693: {
                              if (iGamePadWork[this.padID[var4 + 1]] != 1 && iGamePadWork[this.padID[var4 + 1]] != -1) {
                                 var23 = var21;
                                 if (var4 != 4) {
                                    break label693;
                                 }

                                 var23 = var21;
                                 if (tcbNow._work[10] == Synchro[iPlayerNo]) {
                                    break label693;
                                 }
                              }

                              switch(var4) {
                              case 0:
                                 this._TKilx(var1, var7, var7);
                                 var23 = 209;
                                 break;
                              case 1:
                                 this._TKilx(var1, var7, var7);
                                 var23 = 330;
                                 break;
                              case 2:
                                 this._TKilx(var1, var7, var7);
                                 var23 = 333;
                                 break;
                              case 3:
                                 this._TKilx(var1, var7, var7);
                                 var23 = 336;
                                 break;
                              case 4:
                                 this._TKilx(var1, var7, var7);
                                 var23 = var21;
                                 if (Synchro[iPlayerNo] >= 100) {
                                    var23 = 339;
                                 }
                                 break;
                              default:
                                 var23 = var21;
                              }
                           }

                           short var22 = var23;
                           if (var4 == 4) {
                              var22 = var23;
                              if (tcbNow._work[10] < 100) {
                                 var22 = var23;
                                 if (Synchro[iPlayerNo] >= 100) {
                                    this._TKilx(var1, var7, var7);
                                    var22 = 339;
                                 }
                              }
                           }

                           iGamePadWork[this.padID[var4 + 1]] = 0;
                           var23 = var22;
                        }

                        var3 = var7;
                        if (var23 >= 0) {
                           this.CreatePanelSingle(var1, var7, 5, var23, var8, 0, var16, var15);
                           var3 = var7;
                        }
                     }

                     ++var4;
                     var2 = var3;
                  }
               } else {
                  this._TKilx(var1, var3, var3 + 6);
                  iGamePadWork[0] = -1;
                  iGamePadWork[1] = -1;
                  iGamePadWork[2] = -1;
                  iGamePadWork[3] = -1;
                  iGamePadWork[4] = -1;
                  iGamePadWork[5] = -1;
                  iGamePadWork[6] = -1;
                  iGamePadWork[7] = -1;
                  var8 = var9;
                  var7 = var10;
                  var20 = var12;
               }

               if (bBTSend || bBTRevOK) {
                  if (iJoyBufCount < 3) {
                     CPURandBuf[0][iJoyBufCount] = (int)(this.genrand_int32(var1) % 1000L);
                     CPURand[0] = CPURandWork[0][iJoyBufCount];
                     CPURand[1] = CPURand[0];
                     TapXBTBuf[var13][iJoyBufCount] = TouchesXPosGame[0];
                     TapYBTBuf[var13][iJoyBufCount] = TouchesYPosGame[0];
                     TapXBT[var13] = TapXBTWork[var13][iJoyBufCount];
                     TapYBT[var13] = TapYBTWork[var13][iJoyBufCount];
                     TapXBTWork[var13][iJoyBufCount] = 0;
                     TapYBTWork[var13][iJoyBufCount] = 0;
                     if (iPlayMode == 8) {
                        TapXBT[var14] = TapXBTWork[var14][iJoyBufCount];
                        TapYBT[var14] = TapYBTWork[var14][iJoyBufCount];
                        TapXBTWork[var14][iJoyBufCount] = 0;
                        TapYBTWork[var14][iJoyBufCount] = 0;
                     }

                     JoyTrigBuf[var13][iJoyBufCount] = 0;
                     JoyBuf[var13][iJoyBufCount] = 0;
                     if (iMarkVisible == 0) {
                        JoyTrigBuf[var13][iJoyBufCount] = this.GetGamePadKey(var1, 0);
                        JoyBuf[var13][iJoyBufCount] = this.GetGamePadKey(var1, 2);
                        if (!AngryOn[var13]) {
                           if (Angry[var13] < 100) {
                              var17 = JoyTrigBuf[var13];
                              var3 = iJoyBufCount;
                              var17[var3] &= -553648129;
                              var17 = JoyBuf[var13];
                              var3 = iJoyBufCount;
                              var17[var3] &= -553648129;
                           } else if ((JoyTrigBuf[var13][iJoyBufCount] & 553648128) != 0 && PlayerAttack[var13] != 0) {
                              var17 = JoyTrigBuf[var13];
                              var3 = iJoyBufCount;
                              var17[var3] &= -553648129;
                              var17 = JoyBuf[var13];
                              var3 = iJoyBufCount;
                              var17[var3] &= -553648129;
                           }
                        } else if (Synchro[var13] < 200) {
                           var17 = JoyTrigBuf[var13];
                           var3 = iJoyBufCount;
                           var17[var3] &= -553648129;
                           var17 = JoyBuf[var13];
                           var3 = iJoyBufCount;
                           var17[var3] &= -553648129;
                        }
                     }

                     JoyTrig[var13] = JoyTrigWork[var13][iJoyBufCount];
                     Joy[var13] = JoyWork[var13][iJoyBufCount];
                     if (iPlayMode != 8 && this.isMission(var1) == 0 && iMissionJoyFillter != 0 && iStage <= 3) {
                        var17 = JoyTrig;
                        var17[var13] &= iMissionJoyFillter;
                        var17 = Joy;
                        var17[var13] &= iMissionJoyFillter;
                     }

                     JoyTrigWork[var13][iJoyBufCount] = 0;
                     JoyWork[var13][iJoyBufCount] = 0;
                     if (iPlayMode == 8) {
                        if (iBTJoyCount <= 0) {
                           JoyTrig[var14] = JoyTrigWork[var14][iJoyBufCount];
                           Joy[var14] = JoyWork[var14][iJoyBufCount];
                        } else {
                           JoyTrig[var14] = 0;
                           Joy[var14] = 0;
                           JoyTrig[var13] = 0;
                           Joy[var13] = 0;
                        }

                        JoyTrigWork[var14][iJoyBufCount] = 0;
                        JoyWork[var14][iJoyBufCount] = 0;
                     }

                     TouchesCommandBuf[var13][iJoyBufCount] = var20;
                     _commandButtonBuf[var13][iJoyBufCount] = var6;
                     TouchesVal1Buf[var13][iJoyBufCount] = var7;
                     TouchesVal2Buf[var13][iJoyBufCount] = var8;
                     TouchesCommand[var13] = TouchesCommandWork[var13][iJoyBufCount];
                     _commandButton[var13] = _commandButtonWork[var13][iJoyBufCount];
                     TouchesVal1[var13] = TouchesVal1Work[var13][iJoyBufCount];
                     TouchesVal2[var13] = TouchesVal2Work[var13][iJoyBufCount];
                     TouchesCommandWork[var13][iJoyBufCount] = 0;
                     _commandButtonWork[var13][iJoyBufCount] = 0;
                     TouchesVal1Work[var13][iJoyBufCount] = 0;
                     TouchesVal2Work[var13][iJoyBufCount] = 0;
                     if (iPlayMode == 8) {
                        if (iBTJoyCount <= 0) {
                           TouchesCommand[var14] = TouchesCommandWork[var14][iJoyBufCount];
                           _commandButton[var14] = _commandButtonWork[var14][iJoyBufCount];
                           TouchesVal1[var14] = TouchesVal1Work[var14][iJoyBufCount];
                           TouchesVal2[var14] = TouchesVal2Work[var14][iJoyBufCount];
                        } else {
                           TouchesCommand[var14] = 0;
                           _commandButton[var14] = 0;
                           TouchesVal1[var14] = 0;
                           TouchesVal2[var14] = 0;
                           TouchesCommand[var13] = 0;
                           _commandButton[var13] = 0;
                           TouchesVal1[var13] = 0;
                           TouchesVal2[var13] = 0;
                        }

                        TouchesCommandWork[var14][iJoyBufCount] = 0;
                        _commandButtonWork[var14][iJoyBufCount] = 0;
                        TouchesVal1Work[var14][iJoyBufCount] = 0;
                        TouchesVal2Work[var14][iJoyBufCount] = 0;
                     }

                     --iBTJoyCount;
                  }

                  ++iJoyBufCount;
               }

               if (!bBTSend && !bBTDataSetOK || bBTSendGo) {
                  bBTSendGo = false;
                  this.BTDataSet(var1, 3);
                  iJoyBufCount = 0;
               }

               tcbNow._work[10] = Synchro[iPlayerNo];
               tcbNow._work[11] = Angry[iPlayerNo];
            }
         }
         break;
      case 39:
         this._SetAct(var1, tcbNow._work[0], tcbNow._work[1]);
         this._SetObj(var1, tcbNow._work[2]);
         this.SpriteSet(objExec, tcbNow._work[3]);
         tcbNow._work[10] = 0;
         tcbNow.md = 40;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 40:
         objExec.img = 0;
         objExec.apt = 1;
         objExec.x = tcbNow._work[4] << 16;
         objExec.y = tcbNow._work[5] << 16;
         this.SpriteRun(objExec);
         tcbNow.md = 41;
         tcbNow.lp = 0;
         break;
      case 41:
         if (tcbNow._work[6] <= tcbNow._work[10]) {
            tcbNow._work[10] = 0;
            this.SpriteRun(objExec);
         } else {
            var18 = tcbNow._work;
            var10002 = var18[10]++;
         }
      }

   }

   public void Game9(GlobalWork var1, int var2) {
      int[] var32;
      String var34;
      int var3;
      short var35;
      String var37;
      boolean var10001;
      int var10002;
      switch(var2) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 120:
      default:
         break;
      case 54:
         resk = this.GetString(var1, 1, 0, 296);

         byte[] var36;
         try {
            var36 = Utility.readDataRaw(var1.context, "mk.bin");
         } catch (Exception var11) {
            var36 = null;
         }

         if (var36 == null || resk == null) {
            tcbNow.md = 77;
            tcbNow.lp = 0;
         }

         tcbNow.md = 60;
         tcbNow.lp = 0;
         break;
      case 60:
         if (ConfigData[12533] == 0) {
            tcbNow.md = 61;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 82;
            tcbNow.lp = 0;
         }

         var34 = this.GetString(var1, 0, 7, 29);
         if (var34 == null) {
            tcbNow.md = 77;
            tcbNow.lp = 0;
         } else {
            resk = resk + var34;
         }
         break;
      case 61:
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 0, 274, 16387, 0, 0, 0);
         this.TextGDTString(var1, 0, iLanguage, 256, 24597, 16469, 102, 112, 16);
         this.TextGDTString(var1, 0, iLanguage, 11, 24597, 16469, 98, 236, 16);
         this.TextGDTString(var1, 0, iLanguage, 12, 24597, 16469, 340, 236, 16);
         tcbNow._work[14] = -1;
         tcbNow.md = 62;
         tcbNow.lp = 0;
         this.Game(var1, tcbNow.md);
         break;
      case 62:
         if (this.CheckBack(var1, 10000, 10000, TouchesStatus[0])) {
            tcbNow._work[14] = 0;
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow.md = 63;
            tcbNow.lp = 0;
         } else {
            var35 = 306;

            for(var2 = 0; var2 < 2; ++var2) {
               if (TouchesXPos[0] > var35 && TouchesXPos[0] < var35 + 120 && TouchesYPos[0] > 220 && TouchesYPos[0] < 220 + 50 && TouchesStatus[0] != 0) {
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  tcbNow._work[14] = var2;
                  tcbNow.md = 63;
                  tcbNow.lp = 0;
                  break;
               }

               var35 = 60;
            }
         }

         if (tcbNow._work[14] >= 0) {
            this._TKilx(var1, 24596, 24596);
            this.CreatePanelSingle(var1, 24596, 0, tcbNow._work[14] + 255, 16387, 0, 0, 0);
         }
         break;
      case 63:
         this._TLoop(var1, 45, 64);
         break;
      case 64:
         if (tcbNow._work[14] == 0) {
            this._TKilx(var1, 8193, 65535);
            tcbNow.md = 65;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 82;
            tcbNow.lp = 0;
         }
         break;
      case 65:
         this._TLoop(var1, 3, 66);
         break;
      case 66:
         this._TKilx(var1, 4096, 65535);
         var1.bThreadActive = false;
         break;
      case 67:
         if (TouchesStatus[0] != 0) {
            tcbNow.md = 685;
            tcbNow.lp = 0;
         }
         break;
      case 68:
         label504: {
            try {
               byte[] var39 = Utility.http2data("http://sd01.fas.ne.jp/~mig27.vis.ne.jp/dragonballtap/appversion.php");
               var34 = new String(var39, "Shift_JIS");
               if (var34.equals("1")) {
                  tcbNow.md = 82;
                  tcbNow.lp = 0;
                  break;
               }
            } catch (Exception var31) {
               var10001 = false;
               break label504;
            }

            try {
               tcbNow.md = 69;
               tcbNow.lp = 0;
               break;
            } catch (Exception var30) {
               var10001 = false;
            }
         }

         tcbNow.md = 71;
         tcbNow.lp = 0;
         break;
      case 69:
         this._TKilx(var1, 24576, 24676);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 0, 296, 16387, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 250, 24576, 16394, 0, 130, 16);
         tcbNow.md = 70;
         tcbNow.lp = 0;
         break;
      case 70:
         if (TouchesStatus[0] != 0) {
            var1.bThreadActive = false;
         }
         break;
      case 71:
         this._TKilx(var1, 28672, 28772);
         this.ClearCharDLALL(var1);
         this._TKilx(var1, 24576, 24676);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 0, 296, 16387, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 251, 24576, 16394, 120, 130, 16);
         tcbNow.md = 72;
         tcbNow.lp = 0;
         break;
      case 72:
         if (TouchesStatus[0] != 0) {
            tcbNow.md = 73;
            tcbNow.lp = 0;
         }
         break;
      case 73:
         this._TKilx(var1, 28672, 28772);
         this._TKilx(var1, 24576, 24676);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 0, 274, 16387, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 314, 24597, 16469, 72, 112, 16);
         this.TextGDTString(var1, 0, iLanguage, 11, 24597, 16469, 98, 236, 16);
         this.TextGDTString(var1, 0, iLanguage, 12, 24597, 16469, 340, 236, 16);
         tcbNow._work[14] = -1;
         tcbNow.md = 74;
         tcbNow.lp = 0;
         break;
      case 74:
         if (this.CheckBack(var1, 10000, 10000, TouchesStatus[0])) {
            tcbNow._work[14] = 0;
            iReqSENo = 0;
            this.PushSE(var1, 0);
            tcbNow.md = 75;
            tcbNow.lp = 0;
         } else {
            var35 = 306;

            for(var2 = 0; var2 < 2; ++var2) {
               if (TouchesXPos[0] > var35 && TouchesXPos[0] < var35 + 120 && TouchesYPos[0] > 220 && TouchesYPos[0] < 220 + 50 && TouchesStatus[0] != 0) {
                  iReqSENo = 0;
                  this.PushSE(var1, 0);
                  tcbNow._work[14] = var2;
                  tcbNow.md = 75;
                  tcbNow.lp = 0;
                  break;
               }

               var35 = 60;
            }
         }

         if (tcbNow._work[14] >= 0) {
            this._TKilx(var1, 24596, 24596);
            this.CreatePanelSingle(var1, 24596, 0, tcbNow._work[14] + 255, 16387, 0, 0, 0);
         }
         break;
      case 75:
         this._TLoop(var1, 45, 76);
         break;
      case 76:
         if (tcbNow._work[14] == 0) {
            this._TKilx(var1, 8192, 65535);
            var1.bThreadActive = false;
         } else {
            tcbNow.md = 82;
            tcbNow.lp = 0;
         }
         break;
      case 77:
         this._TKilx(var1, 28672, 28772);
         this.ClearCharDLALL(var1);
         this._TKilx(var1, 24576, 24676);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 0, 296, 16387, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 250, 24576, 16394, 130, 160, 16);
         tcbNow.md = 78;
         tcbNow.lp = 0;
         break;
      case 78:
         if (TouchesStatus[0] != 0) {
            this._TKilx(var1, 8192, 65535);
            var1.bThreadActive = false;
         }
         break;
      case 79:
         this._TKilx(var1, 28672, 28772);
         this._TKilx(var1, 24576, 24676);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 0, 296, 16387, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 255, 24576, 16394, 100, 160, 16);
         tcbNow.md = 72;
         tcbNow.lp = 0;
         break;
      case 80:
         this._TKilx(var1, 28672, 28772);
         this._TKilx(var1, 24576, 24676);
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.CreatePanelSingle(var1, 24596, 0, 296, 16387, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 252, 24576, 16394, 100, 160, 16);
         tcbNow.md = 81;
         tcbNow.lp = 0;
         break;
      case 81:
         if (TouchesStatus[0] != 0) {
            tcbNow.md = 693;
            tcbNow.lp = 0;
         }
         break;
      case 82:
         this.DL_SetAPI(var1, 0);
         tcbNow.md = 83;
         tcbNow.lp = 0;
         break;
      case 83:
         var37 = this.GetString(var1, 1, 0, 297);
         if (var37 == null) {
            tcbNow.md = 77;
            tcbNow.lp = 0;
         } else {
            resk = resk + var37;
            var34 = this.GetString(var1, 0, 7, 27);
            if (var34 == null) {
               tcbNow.md = 77;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 84;
               tcbNow.lp = 0;
            }
         }
         break;
      case 84:
         this._TKilx(var1, 24576, 24676);
         tcbNow._work[9] = 0;
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 253, 24576, 16385, 138, 100, 16);
         this.CreatePanelSingle(var1, 24576, 0, 293, 16384, 0, 0, 0);
         this.CreatePanelSingle(var1, 24576, 5, 11, 16389, 0, 240, 160);
         this.CreatePanelSingle(var1, 24576, 5, 13, 16394, 0, 136, 216);
         tcbNow.md = 85;
         tcbNow.lp = 0;
         this._TKilx(var1, 28672, 28772);
         LoadingDataMax = 1;
         LoadingDataPos = 0;
         this._TaskMake(var1, 102, 28672);
         break;
      case 85:
         tcbNow.md = 86;
         tcbNow.lp = 0;
         break;
      case 86:
         if (!this.SmapDataInit(var1)) {
            if (ConfigData[1] == 0) {
               tcbNow.md = 71;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 80;
               tcbNow.lp = 0;
            }
         } else {
            tcbNow.md = 87;
            tcbNow.lp = 0;
         }
         break;
      case 87:
         if (this.SmapDataEnd(var1)) {
            LoadingDataPos = 1;
            tcbNow.md = 88;
            tcbNow.lp = 0;
         }
         break;
      case 88:
         if (this.SmapDataError(var1) != 0) {
            if (ConfigData[1] == 0) {
               tcbNow.md = 71;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 80;
               tcbNow.lp = 0;
            }
         } else {
            ConfigData[1] = 0;
            this._FILESave(var1);
            if (this.SmapDataCount(var1, 0) <= 0) {
               if (this.SmapDataCount(var1, 1) <= 0) {
                  this.CreateWipeInOut(var1, 1);
                  tcbNow.md = 97;
                  tcbNow.lp = 0;
               } else {
                  tcbNow.md = 93;
                  tcbNow.lp = 0;
               }
            } else {
               this._TKilx(var1, 28672, 28772);
               iCharCountSv = this.SmapDataCount(var1, 0);
               LoadingDataMax = this.SmapDataCount(var1, 0) + this.SmapDataCount(var1, 1);
               LoadingDataPos = 0;
               this._TaskMake(var1, 102, 28672);
               tcbNow.md = 89;
               tcbNow.lp = 0;
            }
         }
         break;
      case 89:
         if (tcbNow._work[9] < iCharCountSv) {
            tcbNow._work[8] = tcbNow._work[9];
            tcbNow._work[10] = this.SmapDataNo(var1, 0, tcbNow._work[9]);
            var3 = tcbNow._work[10];
            var2 = this.SmapDataVersion(var1, 0, tcbNow._work[9]);
            if (!this.CheckCharctorFiles(var1, var3) || this.GetCharVersion(var1, var3) != var2) {
               tcbNow.md = 91;
               tcbNow.lp = 0;
            }

            ++LoadingDataPos;
            var32 = tcbNow._work;
            var10002 = var32[9]++;
         } else {
            tcbNow.md = 90;
            tcbNow.lp = 0;
         }
         break;
      case 90:
         this._FILESave(var1);
         tcbNow.md = 93;
         tcbNow.lp = 0;
         break;
      case 91:
         this.DL_SetURL(var1, this.SmapDataURL(var1, 0, tcbNow._work[8]));
         tcbNow.md = 92;
         tcbNow.lp = 0;
         break;
      case 92:
         var2 = tcbNow._work[10];
         if (!bResume && this.DL_GetError(var1) == 0) {
            if (!this.DL_IsDownload(var1)) {
               if (this.DL_GetData(var1) != null) {
                  if (!this.pack_unpack(var1, this.DL_GetData(var1), this.DL_GetSize(var1), 0, var2)) {
                     this.DL_ClearData(var1);
                     ConfigData[1] = 0;
                     this.ClearCharDL(var1, var2);
                     this._FILESave(var1);
                     tcbNow.md = 79;
                     tcbNow.lp = 0;
                  } else {
                     this.SetCharVersion(var1, var2, this.SmapDataVersion(var1, 0, tcbNow._work[8]));
                     this.SetCharDL(var1, var2);
                     this.DL_ClearData(var1);
                     tcbNow.md = 89;
                     tcbNow.lp = 0;
                  }
               } else {
                  this.ClearCharDLALL(var1);
                  tcbNow.md = 71;
                  tcbNow.lp = 0;
               }
            }
         } else {
            this.DL_ClearData(var1);
            ConfigData[1] = 0;
            this.ClearCharDL(var1, var2);
            this._FILESave(var1);
            tcbNow.md = 79;
            tcbNow.lp = 0;
         }
         break;
      case 93:
         this._TKilx(var1, 24576, 24676);
         iCardCountSv = this.SmapDataCount(var1, 1);
         tcbNow._work[9] = 0;
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 253, 24576, 16385, 138, 100, 16);
         this.CreatePanelSingle(var1, 24576, 5, 11, 16389, 0, 240, 160);
         this.CreatePanelSingle(var1, 24576, 5, 13, 16389, 0, 136, 216);
         this.CreatePanelSingle(var1, 24576, 0, 293, 16384, 0, 0, 0);
         tcbNow.md = 94;
         tcbNow.lp = 0;
         break;
      case 94:
         tcbNow.md = 95;
         tcbNow.lp = 0;
         break;
      case 95:
         tcbNow.md = 96;
         tcbNow.lp = 0;
         break;
      case 96:
         if (tcbNow._work[9] < iCardCountSv) {
            tcbNow._work[8] = tcbNow._work[9];
            tcbNow._work[10] = this.SmapDataNo(var1, 1, tcbNow._work[9]);
            var3 = tcbNow._work[10];
            var2 = this.SmapDataVersion(var1, 1, tcbNow._work[9]);
            if (this.GetCardVersion(var1, var3 * 10 + 1) != var2) {
               bCardVersionSv[0] = (byte)var2;
               tcbNow.md = 100;
               tcbNow.lp = 0;
            }

            ++LoadingDataPos;
            var32 = tcbNow._work;
            var10002 = var32[9]++;
         } else {
            this.CreateWipeInOut(var1, 1);
            tcbNow.md = 97;
            tcbNow.lp = 0;
         }
         break;
      case 97:
         if (iFade == 255 || iFade == 0) {
            this._TKilx(var1, 8193, 65535);
            bDrawLoading = true;
            tcbNow.md = 98;
            tcbNow.lp = 0;
         }
         break;
      case 98:
         this._TLoop(var1, 10, 99);
         break;
      case 99:
         ConfigData[12533] = 1;
         ConfigData[1] = 1;
         this._FILESave(var1);
         if (iNewsEnd == 0) {
            tcbNow.md = 104;
            tcbNow.lp = 0;
         } else {
            tcbNow.md = 693;
            tcbNow.lp = 0;
         }
         break;
      case 100:
         this.DL_SetURL(var1, this.SmapDataURL(var1, 1, tcbNow._work[8]));
         tcbNow.md = 101;
         tcbNow.lp = 0;
         break;
      case 101:
         var2 = tcbNow._work[10];
         if (!bResume && this.DL_GetError(var1) == 0) {
            if (!this.DL_IsDownload(var1)) {
               if (this.DL_GetData(var1) != null) {
                  if (!this.pack_unpack(var1, this.DL_GetData(var1), this.DL_GetSize(var1), 1, tcbNow._work[8])) {
                     this.DL_ClearData(var1);
                     ConfigData[1] = 0;
                     this._FILESave(var1);
                     tcbNow.md = 79;
                     tcbNow.lp = 0;
                  } else {
                     this.DL_ClearData(var1);
                     tcbNow.md = 96;
                     tcbNow.lp = 0;
                  }
               } else {
                  this.ClearCharDLALL(var1);
                  tcbNow.md = 71;
                  tcbNow.lp = 0;
               }
            }
         } else {
            this.DL_ClearData(var1);
            ConfigData[1] = 0;
            this._FILESave(var1);
            tcbNow.md = 79;
            tcbNow.lp = 0;
         }
         break;
      case 102:
         tcbNow._work[10] = 0;
         tcbNow._work[12] = 0;
         tcbNow._work[13] = 0;
         tcbNow.md = 103;
         tcbNow.lp = 0;
         break;
      case 103:
         if (LoadingDataMax > 0) {
            if (tcbNow._work[10] != LoadingDataPos) {
               tcbNow._work[10] = LoadingDataPos;
               tcbNow._work[11] = LoadingDataPos * 209 / LoadingDataMax;
            }

            this._TKilx(var1, 28682, 28682);
            this.CreatePanel(var1, 28682, 4096, 0, 16404, 0, tcbNow._work[11] + 136 << 16, 14155776, 0, 0, 0, 0, 0, 0, 209 - tcbNow._work[11] << 16, 1048576);
         }
         break;
      case 104:
         this._TKilx(var1, 28672, 28772);
         this._TKilx(var1, 24576, 24676);
         tcbNow._work[10] = 0;
         tcbNow._work[9] = 0;
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 253, 24581, 16385, 138, 100, 16);
         this.CreatePanelSingle(var1, 24581, 5, 11, 16389, 0, 240, 160);
         this.CreatePanelSingle(var1, 24581, 5, 13, 16394, 0, 136, 216);
         this.CreatePanelSingle(var1, 24581, 0, 293, 16384, 0, 0, 0);
         this.DL_SetAPI(var1, 0);
         this.DL_SetURL(var1, "http://smap-ai.channel.or.jp/dragonball_tap/device/screensize.csv");
         tcbNow.md = 105;
         tcbNow.lp = 0;
         break;
      case 105:
         if (!this.DL_IsDownload(var1)) {
            if (this.DL_GetData(var1) == null) {
               tcbNow.md = 106;
               tcbNow.lp = 0;
            } else {
               label521: {
                  String[] var7;
                  try {
                     var37 = new String(this.DL_GetData(var1), "Shift_JIS");
                     var7 = var37.split("\r\n");
                  } catch (Exception var29) {
                     var10001 = false;
                     break label521;
                  }

                  var3 = 0;

                  label469:
                  while(true) {
                     String[] var10;
                     try {
                        if (var3 >= var7.length) {
                           break;
                        }

                        var10 = var7[var3].split(",");
                     } catch (Exception var18) {
                        var10001 = false;
                        break;
                     }

                     if (var10 != null) {
                        label531: {
                           String[] var38;
                           int[][] var8;
                           try {
                              if (var10.length < 3 || !var10[0].startsWith(var1.build_model)) {
                                 break label531;
                              }

                              var38 = var10[1].split("-");
                              var8 = new int[var38.length][];
                           } catch (Exception var19) {
                              var10001 = false;
                              break;
                           }

                           var2 = 0;

                           int var4;
                           while(true) {
                              String[] var9;
                              try {
                                 if (var2 >= var38.length) {
                                    break;
                                 }

                                 var9 = var38[var2].split("\\.");
                                 var8[var2] = new int[var9.length];
                              } catch (Exception var27) {
                                 var10001 = false;
                                 break label469;
                              }

                              var4 = 0;

                              while(true) {
                                 try {
                                    if (var4 >= var9.length) {
                                       break;
                                    }

                                    var8[var2][var4] = Integer.parseInt(var9[var4]);
                                 } catch (Exception var28) {
                                    var10001 = false;
                                    break label469;
                                 }

                                 ++var4;
                              }

                              ++var2;
                           }

                           boolean var5 = true;
                           var4 = 0;

                           while(true) {
                              try {
                                 if (var4 >= var38.length) {
                                    break;
                                 }
                              } catch (Exception var20) {
                                 var10001 = false;
                                 break label469;
                              }

                              boolean var33;
                              switch(var4) {
                              case 0:
                                 label527: {
                                    try {
                                       if (var8[var4][0] > var1.build_version[0]) {
                                          break label527;
                                       }
                                    } catch (Exception var26) {
                                       var10001 = false;
                                       break label469;
                                    }

                                    var33 = var5;

                                    try {
                                       if (var8[var4][0] != var1.build_version[0]) {
                                          break;
                                       }
                                    } catch (Exception var25) {
                                       var10001 = false;
                                       break label469;
                                    }

                                    var33 = var5;

                                    try {
                                       if (var8[var4][1] <= var1.build_version[1]) {
                                          break;
                                       }
                                    } catch (Exception var24) {
                                       var10001 = false;
                                       break label469;
                                    }
                                 }

                                 var33 = false;
                                 break;
                              case 1:
                                 label526: {
                                    try {
                                       if (var8[var4][0] < var1.build_version[0]) {
                                          break label526;
                                       }
                                    } catch (Exception var23) {
                                       var10001 = false;
                                       break label469;
                                    }

                                    var33 = var5;

                                    try {
                                       if (var8[var4][0] != var1.build_version[0]) {
                                          break;
                                       }
                                    } catch (Exception var22) {
                                       var10001 = false;
                                       break label469;
                                    }

                                    var33 = var5;

                                    try {
                                       if (var8[var4][1] >= var1.build_version[1]) {
                                          break;
                                       }
                                    } catch (Exception var21) {
                                       var10001 = false;
                                       break label469;
                                    }
                                 }

                                 var33 = false;
                                 break;
                              default:
                                 var33 = var5;
                              }

                              ++var4;
                              var5 = var33;
                           }

                           if (var5) {
                              try {
                                 var1.iFrameScalHeight = Integer.parseInt(var10[2]);
                                 var1.iFrameScalWidth = (int)((float)var1.iScreenBaseWidth * ((float)var1.iFrameScalHeight / (float)var1.iScreenBaseHeight));
                                 tcbNow.md = 106;
                                 tcbNow.lp = 0;
                                 this.DL_ClearData(var1);
                                 return;
                              } catch (Exception var17) {
                                 var10001 = false;
                                 break;
                              }
                           }
                        }
                     }

                     ++var3;
                  }
               }

               this.DL_ClearData(var1);
               tcbNow.md = 106;
               tcbNow.lp = 0;
            }
         }
         break;
      case 106:
         this._TKilx(var1, 24576, 24676);
         tcbNow._work[10] = 0;
         tcbNow._work[9] = 0;
         this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
         this.DrawTextClear(var1, 0);
         this.TextGDTString(var1, 0, iLanguage, 253, 24581, 16385, 138, 100, 16);
         this.CreatePanelSingle(var1, 24581, 5, 11, 16389, 0, 240, 160);
         this.CreatePanelSingle(var1, 24581, 5, 13, 16394, 0, 136, 216);
         this.CreatePanelSingle(var1, 24581, 0, 293, 16384, 0, 0, 0);
         this.DL_SetAPI(var1, 0);
         this.DL_SetURL(var1, "http://smap-ai.channel.or.jp/dragonball_tap/news.csv");
         tcbNow.md = 107;
         tcbNow.lp = 0;
         break;
      case 107:
         if (!this.DL_IsDownload(var1)) {
            if (this.DL_GetData(var1) == null) {
               tcbNow.md = 113;
               tcbNow.lp = 0;
            } else if (!this.newsData(var1, this.DL_GetData(var1), this.DL_GetSize(var1))) {
               tcbNow.md = 113;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 108;
               tcbNow.lp = 0;
            }
         }
         break;
      case 108:
         if (tcbNow._work[9] >= this.getNewsCount(var1)) {
            tcbNow.md = 113;
            tcbNow.lp = 0;
         } else if (!this.checkNewsDate(var1, tcbNow._work[9], iLanguage)) {
            var32 = tcbNow._work;
            var10002 = var32[9]++;
         } else {
            this._TKilx(var1, 24576, 24676);
            this.CreatePanelSingle(var1, 24576, 0, 12, 12288, 0, 0, 0);
            this.DrawTextClear(var1, 0);
            this.TextGDTString(var1, 0, iLanguage, 253, 24581, 16385, 138, 100, 16);
            this.CreatePanelSingle(var1, 24581, 5, 11, 16389, 0, 240, 160);
            this.CreatePanelSingle(var1, 24581, 5, 13, 16394, 0, 136, 216);
            this.CreatePanelSingle(var1, 24581, 0, 293, 16384, 0, 0, 0);
            tcbNow.md = 109;
            tcbNow.lp = 0;
         }
         break;
      case 109:
         if (!this.DL_IsDownload(var1)) {
            if (this.DL_GetData(var1) == null) {
               var32 = tcbNow._work;
               var10002 = var32[9]++;
               tcbNow.md = 108;
               tcbNow.lp = 0;
            } else {
               label549: {
                  label520: {
                     try {
                        if (this.imageTexture == null) {
                           AndroidGLTexture var6 = new AndroidGLTexture();
                           this.imageTexture = var6;
                        }
                     } catch (Exception var16) {
                        var10001 = false;
                        break label520;
                     }

                     try {
                        this.imageTexture.Dispose(var1.gl);
                        this.imageTexture.loadTexture(var1.gl, this.DL_GetData(var1));
                        this.DL_ClearData(var1);
                        if (this.imageTexture.GetImage() != 0) {
                           break label549;
                        }

                        var32 = tcbNow._work;
                     } catch (Exception var15) {
                        var10001 = false;
                        break label520;
                     }

                     var10002 = var32[9]++;

                     try {
                        tcbNow.md = 108;
                        tcbNow.lp = 0;
                        return;
                     } catch (Exception var14) {
                        var10001 = false;
                     }
                  }

                  var32 = tcbNow._work;
                  var10002 = var32[9]++;
                  tcbNow.md = 108;
                  tcbNow.lp = 0;
                  return;
               }

               this.newsURL = this.newsdata[tcbNow._work[9]].getWebURL();
               tcbNow.md = 110;
               tcbNow.lp = 0;
            }
         }
         break;
      case 110:
         this._TKilx(var1, 24581, 24581);
         this.ImageDrawSet(var1, 24586, 16394, 0, 0, 0, 0, 480, 320);
         var32 = tcbNow._work;
         var10002 = var32[9]++;
         tcbNow.md = 111;
         tcbNow.lp = 0;
         break;
      case 111:
         this._TLoop(var1, 20, 112);
         break;
      case 112:
         bDrawLoading = false;
         if (this.CheckBack(var1, -500, 0, 0)) {
            tcbNow.md = 108;
            tcbNow.lp = 0;
         } else if (TouchesXPos[0] > 400 && TouchesYPos[0] > 0 && TouchesYPos[0] < 80 && TouchesStatus[0] != 0) {
            tcbNow.md = 108;
            tcbNow.lp = 0;
         } else if (TouchesStatus[0] != 0) {
            if (this.newsURL != null && this.newsURL.length() > 0) {
               tcbNow.md = 116;
               tcbNow.lp = 0;
            } else {
               tcbNow.md = 108;
               tcbNow.lp = 0;
            }
         }
         break;
      case 113:
         bDrawLoading = true;

         label366: {
            try {
               if (this.imageTexture != null) {
                  this.imageTexture.Dispose(var1.gl);
               }
            } catch (Exception var13) {
               var10001 = false;
               break label366;
            }

            try {
               this.imageTexture = null;
            } catch (Exception var12) {
               var10001 = false;
            }
         }

         this.newsdata = null;
         if (var1.iFrameScalWidth > 0) {
            this.CreateFramebuffer(var1, var1.iFrameScalWidth, var1.iFrameScalHeight);
         }

         tcbNow.md = 114;
         tcbNow.lp = 0;
         break;
      case 114:
         this._TLoop(var1, 30, 115);
         break;
      case 115:
         this.DL_SetAPI(var1, 0);
         tcbNow.md = 693;
         tcbNow.lp = 0;
         break;
      case 116:
         bDrawLoading = true;
         this._TLoop(var1, 3, 117);
         break;
      case 117:
         var1.glview.startBrowser(this.newsURL);
         tcbNow.md = 118;
         tcbNow.lp = 0;
         break;
      case 118:
         this._TLoop(var1, 10, 112);
         break;
      case 119:
         this._SetAct(var1, 262144, 0);
         this._SetObj(var1, tcbNow._work[0]);
         objExec.x = tcbNow._work[1];
         objExec.y = tcbNow._work[2];
         objExec.Work[0] = tcbNow._work[3];
         objExec.Work[1] = tcbNow._work[4];
         objExec.Work[2] = tcbNow._work[5];
         objExec.Work[3] = tcbNow._work[6];
         tcbNow.md = 120;
         tcbNow.lp = 0;
      }

   }

   void GdtBGM(GlobalWork var1, int var2) {
      int var3 = this.pGameData.piGameData[this.pGameData.piGameDataPos[161] + this.pGameData.piGameDataXSize[161] * var2 + 0] - 1;
      if (iPlayBGMNo != var3) {
         if (this.pGameData.piGameData[this.pGameData.piGameDataPos[161] + this.pGameData.piGameDataXSize[161] * var2 + 1] == 0) {
            iPlayBGMNo = var3;
            bBGMPlayLoop = false;
            this.PlayBGM(var1, iPlayBGMNo, bBGMPlayLoop);
         } else {
            iPlayBGMNo = var3;
            bBGMPlayLoop = true;
            this.PlayBGM(var1, iPlayBGMNo, bBGMPlayLoop);
         }
      }

   }

   public int GetAppFree(GlobalWork var1) {
      return ConfigData[12534];
   }

   public int GetAtanTable(int var1, int var2) {
      float var3 = (float)(var1 >> 16);
      var3 = (float)(var2 >> 16);
      if (var1 == 0) {
         if (var2 > 0) {
            var1 = 128;
         } else {
            var1 = 384;
         }
      } else if (var2 == 0) {
         if (var1 > 0) {
            var1 = 0;
         } else {
            var1 = 256;
         }
      } else {
         boolean var10001;
         float var4;
         if (var1 > 0) {
            var3 = (float)(var1 >> 16);
            var4 = (float)(var2 >> 16);
            if (var2 < 0) {
               var4 *= -1.0F;
               if (var4 > var3) {
                  try {
                     var1 = this.AtanTable[(int)(var3 * 512.0F / var4)] + 384;
                     return var1;
                  } catch (Exception var6) {
                     var10001 = false;
                  }
               } else {
                  try {
                     var1 = 512 - this.AtanTable[(int)(512.0F * var4 / var3)] & 511;
                     return var1;
                  } catch (Exception var7) {
                     var10001 = false;
                  }
               }
            } else if (var4 > var3) {
               try {
                  var1 = 128 - this.AtanTable[(int)(512.0F * var3 / var4)];
                  return var1;
               } catch (Exception var8) {
                  var10001 = false;
               }
            } else {
               try {
                  var1 = this.AtanTable[(int)(var4 * 512.0F / var3)];
                  return var1;
               } catch (Exception var9) {
                  var10001 = false;
               }
            }
         } else {
            var4 = (float)(var1 >> 16);
            var3 = (float)(var2 >> 16);
            var4 *= -1.0F;
            if (var2 > 0) {
               if (var3 > var4) {
                  try {
                     var1 = this.AtanTable[(int)(var4 * 512.0F / var3)] + 128;
                     return var1;
                  } catch (Exception var10) {
                     var10001 = false;
                  }
               } else {
                  try {
                     var1 = 256 - this.AtanTable[(int)(512.0F * var3 / var4)];
                     return var1;
                  } catch (Exception var11) {
                     var10001 = false;
                  }
               }
            } else {
               var3 *= -1.0F;
               if (var3 > var4) {
                  try {
                     var1 = 384 - this.AtanTable[(int)(512.0F * var4 / var3)];
                     return var1;
                  } catch (Exception var12) {
                     var10001 = false;
                  }
               } else {
                  label109: {
                     short var14;
                     try {
                        var14 = this.AtanTable[(int)(var3 * 512.0F / var4)];
                     } catch (Exception var13) {
                        var10001 = false;
                        break label109;
                     }

                     var1 = var14 + 256;
                     return var1;
                  }
               }
            }
         }

         var1 = 0;
      }

      return var1;
   }

   public int GetAttack(GlobalWork var1, int var2) {
      int var4 = Level[var2] + AddLevel[var2];
      int var5 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 12];
      int var3 = var4;
      if (var4 >= 98) {
         var3 = 98;
      }

      for(var4 = 0; var4 <= var3; ++var4) {
         var5 += this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[7] + this.ChrGameData[var2 + 3].piGameDataXSize[7] * var4 + 1];
      }

      return var5;
   }

   public int GetAttackEvent(GlobalWork var1, int var2) {
      int var7 = Level[var2] + AddLevel[var2];
      int var5 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 12] * 10;
      int var4 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 14] * 10;
      int var6 = 0;
      int var3 = var4;
      if (var4 <= 0) {
         var3 = 1000;
      }

      var4 = var5;
      if (var5 <= 0) {
         var4 = 1000;
      }

      var5 = var7;
      if (var7 >= 98) {
         var5 = 98;
      }

      for(var7 = 0; var7 <= var5; ++var7) {
         var6 += this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[7] + this.ChrGameData[var2 + 3].piGameDataXSize[7] * var7 + 1];
      }

      var4 = var3 + var4 + var6 * 1000;
      var3 = var4;
      if (AngryOn[var2]) {
         var3 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[37] + this.ChrGameData[var2 + 3].piGameDataXSize[37] * 0 + 0] * var4 / 100;
      }

      return var3;
   }

   public int GetAttackSelect(GlobalWork var1, int var2) {
      int var4 = Level[var2] + AddLevel[var2];
      int var5 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 12] * 10;
      int var3 = var4;
      if (var4 >= 98) {
         var3 = 98;
      }

      for(var4 = 0; var4 <= var3; ++var4) {
         var5 += this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[7] + this.ChrGameData[var2 + 3].piGameDataXSize[7] * var4 + 1] * 1000;
      }

      return var5;
   }

   int GetBOSS(GlobalWork var1, int var2) {
      int var3 = 0;

      while(true) {
         if (var3 >= this.ChrGameData[var2 + 3].piGameDataXSize[40]) {
            var2 = 0;
            break;
         }

         int var4 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[40] + this.ChrGameData[var2 + 3].piGameDataXSize[40] * 1 + var3] - 1;
         if (ConfigData[var4 * 100 + 30 + 1] != 0 && this.CheckCharctorFiles(var1, var4)) {
            var2 = var4;
            break;
         }

         ++var3;
      }

      return var2;
   }

   int GetBall(GlobalWork var1, int var2) {
      var2 = (var2 << 1) + 12445;
      return ConfigData[var2] & 255 | (ConfigData[var2 + 1] & 255) << 8;
   }

   int GetBallLine(GlobalWork var1) {
      return ConfigData[12443] & 255 | (ConfigData[12443 + 1] & 255) << 8;
   }

   int GetBuyPack(GlobalWork var1, int var2) {
      byte var4;
      if (var2 < 0) {
         var4 = 0;
      } else {
         int var3 = var2 / 8;
         if ((ConfigData[var3 + 12535] & 1 << var2 % 8) != 0) {
            var4 = 1;
         } else {
            var4 = 0;
         }
      }

      return var4;
   }

   int GetCPU(GlobalWork var1, int var2) {
      if (this.isMission(var1) == 0) {
         iStageMax = 8;
         var2 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[40] + this.ChrGameData[var2 + 3].piGameDataXSize[40] * 3 + iStage] - 1;
         ++iStageCPU;
         if (this.CheckCharctorFiles(var1, var2)) {
            return var2;
         }
      } else {
         int var3 = iStageCPU;

         for(int var4 = this.GetBOSS(var1, var2); var3 < this.ChrGameData[var2 + 3].piGameDataXSize[40]; ++var3) {
            short var5 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[40] + this.ChrGameData[var2 + 3].piGameDataXSize[40] * 0 + iStageCPU];
            ++iStageCPU;
            if (iDifficulty == 0 && iStage == 6 || var5 == 0) {
               iStageMax = iStage;
               var2 = var4;
               return var2;
            }

            int var6 = var5 - 1;
            if (ConfigData[var6 * 100 + 30 + 1] != 0 && this.CheckCharctorFiles(var1, var6) && var4 != var6) {
               var2 = var6;
               return var2;
            }
         }
      }

      var2 = -1;
      return var2;
   }

   public int GetCardAddAtack(GlobalWork var1, int var2) {
      int var3 = 0;
      byte var5 = 0;
      if (this.isMission(var1) == 0 && iPlayMode != 8) {
         var2 = 0;
      } else {
         short var7 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 9];
         short var8 = this.pGameData.piGameData[this.pGameData.piGameDataPos[155] + this.pGameData.piGameDataXSize[155] * 0 + 0];

         int var4;
         for(var4 = 0; var4 < PlayerCardCount[var2]; ++var4) {
            int var6 = var3 + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var4] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var4] + 170] * 50 + PlayerCardLevel[var2][var4] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var4] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var4] + 170] * 50 + PlayerCardLevel[var2][var4] * 2] & 255) + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var4] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var4] + 170] * 6 + PlayerCardLevel[var2][var4] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var4] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var4] + 170] * 6 + PlayerCardLevel[var2][var4] * 2] & 255) * 1000;
            var3 = var6;
            if (var7 == (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var4] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var4] + 170] * 44 + PlayerCardLevel[var2][var4] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var4] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var4] + 170] * 44 + PlayerCardLevel[var2][var4] * 2] & 255)) {
               var3 = var6 + var8;
            }
         }

         byte var9 = 0;
         var4 = var3;

         for(var3 = var9; var3 < PlayerCardFormationCount[var2]; ++var3) {
            var4 += this.GetCardAttackFm(var1, var2, var3);
         }

         var3 = this.pGameData.piGameDataYSize[149] - 1;

         while(true) {
            var2 = var5;
            if (var3 < 0) {
               break;
            }

            if (var4 >= this.pGameData.piGameData[this.pGameData.piGameDataPos[149] + this.pGameData.piGameDataXSize[149] * var3 + 0] * 1000) {
               var2 = var3;
               break;
            }

            --var3;
         }
      }

      return var2;
   }

   public int GetCardAngry(GlobalWork var1, int var2) {
      int var3 = 0;

      int var4;
      for(var4 = 0; var4 < PlayerCardCount[var2]; ++var4) {
         var3 += (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var4] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var4] + 170] * 32 + PlayerCardLevel[var2][var4] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var4] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var4] + 170] * 32 + PlayerCardLevel[var2][var4] * 2] & 255);
      }

      for(var4 = 0; var4 < PlayerCardFormationCount[var2]; ++var4) {
         short var5 = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[var2][var4] * this.pGameData.piGameDataXSize[50] + 0];
         var3 += this.pGameData.piGameData[this.pGameData.piGameDataPos[var5] + this.pGameData.piGameDataXSize[var5] * 16 + 0];
      }

      return var3;
   }

   public int GetCardAttack(GlobalWork var1, int var2) {
      int var4 = 0;
      int var3 = 0;
      short var7 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 9];
      short var8 = this.pGameData.piGameData[this.pGameData.piGameDataPos[155] + this.pGameData.piGameDataXSize[155] * 0 + 0];

      int var5;
      int var6;
      for(var5 = 0; var5 < PlayerCardCount[var2]; var3 = var6) {
         var4 += (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var5] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var5] + 170] * 50 + PlayerCardLevel[var2][var5] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var5] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var5] + 170] * 50 + PlayerCardLevel[var2][var5] * 2] & 255);
         var6 = var3 + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var5] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var5] + 170] * 6 + PlayerCardLevel[var2][var5] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var5] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var5] + 170] * 6 + PlayerCardLevel[var2][var5] * 2] & 255);
         var3 = var4;
         if (var7 == (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var5] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var5] + 170] * 44 + PlayerCardLevel[var2][var5] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var5] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var5] + 170] * 44 + PlayerCardLevel[var2][var5] * 2] & 255)) {
            var3 = var4 + var8;
         }

         ++var5;
         var4 = var3;
      }

      byte var9 = 0;
      var5 = var3;

      for(var3 = var9; var3 < PlayerCardFormationCount[var2]; ++var3) {
         short var10 = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[var2][var3] * this.pGameData.piGameDataXSize[50] + 0];
         var5 += this.pGameData.piGameData[this.pGameData.piGameDataPos[var10] + this.pGameData.piGameDataXSize[var10] * 3 + 0];
      }

      var3 = var4 / 1000 + var5;
      var2 = var3;
      if (var3 == 0) {
         var2 = 1;
      }

      return var2;
   }

   public int GetCardAttackFm(GlobalWork var1, int var2, int var3) {
      if (PlayerCardFormationCount[var2] > var3 && PlayerCardFormation[var2][var3] != 0) {
         short var4 = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[var2][var3] * this.pGameData.piGameDataXSize[50] + 0];
         var2 = this.pGameData.piGameData[this.pGameData.piGameDataPos[var4] + this.pGameData.piGameDataXSize[var4] * 3 + 0] * 1000;
      } else {
         var2 = 0;
      }

      return var2;
   }

   public int GetCardAttackFmALL(GlobalWork var1, int var2) {
      int var3 = 0;

      for(int var4 = 0; var4 < PlayerCardFormationCount[var2]; ++var4) {
         short var5 = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[var2][var4] * this.pGameData.piGameDataXSize[50] + 0];
         var3 += this.pGameData.piGameData[this.pGameData.piGameDataPos[var5] + this.pGameData.piGameDataXSize[var5] * 3 + 0] * 1000;
      }

      return var3;
   }

   public int GetCardBattlePoint(GlobalWork var1, int var2, int var3) {
      int var4 = 0;
      short var7 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 9];
      short var6 = this.pGameData.piGameData[this.pGameData.piGameDataPos[155] + this.pGameData.piGameDataXSize[155] * 0 + 0];
      if (PlayerCardCount[var2] > var3) {
         short var10 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var3] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var3] + 170] * 50 + PlayerCardLevel[var2][var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var3] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var3] + 170] * 50 + PlayerCardLevel[var2][var3] * 2] & 255);
         short var8 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var3] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var3] + 170] * 6 + PlayerCardLevel[var2][var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var3] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var3] + 170] * 6 + PlayerCardLevel[var2][var3] * 2] & 255);
         int var5 = 0 + var10 + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var3] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var3] + 170] * 52 + PlayerCardLevel[var2][var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var3] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var3] + 170] * 52 + PlayerCardLevel[var2][var3] * 2] & 255);
         short var9 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var3] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var3] + 170] * 12 + PlayerCardLevel[var2][var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var3] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var3] + 170] * 12 + PlayerCardLevel[var2][var3] * 2] & 255);
         var4 = var5;
         if (var7 == (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var3] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var3] + 170] * 44 + PlayerCardLevel[var2][var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var3] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var3] + 170] * 44 + PlayerCardLevel[var2][var3] * 2] & 255)) {
            var4 = var5 + var6 * 2;
         }

         var2 = var4 + (0 + var8 + var9) * 1000;
         var4 = var2;
         if (var2 < 1000) {
            var4 = 1000;
         }
      }

      return var4;
   }

   public int GetCardBattlePointFm(GlobalWork var1, int var2, int var3) {
      return this.GetCardAttackFm(var1, var2, var3) + this.GetCardDefenceFm(var1, var2, var3);
   }

   public int GetCardDefenceFm(GlobalWork var1, int var2, int var3) {
      if (PlayerCardFormationCount[var2] > var3 && PlayerCardFormation[var2][var3] != 0) {
         short var4 = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[var2][var3] * this.pGameData.piGameDataXSize[50] + 0];
         var2 = this.pGameData.piGameData[this.pGameData.piGameDataPos[var4] + this.pGameData.piGameDataXSize[var4] * 6 + 0] * 1000;
      } else {
         var2 = 0;
      }

      return var2;
   }

   public int GetCardDefenceFmALL(GlobalWork var1, int var2) {
      int var3 = 0;

      for(int var4 = 0; var4 < PlayerCardFormationCount[var2]; ++var4) {
         short var5 = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[var2][var4] * this.pGameData.piGameDataXSize[50] + 0];
         var3 += this.pGameData.piGameData[this.pGameData.piGameDataPos[var5] + this.pGameData.piGameDataXSize[var5] * 6 + 0] * 1000;
      }

      return var3;
   }

   public int GetCardDeffence(GlobalWork var1, int var2) {
      int var4 = 0;
      int var3 = 0;
      short var7 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 9];
      short var8 = this.pGameData.piGameData[this.pGameData.piGameDataPos[155] + this.pGameData.piGameDataXSize[155] * 0 + 0];

      int var5;
      int var6;
      for(var5 = 0; var5 < PlayerCardCount[var2]; var3 = var6) {
         var4 += (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var5] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var5] + 170] * 52 + PlayerCardLevel[var2][var5] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var5] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var5] + 170] * 52 + PlayerCardLevel[var2][var5] * 2] & 255);
         var6 = var3 + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var5] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var5] + 170] * 12 + PlayerCardLevel[var2][var5] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var5] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var5] + 170] * 12 + PlayerCardLevel[var2][var5] * 2] & 255);
         var3 = var4;
         if (var7 == (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var5] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var5] + 170] * 44 + PlayerCardLevel[var2][var5] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var5] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var5] + 170] * 44 + PlayerCardLevel[var2][var5] * 2] & 255)) {
            var3 = var4 + var8;
         }

         ++var5;
         var4 = var3;
      }

      for(var5 = 0; var5 < PlayerCardFormationCount[var2]; ++var5) {
         short var9 = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[var2][var5] * this.pGameData.piGameDataXSize[50] + 0];
         var3 += this.pGameData.piGameData[this.pGameData.piGameDataPos[var9] + this.pGameData.piGameDataXSize[var9] * 6 + 0];
      }

      var3 += var4 / 1000;
      var2 = var3;
      if (var3 == 0) {
         var2 = 1;
      }

      return var2;
   }

   public int GetCardIndexFm(GlobalWork var1, int var2, int var3, int var4) {
      short var5;
      if (PlayerCardFormationCount[var2] > var3 && PlayerCardFormation[var2][var3] != 0) {
         var5 = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[var2][var3] * this.pGameData.piGameDataXSize[50] + 5 + var4];
      } else {
         var5 = 0;
      }

      return var5;
   }

   int GetCardLevel(GlobalWork var1, int var2) {
      int var3 = ConfigData[var2 + 11000] - 1;
      var2 = var3;
      if (var3 > 11) {
         var2 = 11;
      }

      return var2;
   }

   int GetCardNo(GlobalWork var1, int var2, int var3) {
      var2 = var2 * 100 + 30 + 22 + (var3 << 1);
      return ConfigData[var2] & 255 | (ConfigData[var2 + 1] & 255) << 8;
   }

   public int GetCardRushRed(GlobalWork var1, int var2) {
      int var3 = 0;

      int var4;
      for(var4 = 0; var4 < PlayerCardCount[var2]; ++var4) {
         var3 += (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var4] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var4] + 170] * 40 + PlayerCardLevel[var2][var4] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var4] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var4] + 170] * 40 + PlayerCardLevel[var2][var4] * 2] & 255);
      }

      for(var4 = 0; var4 < PlayerCardFormationCount[var2]; ++var4) {
         short var5 = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[var2][var4] * this.pGameData.piGameDataXSize[50] + 0];
         var3 += this.pGameData.piGameData[this.pGameData.piGameDataPos[var5] + this.pGameData.piGameDataXSize[var5] * 20 + 0];
      }

      var2 = var3;
      if (var3 < 0) {
         var2 = 0;
      }

      return var2;
   }

   public int GetCardSynchro(GlobalWork var1, int var2) {
      int var3 = 0;

      int var4;
      for(var4 = 0; var4 < PlayerCardCount[var2]; ++var4) {
         var3 += (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var4] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var4] + 170] * 14 + PlayerCardLevel[var2][var4] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var4] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var4] + 170] * 14 + PlayerCardLevel[var2][var4] * 2] & 255);
      }

      byte var5 = 0;
      var4 = var3;

      for(var3 = var5; var3 < PlayerCardFormationCount[var2]; ++var3) {
         short var6 = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[var2][var3] * this.pGameData.piGameDataXSize[50] + 0];
         var4 += this.pGameData.piGameData[this.pGameData.piGameDataPos[var6] + this.pGameData.piGameDataXSize[var6] * 7 + 0];
      }

      return var4 * 10;
   }

   public int GetCardSynchroStock(GlobalWork var1, int var2) {
      int var3 = 0;

      int var4;
      for(var4 = 0; var4 < PlayerCardCount[var2]; ++var4) {
         var3 += (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var4] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var4] + 170] * 16 + PlayerCardLevel[var2][var4] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[PlayerCard[var2][var4] + 170] + this.pGameData.piGameDataXSize[PlayerCard[var2][var4] + 170] * 16 + PlayerCardLevel[var2][var4] * 2] & 255);
      }

      for(var4 = 0; var4 < PlayerCardFormationCount[var2]; ++var4) {
         short var5 = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + PlayerCardFormation[var2][var4] * this.pGameData.piGameDataXSize[50] + 0];
         var3 += this.pGameData.piGameData[this.pGameData.piGameDataPos[var5] + this.pGameData.piGameDataXSize[var5] * 8 + 0];
      }

      return var3 * 100;
   }

   int GetCardVersion(GlobalWork var1, int var2) {
      return ConfigData[var2 + 11400] & 255;
   }

   int GetCharDL(GlobalWork var1, int var2) {
      return ConfigData[var2 * 100 + 30 + 2] & 255;
   }

   int GetCharVersion(GlobalWork var1, int var2) {
      return ConfigData[var2 * 100 + 30 + 3] & 255;
   }

   public int GetCharctorBuy(GlobalWork var1, int var2) {
      byte var3;
      if (var2 < 0) {
         var3 = 0;
      } else {
         var3 = ConfigData[var2 * 100 + 30 + 1];
      }

      return var3;
   }

   public int GetConfigValue(GlobalWork var1, int var2, int var3) {
      var2 = var2 * 100 + 30 + var3;
      return (ConfigData[var2 + 0] & 255) << 16 | (ConfigData[var2 + 1] & 255) << 8 | ConfigData[var2 + 2] & 255;
   }

   public int GetCost(GlobalWork var1, int var2) {
      int var4 = Level[var2] + AddLevel[var2];
      int var5 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 17];
      int var3 = var4;
      if (var4 >= 98) {
         var3 = 98;
      }

      for(var4 = 0; var4 <= var3; ++var4) {
         var5 += this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[7] + this.ChrGameData[var2 + 3].piGameDataXSize[7] * var4 + 21];
      }

      return var5;
   }

   public int GetDeffence(GlobalWork var1, int var2) {
      int var4 = Level[var2] + AddLevel[var2];
      int var5 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 14];
      int var3 = var4;
      if (var4 >= 98) {
         var3 = 98;
      }

      for(var4 = 0; var4 <= var3; ++var4) {
         var5 += this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[7] + this.ChrGameData[var2 + 3].piGameDataXSize[7] * var4 + 3];
      }

      return var5;
   }

   public int GetDeffenceSelect(GlobalWork var1, int var2) {
      int var4 = Level[var2] + AddLevel[var2];
      int var5 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 14] * 10;
      int var3 = var4;
      if (var4 >= 98) {
         var3 = 98;
      }

      for(var4 = 0; var4 <= var3; ++var4) {
         var5 += this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[7] + this.ChrGameData[var2 + 3].piGameDataXSize[7] * var4 + 3] * 1000;
      }

      return var5 + 1000;
   }

   byte[] GetDownloadData(GlobalWork var1, String var2) {
      byte[] var4;
      try {
         var4 = Utility.http2data(var2);
      } catch (Exception var3) {
         var4 = null;
      }

      return var4;
   }

   public int GetExp(GlobalWork var1, int var2) {
      return this.GetConfigValue(var1, var2, 53) % 1000;
   }

   int GetGDTAddTicket(GlobalWork var1, int var2, boolean var3) {
      short var4;
      if (this.isMission(var1) == 0) {
         if (!var3) {
            var4 = this.pGameData.piGameData[this.pGameData.piGameDataPos[165] + this.pGameData.piGameDataXSize[165] * 0 + 0];
         } else {
            var4 = this.pGameData.piGameData[this.pGameData.piGameDataPos[165] + this.pGameData.piGameDataXSize[165] * 0 + 1];
         }
      } else if (!var3) {
         var4 = this.pGameData.piGameData[this.pGameData.piGameDataPos[165] + (var2 + 1) * this.pGameData.piGameDataXSize[165] + 0];
      } else {
         var4 = this.pGameData.piGameData[this.pGameData.piGameDataPos[165] + (var2 + 1) * this.pGameData.piGameDataXSize[165] + 1];
      }

      return var4;
   }

   int GetGamePadKey(GlobalWork var1, int var2) {
      int var5 = 0;

      int var3;
      for(int var4 = 0; var4 < this.controller.GetCount(); var5 = var3) {
         var3 = var5;
         if (this.padID[var4] >= 0) {
            var3 = var5 | this.controller.GetKey(this.padID[var4], var2);
         }

         ++var4;
      }

      return var5;
   }

   public int GetHP(GlobalWork var1, int var2) {
      int var5 = Level[var2] + AddLevel[var2];
      int var4 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 11];
      int var3 = var5;
      if (var5 >= 98) {
         var3 = 98;
      }

      for(var5 = 0; var5 <= var3; ++var5) {
         var4 += this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[7] + this.ChrGameData[var2 + 3].piGameDataXSize[7] * var5 + 0];
      }

      return var4;
   }

   public int GetLanguageNo(GlobalWork var1) {
      return iLanguage;
   }

   public int GetLevel(GlobalWork var1, int var2) {
      var2 = var2 * 100 + 30 + 53;
      return ((ConfigData[var2 + 0] & 255) << 16 | (ConfigData[var2 + 1] & 255) << 8 | ConfigData[var2 + 2] & 255) / 1000 - 1;
   }

   ObjReq GetNewObj(GlobalWork var1) {
      ObjReq var3 = this.ObjStockNext;
      this.ObjStockNext = this.ObjStockNext.next;
      if (this.ObjStockNext == null) {
         var3 = null;
      } else {
         var3.prev = null;
         var3.next = null;

         for(int var2 = 0; var2 < 13; ++var2) {
            var3.lnk[var2] = null;
         }

         var3.x = 0;
         var3.y = 0;
         var3.z = 0;
         var3.ox = 0;
         var3.oy = 0;
         var3.ano = -1;
         var3.img = 0;
         var3.time = 0;
         var3.apt = 0;
         var3.wObjFlag = 0;
         var3.wActFlag = 0;
         var3.prio = -1;
         var3.pal = 0;
         var3.bx = 0;
         var3.by = 0;
         var3.parent = null;
         var3.iActPrio = 0;
         var3.iXSpeed = 0;
         var3.iYSpeed = 0;
         var3.iXAccel = 0;
         var3.iYAccel = 0;
         var3.iLinkNum = 0;
         var3.iAlpha = 0;
         var3.iGlobalAlpha = 0;
         var3.se = -1;
         var3.iXZoom = 100;
         var3.iYZoom = 100;
         var3.iXZoomObj = 100;
         var3.iYZoomObj = 100;
         var3.iOffsetSprXPos = 0;
         var3.iOffsetSprYPos = 0;
         var3.iOffsetSprXSize = 0;
         var3.iOffsetSprYSize = 0;
         var3.iSpriteFlag = 0;
         if (this.pObjReqBuffer == null) {
            this.pObjReqBuffer = var3;
            var3.next = null;
            var3.prev = null;
            this.iObjNum = 1;
         } else {
            var3.next = this.pObjReqBuffer;
            this.pObjReqBuffer.prev = var3;
            var3.prev = null;
            this.pObjReqBuffer = var3;
            ++this.iObjNum;
         }
      }

      return var3;
   }

   public int GetPutCardAttack(GlobalWork var1, int var2) {
      int var5 = 0;
      short var7 = this.pGameData.piGameData[this.pGameData.piGameDataPos[155] + this.pGameData.piGameDataXSize[155] * 0 + 0];
      short var6 = this.ChrGameData[3].piGameData[this.ChrGameData[3].piGameDataPos[3] + this.ChrGameData[3].piGameDataXSize[3] * 0 + 9];

      int var3;
      for(int var4 = 0; var4 < 8; var5 = var3) {
         int var8 = this.GetCardNo(var1, var2, var4);
         int var9 = this.GetCardLevel(var1, var8);
         var3 = var5;
         if (var8 > 0) {
            var3 = var5;
            if (var9 >= 0) {
               var5 = var5 + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var8 + 170] + this.pGameData.piGameDataXSize[var8 + 170] * 50 + var9 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var8 + 170] + this.pGameData.piGameDataXSize[var8 + 170] * 50 + var9 * 2] & 255) + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var8 + 170] + this.pGameData.piGameDataXSize[var8 + 170] * 6 + var9 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var8 + 170] + this.pGameData.piGameDataXSize[var8 + 170] * 6 + var9 * 2] & 255) * 1000;
               var3 = var5;
               if (var6 == (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var8 + 170] + this.pGameData.piGameDataXSize[var8 + 170] * 44 + var9 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var8 + 170] + this.pGameData.piGameDataXSize[var8 + 170] * 44 + var9 * 2] & 255)) {
                  var3 = var5 + var7;
               }
            }
         }

         ++var4;
      }

      return var5;
   }

   public int GetPutCardCost(GlobalWork var1, int var2) {
      int var5 = 0;

      int var3;
      for(int var4 = 0; var4 < 8; var5 = var3) {
         int var7 = this.GetCardNo(var1, var2, var4);
         int var6 = this.GetCardLevel(var1, var7);
         var3 = var5;
         if (var7 > 0) {
            var3 = var5;
            if (var6 >= 0) {
               var3 = var5 + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var7 + 170] + this.pGameData.piGameDataXSize[var7 + 170] * 48 + var6 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var7 + 170] + this.pGameData.piGameDataXSize[var7 + 170] * 48 + var6 * 2] & 255);
            }
         }

         ++var4;
      }

      return var5;
   }

   public int GetPutCardDefence(GlobalWork var1, int var2) {
      int var5 = 0;
      short var7 = this.pGameData.piGameData[this.pGameData.piGameDataPos[155] + this.pGameData.piGameDataXSize[155] * 0 + 0];
      short var6 = this.ChrGameData[3].piGameData[this.ChrGameData[3].piGameDataPos[3] + this.ChrGameData[3].piGameDataXSize[3] * 0 + 9];

      int var3;
      for(int var4 = 0; var4 < 8; var5 = var3) {
         int var8 = this.GetCardNo(var1, var2, var4);
         int var9 = this.GetCardLevel(var1, var8);
         var3 = var5;
         if (var8 > 0) {
            var3 = var5;
            if (var9 >= 0) {
               var5 = var5 + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var8 + 170] + this.pGameData.piGameDataXSize[var8 + 170] * 52 + var9 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var8 + 170] + this.pGameData.piGameDataXSize[var8 + 170] * 52 + var9 * 2] & 255) + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var8 + 170] + this.pGameData.piGameDataXSize[var8 + 170] * 12 + var9 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var8 + 170] + this.pGameData.piGameDataXSize[var8 + 170] * 12 + var9 * 2] & 255) * 1000;
               var3 = var5;
               if (var6 == (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var8 + 170] + this.pGameData.piGameDataXSize[var8 + 170] * 44 + var9 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var8 + 170] + this.pGameData.piGameDataXSize[var8 + 170] * 44 + var9 * 2] & 255)) {
                  var3 = var5 + var7;
               }
            }
         }

         ++var4;
      }

      return var5;
   }

   byte[] GetResData2(GlobalWork var1, int var2, int var3) {
      String var4 = this.GetResName2(var1, var2, var3);

      byte[] var7;
      try {
         Context var5 = var1.context;
         StringBuilder var8 = new StringBuilder(String.valueOf(var4));
         var7 = Utility.readDataRaw(var5, var8.append(".pac").toString());
      } catch (Exception var6) {
         var7 = (byte[])null;
      }

      return var7;
   }

   String GetResName2(GlobalWork var1, int var2, int var3) {
      int var5 = iLanguage * 17;
      int var4 = var2 + var5;
      String var6 = this.strDataFolder2[var4];
      String var7;
      if (var2 == 6) {
         var7 = var6 + Utility.InttoString(2, var3);
      } else if (var2 == 7) {
         if (var3 < 255) {
            var7 = var6 + Utility.InttoString(2, var3);
         } else {
            var7 = this.strDataFolder2[var5 + 16];
            var7 = var7 + Utility.InttoString(3, var3 - 255);
         }
      } else if (var2 == 8) {
         var7 = var6 + "00" + Utility.InttoString(2, var3);
      } else if (var2 >= 2 && var2 <= 3) {
         var7 = var6 + Utility.InttoString(2, var3);
      } else if (var2 >= 4 && var2 <= 5) {
         var7 = var6 + Utility.InttoString(2, var3);
      } else if (var2 == 9) {
         var7 = this.strDataFolder2[var4 + var3];
      } else {
         var7 = var6;
         if (var2 != 13) {
            var7 = var6;
            if (var2 == 1) {
               var7 = var6;
               if (var3 > 0) {
                  var7 = this.strDataFolder2[var4 + 1];
                  var7 = var7 + Utility.InttoString(2, var3 - 1);
               }
            }
         }
      }

      return var7;
   }

   public int GetRushCount(GlobalWork var1, int var2) {
      return 1;
   }

   int GetStagePoint(GlobalWork var1, int var2) {
      byte var3;
      if (iPlayMode == 8) {
         var3 = 2;
      } else if (iPlayMode == 2) {
         var3 = 0;
      } else {
         if (this.isMission(var1) == 0 && iPlayMode == 0) {
            switch(var2) {
            case 0:
            case 1:
            case 2:
            case 3:
               var3 = 1;
               return var3;
            }
         }

         var3 = 2;
      }

      return var3;
   }

   String GetString(GlobalWork var1, int var2, int var3, int var4) {
      int var6 = 0;
      int var7 = 0;
      String var11;
      switch(var2) {
      case 0:
         for(var6 = 0; var6 < var4; ++var6) {
            var7 += ((this.pGameData.piGameData[this.pGameData.piGameDataPos[var3] + this.pGameData.piGameDataXSize[var3] * 0 + var7] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var3] + this.pGameData.piGameDataXSize[var3] * 0 + var7 + 1] & 255) + 2;
         }

         var6 = (this.pGameData.piGameData[this.pGameData.piGameDataPos[var3] + this.pGameData.piGameDataXSize[var3] * 0 + var7] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var3] + this.pGameData.piGameDataXSize[var3] * 0 + var7 + 1] & 255;
         var4 = var7 + 2;
         break;
      case 1:
         for(var7 = 0; var7 < var4; ++var7) {
            var6 += ((this.pTextData.piGameData[this.pTextData.piGameDataPos[var3] + this.pTextData.piGameDataXSize[var3] * 0 + var6] & 255) << 8 | this.pTextData.piGameData[this.pTextData.piGameDataPos[var3] + this.pTextData.piGameDataXSize[var3] * 0 + var6 + 1] & 255) + 2;
         }

         var4 = (this.pTextData.piGameData[this.pTextData.piGameDataPos[var3] + this.pTextData.piGameDataXSize[var3] * 0 + var6] & 255) << 8 | this.pTextData.piGameData[this.pTextData.piGameDataPos[var3] + this.pTextData.piGameDataXSize[var3] * 0 + var6 + 1] & 255;
         var7 = var6 + 2;
         var6 = var4;
         var4 = var7;
         break;
      default:
         var11 = null;
         return var11;
      }

      if (var6 <= 0) {
         var11 = null;
      } else {
         byte[] var9 = new byte[var6];

         for(var7 = 0; var7 < var6; ++var4) {
            byte var5 = 0;
            switch(var2) {
            case 0:
               var5 = (byte)this.pGameData.piGameData[this.pGameData.piGameDataPos[var3] + this.pGameData.piGameDataXSize[var3] * 0 + var4];
               break;
            case 1:
               var5 = (byte)this.pTextData.piGameData[this.pTextData.piGameDataPos[var3] + this.pTextData.piGameDataXSize[var3] * 0 + var4];
            }

            var9[var7] = var5;
            ++var7;
         }

         var11 = "";

         String var8;
         try {
            var8 = new String(var9, "Shift_JIS");
         } catch (Exception var10) {
            return var11;
         }

         var11 = var8;
      }

      return var11;
   }

   public int GetSynchro(GlobalWork var1, int var2) {
      int var5 = Level[var2] + AddLevel[var2];
      int var3 = this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[3] + this.ChrGameData[var2 + 3].piGameDataXSize[3] * 0 + 8] * 100;
      int var4 = var5;
      if (var5 >= 98) {
         var4 = 98;
      }

      for(var5 = 0; var5 <= var4; ++var5) {
         var3 += this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[7] + this.ChrGameData[var2 + 3].piGameDataXSize[7] * var5 + 2];
      }

      var2 = var3;
      if (var3 == 0) {
         var2 = 1;
      }

      return var2;
   }

   int GetTicket(GlobalWork var1) {
      return ConfigData[12523] & 255 | (ConfigData[12523 + 1] & 255) << 8;
   }

   public void ImageDrawSet(GlobalWork var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9) {
      TCB var10 = this._TaskMake(var1, 119, var2);
      var10._work[0] = var3;
      var10._work[1] = var4;
      var10._work[2] = var5;
      var10._work[3] = var6;
      var10._work[4] = var7;
      var10._work[5] = var8;
      var10._work[6] = var9;
   }

   public boolean Init(GlobalWork var1) {
      boolean var4;
      if (!this.InitGameData(var1)) {
         var4 = false;
      } else {
         this.iObjNum = 0;
         if (this.SortTable != null) {
            this.SortTable = null;
         }

         if (this.ObjStock != null) {
            this.ObjStock = null;
         }

         System.gc();

         try {
            Thread.sleep(15L);
         } catch (Exception var6) {
         }

         this.SortTable = new ObjReq[1200];
         this.ObjStock = new ObjReq[1200];

         int var2;
         for(var2 = 0; var2 < 1200; ++var2) {
            this.ObjStock[var2] = null;
            this.ObjStock[var2] = new ObjReq();
         }

         this.ObjStock[0].next = this.ObjStock[0 + 1];
         this.ObjStock[0].prev = null;

         for(var2 = 0; var2 < 13; ++var2) {
            this.ObjStock[0].lnk[var2] = null;
         }

         int var3;
         for(var2 = 0 + 1; var2 < 1199; ++var2) {
            this.ObjStock[var2].next = this.ObjStock[var2 + 1];
            this.ObjStock[var2].prev = this.ObjStock[var2 - 1];

            for(var3 = 0; var3 < 13; ++var3) {
               this.ObjStock[var2].lnk[var3] = null;
            }
         }

         this.ObjStock[var2].next = null;
         this.ObjStock[var2].prev = this.ObjStock[var2 - 1];

         for(var3 = 0; var3 < 13; ++var3) {
            this.ObjStock[var2].lnk[var3] = null;
         }

         this.ObjStockNext = this.ObjStock[0];
         this.pObjReqBuffer = null;

         for(var2 = 0; var2 < 31; ++var2) {
            CreatedAct[var2] = -1;
            LoadFilter[var2] = 0;
         }

         iTaskLoop = 0;
         iSkipFrame = 1;
         iSkipSpeed = iSkipFrame;

         for(var2 = 0; var2 < 1170; ++var2) {
            this.TCBList[var2] = null;
            this.TCBList[var2] = new TCB();
         }

         tcbHead = this.TCBList[0];
         tcbNow = this.TCBList[1];
         tcbStock = this.TCBList[1];

         for(var2 = 1; var2 < 1169; ++var2) {
            this.TCBList[var2].next = this.TCBList[var2 + 1];
         }

         tcbNow = null;

         for(var2 = 0; var2 < 31; ++var2) {
            this.ChrGameData[var2] = new GameData();
         }

         iReqSENo = -1;
         iPlayBGMNo = -1;
         this.InitSE(var1);
         if (this.stringTexture != null) {
            this.stringTexture = new StringTexture[2];
            this.stringTexture[0] = new StringTexture();
            this.stringTexture[1] = new StringTexture();
         }

         this._TaskMake(var1, 682, 8192);
         bPause = false;
         bDrawSkip = false;
         bDrawLoading = false;
         _screeneffect[0] = 0;
         _screeneffect[1] = 0;
         _screeneffect[2] = 0;
         _screenoffect_frame[0] = 0;
         _screenoffect_frame[1] = 0;
         _screenoffect_frame[2] = 0;
         _screeneffect[3] = 100;
         _screeneffect[4] = 100;
         _screeneffect[5] = 100;
         _screenoffect_frame[3] = 100;
         _screenoffect_frame[4] = 100;
         _screenoffect_frame[5] = 100;
         iBackXSize = 0;
         iNewsEnd = 0;
         var4 = true;
      }

      return var4;
   }

   public void InitAutoCardBuf(GlobalWork var1, int var2, int var3, int var4) {
      iCardBufCount = 0;

      int var6;
      int var7;
      for(var6 = 1; var6 < 90; ++var6) {
         var7 = this.GetCardLevel(var1, var6);
         if ((var7 >= 0 || var3 == -1) && (var3 >= 0 || this.pGameData.piGameData[this.pGameData.piGameDataPos[136] + this.pGameData.piGameDataXSize[136] * var6 + 0] == 1 && var3 == -2 || this.pGameData.piGameData[this.pGameData.piGameDataPos[136] + this.pGameData.piGameDataXSize[136] * var6 + 1] == 1 && var3 == -1) && ((short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var6 + 170] + this.pGameData.piGameDataXSize[var6 + 170] * 48 + var7 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var6 + 170] + this.pGameData.piGameDataXSize[var6 + 170] * 48 + var7 * 2] & 255) <= var2 || var3 == -1)) {
            iCardBuf[iCardBufCount] = var6;
            if (var3 == -1) {
               bCardLevelBuf[iCardBufCount] = 0;
            } else {
               bCardLevelBuf[iCardBufCount] = (byte)var7;
            }

            ++iCardBufCount;
         }
      }

      if (var4 > 0) {
         int var8 = var4 - 1;

         for(var3 = 0; var3 < iCardBufCount - 1; ++var3) {
            switch(var8) {
            case 0:
               var2 = 100 - (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 44 + bCardLevelBuf[var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 44 + bCardLevelBuf[var3] * 2] & 255);
               break;
            case 1:
               var2 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 50 + bCardLevelBuf[var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 50 + bCardLevelBuf[var3] * 2] & 255) + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 6 + bCardLevelBuf[var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 6 + bCardLevelBuf[var3] * 2] & 255) * 1000;
               break;
            default:
               var2 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 52 + bCardLevelBuf[var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 52 + bCardLevelBuf[var3] * 2] & 255) + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 12 + bCardLevelBuf[var3] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var3] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var3] + 170] * 12 + bCardLevelBuf[var3] * 2] & 255) * 1000;
            }

            var4 = var3 + 1;

            for(var6 = var2; var4 < iCardBufCount; var6 = var7) {
               switch(var8) {
               case 0:
                  var2 = 100 - (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var4] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var4] + 170] * 44 + bCardLevelBuf[var4] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var4] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var4] + 170] * 44 + bCardLevelBuf[var4] * 2] & 255);
                  break;
               case 1:
                  var2 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var4] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var4] + 170] * 50 + bCardLevelBuf[var4] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var4] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var4] + 170] * 50 + bCardLevelBuf[var4] * 2] & 255) + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var4] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var4] + 170] * 6 + bCardLevelBuf[var4] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var4] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var4] + 170] * 6 + bCardLevelBuf[var4] * 2] & 255) * 1000;
                  break;
               default:
                  var2 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var4] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var4] + 170] * 52 + bCardLevelBuf[var4] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var4] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var4] + 170] * 52 + bCardLevelBuf[var4] * 2] & 255) + (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var4] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var4] + 170] * 12 + bCardLevelBuf[var4] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[iCardBuf[var4] + 170] + this.pGameData.piGameDataXSize[iCardBuf[var4] + 170] * 12 + bCardLevelBuf[var4] * 2] & 255) * 1000;
               }

               var7 = var6;
               if (var2 > var6) {
                  var6 = iCardBuf[var3];
                  iCardBuf[var3] = iCardBuf[var4];
                  iCardBuf[var4] = var6;
                  byte var5 = bCardLevelBuf[var3];
                  bCardLevelBuf[var3] = bCardLevelBuf[var4];
                  bCardLevelBuf[var4] = var5;
                  var7 = var2;
               }

               ++var4;
            }
         }
      }

   }

   void InitCard(GlobalWork var1) {
      int var2;
      for(var2 = 0; var2 < 90; ++var2) {
         ConfigData[var2 + 11000] = 0;
      }

      for(var2 = 0; var2 < this.pGameData.piGameDataYSize[160]; ++var2) {
         this.AddCard(var1, this.pGameData.piGameData[this.pGameData.piGameDataPos[160] + this.pGameData.piGameDataXSize[160] * var2 + 0], this.pGameData.piGameData[this.pGameData.piGameDataPos[160] + this.pGameData.piGameDataXSize[160] * var2 + 1]);
      }

      ConfigData[11000] = 1;
   }

   public void InitCharAttr(GlobalWork var1) {
      iCardAttr[0] = 0;
      iCardAttr[1] = 0;
      iCardAttr[2] = 0;
      iCardAttr[3] = 0;

      for(int var2 = 1; var2 < 90; ++var2) {
         int var3 = this.GetCardLevel(var1, var2);
         if (this.GetCardLevel(var1, var2) >= 0) {
            int[] var4 = iCardAttr;
            short var5 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var2 + 170] + this.pGameData.piGameDataXSize[var2 + 170] * 44 + var3 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var2 + 170] + this.pGameData.piGameDataXSize[var2 + 170] * 44 + var3 * 2] & 255);
            int var10002 = var4[var5]++;
         }
      }

   }

   public void InitCharCard(GlobalWork var1, int var2, int var3, boolean var4, int var5) {
      byte var8 = 0;
      byte var11 = 0;
      int[] var19 = new int[4];
      int[] var18 = new int[90];
      int var12 = 0;

      int var6;
      for(var6 = 0; var6 < 4; ++var6) {
         var19[var6] = 0;
      }

      int var7 = (int)(this.genrand_int32(var1) % 16L) + (iDifficulty << 4);
      var6 = var7;
      if (this.isMission(var1) == 0) {
         var6 = var7;
         if (iPlayMode != 8) {
            var6 = iStage + 48;
         }
      }

      for(var7 = 0; var7 < 8; ++var7) {
         PlayerCard[var2][var7] = 0;
      }

      byte var9 = 0;
      var7 = var8;

      int var10;
      int var24;
      int var27;
      for(var24 = var9; var24 < 8; var7 = var27) {
         if (!var4) {
            var10 = this.GetCardNo(var1, var3, var24);
         } else {
            var10 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[157] + var6 * 2 * this.pGameData.piGameDataXSize[157] + var24 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[157] + var6 * 2 * this.pGameData.piGameDataXSize[157] + var24 * 2] & 255);
         }

         var27 = var7;
         if (var10 > 0) {
            PlayerCard[var2][var7] = var10;
            if (!var4) {
               PlayerCardLevel[var2][var7] = this.GetCardLevel(var1, var10);
            } else {
               PlayerCardLevel[var2][var7] = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[157] + var6 * 2 * this.pGameData.piGameDataXSize[157] + (var24 + 8) * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[157] + var6 * 2 * this.pGameData.piGameDataXSize[157] + (var24 + 8) * 2] & 255);
            }

            PlayerCardVersion[var2][var7] = this.GetCardVersion(var1, var10);
            short var28 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 170] + this.pGameData.piGameDataXSize[var10 + 170] * 44 + PlayerCardLevel[var2][var7] * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var10 + 170] + this.pGameData.piGameDataXSize[var10 + 170] * 44 + PlayerCardLevel[var2][var7] * 2] & 255);
            int var10002 = var19[var28]++;
            var27 = var7 + 1;
         }

         ++var24;
      }

      PlayerCardCount[var2] = var7;
      PlayerCardFormationOK[var2][0] = 0;
      PlayerCardFormationOK[var2][1] = 0;
      PlayerCardFormationOK[var2][2] = 0;
      var6 = 0;
      boolean var25 = false;
      int var13 = 1;

      int var32;
      for(var10 = var11; var13 < this.pGameData.piGameDataYSize[50]; var10 = var32) {
         int var14;
         boolean var31;
         if (this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + this.pGameData.piGameDataXSize[50] * var13 + 0] == 0) {
            var32 = var10;
            var3 = var6;
            var14 = var12;
            var31 = var25;
         } else {
            label225: {
               boolean var16;
               int[] var20;
               boolean var22;
               boolean var26;
               if (this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + this.pGameData.piGameDataXSize[50] * var13 + 1] == 0) {
                  if (var5 == 2) {
                     PlayerCardFormation[var2][var6] = var13;
                     if (iCardAttr[0] >= this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + this.pGameData.piGameDataXSize[50] * var13 + 2] && iCardAttr[1] >= this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + this.pGameData.piGameDataXSize[50] * var13 + 3] && iCardAttr[2] >= this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + this.pGameData.piGameDataXSize[50] * var13 + 4]) {
                        var3 = var6 / 32;
                        var20 = PlayerCardFormationOK[var2];
                        var20[var3] |= 1 << var6 % 32;
                     }

                     var3 = var6 + 1;
                     var31 = var25;
                     var14 = var12;
                     var32 = var10;
                     break label225;
                  }

                  var22 = false;
                  var26 = var25;
                  var27 = var6;
                  var16 = var22;
                  if (!var25) {
                     var26 = var25;
                     var27 = var6;
                     var16 = var22;
                     if (var19[0] >= this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + this.pGameData.piGameDataXSize[50] * var13 + 2]) {
                        var26 = var25;
                        var27 = var6;
                        var16 = var22;
                        if (var19[1] >= this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + this.pGameData.piGameDataXSize[50] * var13 + 3]) {
                           var26 = var25;
                           var27 = var6;
                           var16 = var22;
                           if (var19[2] >= this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + this.pGameData.piGameDataXSize[50] * var13 + 4]) {
                              var3 = var6 / 32;
                              var20 = PlayerCardFormationOK[var2];
                              var20[var3] |= 1 << var6 % 32;
                              PlayerCardFormation[var2][var6] = var13;
                              var26 = true;
                              var16 = true;
                              var27 = var6 + 1;
                           }
                        }
                     }
                  }

                  var31 = var26;
                  var14 = var12;
                  var3 = var27;
                  var32 = var10;
                  if (var16) {
                     break label225;
                  }

                  var31 = var26;
                  var14 = var12;
                  var3 = var27;
                  var32 = var10;
                  if (var5 != 1) {
                     break label225;
                  }

                  var6 = var12 + 1;
                  var18[var12] = var13;
                  var3 = var27;
                  var27 = var6;
                  var25 = var26;
               } else {
                  boolean var15 = false;
                  boolean var29 = false;
                  var26 = false;
                  if (var5 == 2) {
                     var24 = 0;

                     while(true) {
                        var22 = var29;
                        if (var24 >= 8) {
                           break;
                        }

                        short var23 = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + this.pGameData.piGameDataXSize[50] * var13 + 5 + var24];
                        if (var23 <= 0) {
                           var22 = var29;
                           if (var24 != 0) {
                              var22 = true;
                           }
                           break;
                        }

                        if (this.GetCardLevel(var1, var23) < 0) {
                           var22 = false;
                           break;
                        }

                        ++var24;
                     }

                     if (var22) {
                        var3 = var6 / 32;
                        var20 = PlayerCardFormationOK[var2];
                        var20[var3] |= 1 << var6 % 32;
                     }

                     PlayerCardFormation[var2][var6] = var13;
                     var3 = var6 + 1;
                     var31 = var25;
                     var14 = var12;
                     var32 = var10;
                     break label225;
                  }

                  if (var5 == 1) {
                     var26 = true;
                  }

                  var27 = 0;

                  while(true) {
                     var16 = var15;
                     if (var27 >= 8) {
                        break;
                     }

                     short var17 = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + this.pGameData.piGameDataXSize[50] * var13 + 5 + var27];
                     if (var17 <= 0) {
                        var16 = var15;
                        if (var27 != 0) {
                           var16 = true;
                        }
                        break;
                     }

                     var22 = false;

                     for(int var30 = 0; var30 < PlayerCardCount[var2]; ++var30) {
                        if (PlayerCard[var2][var30] == var17) {
                           var16 = true;
                           var14 = 0;

                           while(true) {
                              var22 = var16;
                              if (var14 >= var10) {
                                 break;
                              }

                              if (iCardBuf[var14] == var17) {
                                 var22 = false;
                                 break;
                              }

                              ++var14;
                           }
                        }
                     }

                     var16 = var15;
                     if (!var22) {
                        break;
                     }

                     ++var27;
                  }

                  if (!var16 && var27 != 8) {
                     var31 = var25;
                     var14 = var12;
                     var3 = var6;
                     var32 = var10;
                     if (!var26) {
                        break label225;
                     }
                  }

                  if (var16 || var27 == 8) {
                     var3 = var6 / 32;
                     var20 = PlayerCardFormationOK[var2];
                     var20[var3] |= 1 << var6 % 32;
                     var24 = 0;

                     for(var3 = var10; var24 < 8; ++var3) {
                        iCardBuf[var3] = this.pGameData.piGameData[this.pGameData.piGameDataPos[50] + this.pGameData.piGameDataXSize[50] * var13 + 5 + var24];
                        ++var24;
                     }

                     PlayerCardFormation[var2][var6] = var13;
                     var32 = var3;
                     var3 = var6 + 1;
                     var31 = var25;
                     var14 = var12;
                     break label225;
                  }

                  var27 = var12 + 1;
                  var18[var12] = var13;
                  var3 = var6;
               }

               var31 = var25;
               var14 = var27;
               var32 = var10;
            }
         }

         ++var13;
         var25 = var31;
         var12 = var14;
         var6 = var3;
      }

      PlayerCardFormationCount[var2] = var6;
      if (var5 == 1) {
         var5 = 0;

         for(var3 = var6; var5 < var12; ++var3) {
            PlayerCardFormation[var2][var3] = var18[var5];
            ++var5;
         }

         int[] var21 = PlayerCardFormationCount;
         var21[var2] += var12;
      }

   }

   boolean InitGameData(GlobalWork var1) {
      if (this.pGameData != null) {
         this.pGameData.Dispose(var1);
         this.pGameData = null;
      }

      this.pGameData = new GameData();
      this.pGameData.Init(var1, this.GetResData2(var1, 14, 0), 3, 0);
      if (this.pTextData != null) {
         this.pTextData.Dispose(var1);
         this.pTextData = null;
      }

      this.pTextData = new GameData();
      this.pTextData.Init(var1, this.GetResData2(var1, 15, 0), 3, 0);
      return true;
   }

   void InitTicket(GlobalWork var1) {
      short var2 = this.pGameData.piGameData[this.pGameData.piGameDataPos[162] + this.pGameData.piGameDataXSize[162] * 0 + 0];
      ConfigData[12523] = (byte)(var2 & 255);
      ConfigData[12524] = (byte)(var2 >> 8 & 255);
   }

   public void LIFE_ADD(GlobalWork var1, int var2, int var3) {
      if (iTimer != 0 && Life[1 - var2] > 0) {
         int[] var4 = Life;
         var4[var2] += var3;
         if (Life[var2] > PlayerLife[var2]) {
            Life[var2] = PlayerLife[var2];
         }

         OldLife[var2] = Life[var2];
      }

   }

   public void LIFE_DEC(GlobalWork var1, int var2, int var3) {
      if (iTimer != 0 && Life[1 - var2] > 0 && (this.pGameData.piGameData[this.pGameData.piGameDataPos[166] + this.pGameData.piGameDataXSize[166] * 0 + 0] == 0 || var2 != 0)) {
         OldLifeWait[var2] = 1;
         int[] var4 = Life;
         var4[var2] -= var3;
         if (Life[var2] < 0) {
            Life[var2] = 0;
         }

         if (iPlayMode == 2 && Life[var2] == 0) {
            Life[var2] = 1;
         }
      }

   }

   boolean LoadingProcess(GlobalWork var1) {
      int var2 = iLoadingType++;
      boolean var3;
      if (var2 >= 31) {
         this.SoundLoad(var1);
         var3 = true;
      } else {
         this.ChrSoundCount[var2] = 0;
         if (Create[var2] == -1) {
            LoadFilter[var2] = 0;
            var3 = false;
         } else {
            String var4 = this.GetResName2(var1, this.IDList[var2], LoadData[var2]);
            if (!this.ChrGameData[var2].Init(var1, var4, 2, LoadFilter[var2])) {
               bDLError = true;
            }

            LoadFilter[var2] = 0;
            var3 = false;
         }
      }

      return var3;
   }

   void MissionClear(GlobalWork var1) {
      if (ConfigData[12527] == 0) {
         ConfigData[12527] = 1;
         this._FILESave(var1);
      }

   }

   int MissionClearCheck(GlobalWork var1, int var2, int var3) {
      byte var5 = 0;
      if (this.isMission(var1) == 0 && iPlayMode != 8) {
         int[] var4;
         label309:
         switch(var3) {
         case 0:
            if (iControlType[iPlayerNo] != 2) {
               switch(iMissionPross) {
               case 0:
                  this._TKilx(var1, 20480, 20480);
                  this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                  this.TextGDTString(var1, 0, iLanguage, 264, 20480, 400 + 260, 53, 90, 16);
                  iMissionVal[0] = tcbPlayer[0].obj.x;
                  ++iMissionPross;
                  iMissionSubPross = 0;
                  break label309;
               case 1:
                  if (Math.abs(iMissionVal[0] - tcbPlayer[0].obj.x >> 16) > 100) {
                     this._TKilx(var1, 20480, 20480);
                     this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                     this.TextGDTString(var1, 0, iLanguage, 265, 20480, 400 + 260, 53, 90, 16);
                     this.CreatePanelSingle(var1, 20480, 5, 106, 400, 0, 430, 268);
                     iMissionSubPross = 0;
                     ++iMissionPross;
                  }
                  break label309;
               case 2:
                  if (iMissionSubPross == 0) {
                     if ((PlayerAttackFlag[var2] & 4096) != 0) {
                        ++iMissionSubPross;
                     }
                  } else if (tcbPlayer[0].obj.ano == 0) {
                     this._TKilx(var1, 20480, 20480);
                     this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                     this.TextGDTString(var1, 0, iLanguage, 266, 20480, 400 + 260, 53, 90, 16);
                     this.CreatePanelSingle(var1, 20480, 5, 106, 400, 0, 340, 268);
                     ++iMissionPross;
                     iMissionSubPross = 0;
                  }
                  break label309;
               case 3:
                  if (iMissionSubPross == 0) {
                     if ((PlayerAttackFlag[var2] & 2) != 0) {
                        ++iMissionSubPross;
                     }
                  } else if (tcbPlayer[0].obj.ano == 0) {
                     this._TKilx(var1, 20480, 20480);
                     this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                     this.TextGDTString(var1, 0, iLanguage, 267, 20480, 400 + 260, 53, 90, 16);
                     this.CreatePanelSingle(var1, 20480, 5, 106, 400, 0, 380, 218);
                     ++iMissionPross;
                     iMissionSubPross = 0;
                  }
                  break label309;
               case 4:
                  if (iMissionSubPross == 0) {
                     if ((PlayerAttackFlag[var2] & 4) != 0) {
                        ++iMissionSubPross;
                     }
                  } else if (tcbPlayer[0].obj.ano == 0) {
                     this._TKilx(var1, 20480, 20480);
                     this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                     this.TextGDTString(var1, 0, iLanguage, 268, 20480, 400 + 260, 53, 90, 16);
                     this.CreatePanelSingle(var1, 20480, 5, 106, 400, 0, 440, 188);
                     ++iMissionPross;
                     iMissionSubPross = 0;
                  }
                  break label309;
               case 5:
                  if (iMissionSubPross == 0) {
                     if ((PlayerAttackFlag[var2] & 8) != 0) {
                        ++iMissionSubPross;
                     }
                  } else if (tcbPlayer[0].obj.ano == 0) {
                     this._TKilx(var1, 20480, 20480);
                     this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                     this.TextGDTString(var1, 0, iLanguage, 269, 20480, 400 + 260, 53, 90, 16);
                     this.CreatePanelSingle(var1, 20480, 5, 106, 400, 0, 430, 268);
                     ++iMissionPross;
                     iMissionSubPross = 0;
                  }
                  break label309;
               case 6:
                  if (iMissionSubPross == 0) {
                     if (Synchro[var2] >= 100) {
                        ++iMissionSubPross;
                     }
                  } else if (tcbPlayer[0].obj.ano == 0) {
                     this._TKilx(var1, 20480, 20480);
                     this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                     this.TextGDTString(var1, 0, iLanguage, 270, 20480, 400 + 260, 53, 90, 16);
                     this.CreatePanelSingle(var1, 20480, 5, 106, 400, 0, 440, 128);
                     ++iMissionPross;
                     iMissionSubPross = 0;
                  }
                  break label309;
               case 7:
                  if ((PlayerAttackFlag[var2] & 256) != 0) {
                     this._TKilx(var1, 20480, 20480);
                     ++iMissionPross;
                     var5 = 1;
                     return var5;
                  }
                  break label309;
               case 8:
                  var5 = 1;
               }
            } else {
               switch(iMissionPross) {
               case 0:
                  this._TKilx(var1, 20480, 20480);
                  this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                  this.TextGDTString(var1, 0, iLanguage, 271, 20480, 400 + 260, 53, 90, 16);
                  iMissionVal[0] = tcbPlayer[0].obj.x;
                  ++iMissionPross;
                  iMissionSubPross = 0;
                  break label309;
               case 1:
                  if (iMissionSubPross == 0) {
                     if (Math.abs(iMissionVal[0] - tcbPlayer[0].obj.x >> 16) > 100) {
                        iMissionSubPross = 1;
                     }
                  } else {
                     ++iMissionSubPross;
                     if (iMissionSubPross >= 40) {
                        this._TKilx(var1, 20480, 20480);
                        this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                        this.TextGDTString(var1, 0, iLanguage, 272, 20480, 400 + 260, 53, 90, 16);
                        iMissionVal[0] = -1;
                        iMissionVal[1] = -1;
                        iMissionSubPross = 0;
                        ++iMissionPross;
                     }
                  }
                  break label309;
               case 2:
                  if (iMissionVal[0] != tcbPlayer[1].obj.x || iMissionVal[1] != tcbPlayer[1].obj.y) {
                     iMissionVal[0] = tcbPlayer[1].obj.x;
                     iMissionVal[1] = tcbPlayer[1].obj.y;
                     this._TKilx(var1, 20480 + 1, 20480 + 1);
                     this.CreatePanelSingle(var1, 20480 + 1, 5, 106, tcbPlayer[1].obj.prio + 5, 0, tcbPlayer[1].obj.x >> 16, (tcbPlayer[1].obj.y >> 16) - 24);
                  }

                  if (iMissionSubPross == 0) {
                     if (_commandButton[var2] == 60 || _commandButton[var2] == 65 || _commandButton[var2] == 80 || _commandButton[var2] == 85) {
                        ++iMissionSubPross;
                     }
                  } else if (tcbPlayer[0].obj.ano == 0) {
                     this._TKilx(var1, 20480, 20480 + 1);
                     this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                     this.TextGDTString(var1, 0, iLanguage, 273, 20480, 400 + 260, 53, 90, 16);
                     ++iMissionPross;
                     iMissionSubPross = 0;
                     iMissionVal[0] = -1;
                  }
                  break label309;
               case 3:
                  if (iMissionVal[0] != tcbPlayer[1].obj.x || iMissionVal[1] != tcbPlayer[1].obj.y) {
                     iMissionVal[0] = tcbPlayer[1].obj.x;
                     iMissionVal[1] = tcbPlayer[1].obj.y;
                     this._TKilx(var1, 20480 + 1, 20480 + 1);
                     this.CreatePanelSingle(var1, 20480 + 1, 5, 106, tcbPlayer[1].obj.prio + 5, 0, tcbPlayer[1].obj.x >> 16, (tcbPlayer[1].obj.y >> 16) - 24);
                  }

                  if (iMissionSubPross == 0) {
                     if (_commandButton[var2] == 70 || _commandButton[var2] == 90) {
                        ++iMissionSubPross;
                     }
                  } else if (tcbPlayer[0].obj.ano == 0) {
                     this._TKilx(var1, 20480, 20480 + 1);
                     this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                     this.TextGDTString(var1, 0, iLanguage, 274, 20480, 400 + 260, 53, 90, 16);
                     ++iMissionPross;
                     iMissionSubPross = 0;
                     iMissionVal[0] = -1;
                  }
                  break label309;
               case 4:
                  if (iMissionSubPross == 0) {
                     if (_commandButton[var2] == 75) {
                        ++iMissionSubPross;
                     }
                  } else if (tcbPlayer[0].obj.ano == 0) {
                     this._TKilx(var1, 20480, 20480 + 1);
                     this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                     this.TextGDTString(var1, 0, iLanguage, 275, 20480, 400 + 260, 53, 90, 16);
                     ++iMissionPross;
                     iMissionSubPross = 0;
                     iMissionVal[0] = -1;
                  }
                  break label309;
               case 5:
                  if (iMissionVal[0] != tcbPlayer[0].obj.x || iMissionVal[1] != tcbPlayer[0].obj.y) {
                     iMissionVal[0] = tcbPlayer[0].obj.x;
                     iMissionVal[1] = tcbPlayer[0].obj.y;
                     this._TKilx(var1, 20480 + 1, 20480 + 1);
                     this.CreatePanelSingle(var1, 20480 + 1, 5, 106, tcbPlayer[0].obj.prio + 5, 0, tcbPlayer[0].obj.x >> 16, (tcbPlayer[0].obj.y >> 16) - 24);
                  }

                  if (iMissionSubPross == 0) {
                     if (Synchro[var2] >= 100) {
                        ++iMissionSubPross;
                     }
                  } else {
                     this._TKilx(var1, 20480, 20480 + 1);
                     this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                     this.TextGDTString(var1, 0, iLanguage, 276, 20480, 400 + 260, 53, 90, 16);
                     ++iMissionPross;
                     iMissionSubPross = 0;
                     iMissionVal[0] = -1;
                     var4 = PlayerAttackFlag;
                     var4[var2] &= -257;
                  }
                  break label309;
               case 6:
                  if (iMissionVal[0] != tcbPlayer[1].obj.x || iMissionVal[1] != tcbPlayer[1].obj.y) {
                     iMissionVal[0] = tcbPlayer[1].obj.x;
                     iMissionVal[1] = tcbPlayer[1].obj.y;
                     this._TKilx(var1, 20480 + 1, 20480 + 1);
                     this.CreatePanelSingle(var1, 20480 + 1, 5, 106, tcbPlayer[1].obj.prio + 5, 0, tcbPlayer[1].obj.x >> 16, (tcbPlayer[1].obj.y >> 16) - 24);
                  }

                  if ((PlayerAttackFlag[var2] & 256) != 0) {
                     this._TKilx(var1, 20480, 20480 + 1);
                     ++iMissionPross;
                  }
                  break label309;
               case 7:
                  if (tcbPlayer[0].obj.ano != 0 && tcbPlayer[0].obj.ano != 1) {
                     break label309;
                  }

                  ++iMissionPross;
                  var5 = 1;
                  return var5;
               case 8:
                  var5 = 1;
               }
            }

            return var5;
         case 1:
            switch(iMissionPross) {
            case 0:
               if (tcbPlayer[0].obj.ano == 0 && tcbPlayer[1].obj.ano == 0) {
                  this._TKilx(var1, 20480, 20480);
                  this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                  this.TextGDTString(var1, 0, iLanguage, 280, 20480, 400 + 260, 53, 90, 16);
                  if (iControlType[var2] == 2) {
                     iMissionVal[0] = -1;
                  } else {
                     this.CreatePanelSingle(var1, 20480, 5, 106, 400, 0, 430, 268);
                  }

                  ++iMissionPross;
                  iMissionSubPross = 0;
               }
               break label309;
            case 1:
               if (iControlType[var2] == 2 && (iMissionVal[0] != tcbPlayer[1].obj.x || iMissionVal[1] != tcbPlayer[1].obj.y)) {
                  iMissionVal[0] = tcbPlayer[1].obj.x;
                  iMissionVal[1] = tcbPlayer[1].obj.y;
                  this._TKilx(var1, 20480 + 1, 20480 + 1);
                  this.CreatePanelSingle(var1, 20480 + 1, 5, 106, tcbPlayer[1].obj.prio + 5, 0, tcbPlayer[1].obj.x >> 16, (tcbPlayer[1].obj.y >> 16) - 24);
               }

               if ((iEventStatus & 2) != 0) {
                  this._TKilx(var1, 20480, 20480 + 1);
                  ++iMissionPross;
               }
               break label309;
            case 2:
               if ((PlayerEventFlag[var2] & 512) != 0) {
                  ++iMissionPross;
                  var5 = 0;
                  return var5;
               }

               if ((PlayerEventFlag[var2] & 2) != 0) {
                  var4 = PlayerEventFlag;
                  var4[var2] &= -3;
                  iMissionPross = 0;
               }

               if ((iEventStatus & 1) == 0 && tcbPlayer[1].obj.ano == 0) {
                  iMissionPross = 0;
               }
               break label309;
            case 3:
               if ((iEventStatus & 1) == 0 && tcbPlayer[1].obj.ano == 0) {
                  this._TKilx(var1, 20480, 20480 + 1);
                  ++iMissionPross;
                  var5 = 1;
                  return var5;
               }
               break label309;
            case 4:
               var5 = 1;
               return var5;
            default:
               break label309;
            }
         case 2:
            switch(iMissionPross) {
            case 0:
               this._TKilx(var1, 20480, 20480);
               this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
               this.TextGDTString(var1, 0, iLanguage, 282, 20480, 400 + 260, 53, 90, 16);
               if (iControlType[var2] == 2) {
                  iMissionVal[0] = -1;
               } else {
                  this.CreatePanelSingle(var1, 20480, 5, 106, 400, 0, 430, 268);
               }

               ++iMissionPross;
               iMissionSubPross = 0;
               break label309;
            case 1:
               if (iControlType[var2] == 2 && (iMissionVal[0] != tcbPlayer[1].obj.x || iMissionVal[1] != tcbPlayer[1].obj.y)) {
                  iMissionVal[0] = tcbPlayer[1].obj.x;
                  iMissionVal[1] = tcbPlayer[1].obj.y;
                  this._TKilx(var1, 20480 + 1, 20480 + 1);
                  this.CreatePanelSingle(var1, 20480 + 1, 5, 106, tcbPlayer[1].obj.prio + 5, 0, tcbPlayer[1].obj.x >> 16, (tcbPlayer[1].obj.y >> 16) - 24);
               }

               if ((iEventStatus & 2) != 0) {
                  this._TKilx(var1, 20480, 20480 + 1);
                  ++iMissionPross;
               }
               break label309;
            case 2:
               if ((PlayerEventFlag[var2] & 1024) != 0) {
                  ++iMissionPross;
               }
               break label309;
            case 3:
               if ((iEventStatus & 1) == 0 && tcbPlayer[1].obj.ano == 0) {
                  this._TKilx(var1, 20480, 20480 + 1);
                  ++iMissionPross;
                  var5 = 1;
                  return var5;
               }
               break label309;
            case 4:
               var5 = 1;
               return var5;
            default:
               break label309;
            }
         case 3:
            switch(iMissionPross) {
            case 0:
               this._TKilx(var1, 20480, 20480);
               this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
               this.TextGDTString(var1, 0, iLanguage, 284, 20480, 400 + 260, 53, 90, 16);
               if (iControlType[var2] == 2) {
                  iMissionJoyFillter = 255;
               } else {
                  iMissionJoyFillter = -15745040;
               }

               ++iMissionPross;
               iMissionSubPross = 0;
               break;
            case 1:
               if (TouchesXPos[0] > 0 && TouchesStatus[0] != 0) {
                  ++iMissionPross;
               }
               break;
            case 2:
               if (Life[0] < PlayerLife[0]) {
                  this._TKilx(var1, 20480, 20480);
                  this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                  this.TextGDTString(var1, 0, iLanguage, 285, 20480, 400 + 260, 53, 90, 16);
                  this.CreatePanelSingle(var1, 20480, 5, 106, 400 + 260, 0, 60, 40);
                  if (iControlType[var2] != 2) {
                  }

                  ++iMissionPross;
                  iMissionSubPross = 0;
                  AngryOn[var2] = false;
                  Angry[var2] = 100;
                  iMissionJoyFillter = 0;
               }
               break;
            case 3:
               if (AngryOn[var2]) {
                  AngryLoop[var2] = true;
                  this._TKilx(var1, 20480, 20480 + 1);
                  this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                  this.TextGDTString(var1, 0, iLanguage, 286, 20480, 400 + 260, 53, 90, 16);
                  if (iControlType[var2] == 2) {
                     iMissionVal[0] = -1;
                  } else {
                     this.CreatePanelSingle(var1, 20480, 5, 106, 400, 0, 430, 268);
                  }

                  ++iMissionPross;
                  iMissionSubPross = 0;
               }
               break;
            case 4:
               if (iControlType[var2] == 2 && (iMissionVal[0] != tcbPlayer[0].obj.x || iMissionVal[1] != tcbPlayer[0].obj.y)) {
                  iMissionVal[0] = tcbPlayer[0].obj.x;
                  iMissionVal[1] = tcbPlayer[0].obj.y;
                  this._TKilx(var1, 20480 + 1, 20480 + 1);
                  this.CreatePanelSingle(var1, 20480 + 1, 5, 106, tcbPlayer[0].obj.prio + 5, 0, tcbPlayer[0].obj.x >> 16, (tcbPlayer[0].obj.y >> 16) - 24);
               }

               if (Synchro[var2] >= 200) {
                  this._TKilx(var1, 20480, 20480 + 1);
                  this.CreatePanelSingle(var1, 20480, 5, 391, 400, 0, 0, 0);
                  this.TextGDTString(var1, 0, iLanguage, 287, 20480, 400 + 260, 53, 90, 16);
                  this.CreatePanelSingle(var1, 20480, 5, 106, 400 + 260, 0, 60, 40);
                  if (iControlType[var2] == 2) {
                  }

                  ++iMissionPross;
                  iMissionSubPross = 0;
               }
               break;
            case 5:
               if ((PlayerAttackFlag[var2] & 512) != 0) {
                  this._TKilx(var1, 20480, 20480 + 1);
                  ++iMissionPross;
               } else if (Synchro[var2] < 200) {
                  iMissionPross = 3;
                  iMissionSubPross = 0;
               }
               break;
            case 6:
               if (tcbPlayer[0].obj.ano == 0 || tcbPlayer[0].obj.ano == 1) {
                  ++iMissionPross;
                  var5 = 1;
                  return var5;
               }
               break;
            case 7:
               var5 = 1;
               return var5;
            }
         case 4:
         case 5:
         }

         var5 = 0;
      } else {
         var5 = 0;
      }

      return var5;
   }

   int MissionLifeCheck(GlobalWork var1, int var2, int var3) {
      byte var4;
      if (this.isMission(var1) == 0 && var3 <= 3 && iPlayMode != 8) {
         var4 = 1;
      } else {
         var4 = 0;
      }

      return var4;
   }

   void MissionLoad(GlobalWork var1) {
      if (this.isMission(var1) == 0) {
         iStage = ConfigData[12528];
         iStageCPU = iStage;
         Score[0] = (ConfigData[12530] & 255) << 16;
         int[] var2 = Score;
         var2[0] += (ConfigData[12531] & 255) << 8;
         var2 = Score;
         var2[0] += ConfigData[12532] & 255;
      }

   }

   void MissionSave(GlobalWork var1, int var2) {
      if (this.isMission(var1) == 0 && iPlayMode != 8) {
         ConfigData[12528] = (byte)var2;
         byte[] var3 = ConfigData;
         var3[12529] = (byte)(var3[12529] | 1 << var2);
         ConfigData[12530] = (byte)(Score[0] >> 16 & 255);
         ConfigData[12531] = (byte)(Score[0] >> 8 & 255);
         ConfigData[12532] = (byte)(Score[0] & 255);
      }

   }

   boolean MissionText(GlobalWork var1, int var2) {
      boolean var3;
      if ((ConfigData[12529] & 1 << var2) != 0) {
         var3 = true;
      } else {
         var3 = false;
      }

      return var3;
   }

   public void PlayerTail(GlobalWork var1) {
      int var9 = tcbNow._work[0];
      int var10 = 1 - var9;
      int var2 = this.ChrGameData[var9 + 3].piGameData[this.ChrGameData[var9 + 3].piGameDataPos[3] + this.ChrGameData[var9 + 3].piGameDataXSize[3] * 0 + 3] / 2;
      int[] var14;
      if (DamageMove[var9] != 0) {
         if ((objExec.wObjFlag & 16) != 0) {
            var14 = PlayerXPos;
            var14[var9] += DamageMove[var9] << 15;
         } else {
            var14 = PlayerXPos;
            var14[var9] -= DamageMove[var9] << 15;
         }

         var14 = DamageMove;
         var14[var9] -= 2;
         if (DamageMove[var9] < 0) {
            DamageMove[var9] = 0;
         }
      }

      int var10002;
      if (GuardCancelTime[var9] != 0) {
         var14 = GuardCancelTime;
         var10002 = var14[var9]--;
      }

      byte var4 = 0;
      byte var3 = 0;
      ObjReq var19 = objExec;
      var19.wObjFlag &= -9;
      var2 = var4;
      int var18;
      if (tcbNow.iHitStop != 0) {
         var2 = var4;
         if (tcbNow.md == 876) {
            var18 = tcbNow.iHitStop & 3;
            var2 = var3;
            if (var18 == 1) {
               var2 = -65536;
               var19 = objExec;
               var19.wObjFlag |= 8;
            }

            if (var18 == 3) {
               var2 = 65536;
               var19 = objExec;
               var19.wObjFlag |= 8;
            }
         }
      }

      int var11 = var2 - iBackXOffset;
      if (PlayerYPos[var9] < PlayerYLimit[var9]) {
         PlayerYPos[var9] = PlayerYLimit[var9];
      }

      this._SetXY(var1, PlayerXPos[var9] - iBackXPos + var11, PlayerYPos[var9] - iBackYPos);
      if ((tcbNow.md == 876 || tcbNow.md == 877) && ThrowDamage[var9]) {
         var19 = objExec;
         var19.wObjFlag |= 8;
      }

      if (tcbNow.iHitStop != 0) {
         if ((objExec.wActFlag & 4) == 0 && CancelTime[var9] == 0) {
            CancelTime[var9] = 20;
         }

         var19 = objExec;
         var19.wActFlag |= 4;
      } else {
         var19 = objExec;
         var19.wActFlag &= -5;
         if (CancelTime[var9] > 0) {
            var14 = CancelTime;
            var10002 = var14[var9]--;
         }
      }

      if (tcbNow.md != 925) {
         this._ActReq(var1);
         this.ChrSePlay(var1, var9);
      }

      int var12 = objExec.wActFlag;
      int var13 = objExec.wObjFlag;
      objExec.iXZoomObj = iZoomBase;
      objExec.iYZoomObj = iZoomBase;
      PlayerXPos[var9] = objExec.x + iBackXPos - var11;
      PlayerYPos[var9] = objExec.y + iBackYPos;
      int var6 = 0;

      int var5;
      int var17;
      for(var5 = 0; var6 < objExec.iHitNum; var5 += 5) {
         if (objExec.hit[var5 + 0] == 0) {
            if (BulletAction[var9][0] != 0 && BulletNum[var9] < 8) {
               byte var7;
               if ((SpecialKind[var9] & 4) != 0) {
                  var7 = 3;
               } else {
                  var7 = 1;
               }

               for(int var8 = 0; var8 < var7; ++var8) {
                  TCB var15 = this._TaskMake(var1, 970, var9 + 13312);
                  var15._work[0] = var9;
                  var15._work[1] = 1 - var9;
                  if ((SpecialKind[var9] & 32) != 0) {
                     var2 = PlayerXPos[var10];
                     var17 = PlayerYPos[var10];
                  } else if ((SpecialKind[var9] & 64) != 0) {
                     var2 = PlayerXPos[var10];
                     var17 = 15728640;
                  } else {
                     if ((var12 & 16 ^ var13 & 16) != 0) {
                        var2 = PlayerXPos[var9] - (objExec.hit[var5 + 1] << 16);
                     } else {
                        var2 = PlayerXPos[var9] + (objExec.hit[var5 + 1] << 16);
                     }

                     var17 = PlayerYPos[var9] + (objExec.hit[var5 + 2] << 16);
                  }

                  if ((objExec.wObjFlag & 16) == 0 && var2 < PlayerXPos[var9]) {
                     var18 = PlayerXPos[var9] + 31457280;
                  } else {
                     var18 = var2;
                     if ((objExec.wObjFlag & 16) != 0) {
                        var18 = var2;
                        if (var2 > PlayerXPos[var9]) {
                           var18 = PlayerXPos[var9] - 31457280;
                        }
                     }
                  }

                  var15._work[2] = var18;
                  var15._work[3] = var17;
                  var15._work[4] = BulletAction[var9][0] + var8;
                  var15._work[5] = BulletAction[var9][1];
                  var15._work[6] = objExec.wObjFlag & 16;
                  var15._work[7] = 1;
                  var15._work[8] = 0;
                  if (BulletAction[var9][1] == 0) {
                     var15._work[9] = 0;
                  } else {
                     var15._work[9] = 1;
                  }

                  var15._work[11] = SpecialType[var9];
                  if (SpecialType[var9] >= 9 && PlayerAttack[var9] != 0) {
                     var14 = ExtremeObject;
                     var10002 = var14[var9]++;
                     var15._work[8] = 1;
                  } else {
                     var15._work[8] = 0;
                  }

                  var15._work[12] = (short)(this.ChrGameData[var9 + 3].piGameData[this.ChrGameData[var9 + 3].piGameDataPos[4] + SpecialType[var9] * 2 * this.ChrGameData[var9 + 3].piGameDataXSize[4] + 38 + 1] << 8 & '\uff00' | this.ChrGameData[var9 + 3].piGameData[this.ChrGameData[var9 + 3].piGameDataPos[4] + SpecialType[var9] * 2 * this.ChrGameData[var9 + 3].piGameDataXSize[4] + 38]);
                  var15._work[13] = (short)(this.ChrGameData[var9 + 3].piGameData[this.ChrGameData[var9 + 3].piGameDataPos[4] + SpecialType[var9] * 2 * this.ChrGameData[var9 + 3].piGameDataXSize[4] + 40 + 1] << 8 & '\uff00' | this.ChrGameData[var9 + 3].piGameData[this.ChrGameData[var9 + 3].piGameDataPos[4] + SpecialType[var9] * 2 * this.ChrGameData[var9 + 3].piGameDataXSize[4] + 40]);
               }
            }

            objExec.hit[var5 + 0] = -1;
         }

         ++var6;
      }

      var14 = PlayerState;
      var14[var9] &= -50069508;
      this.CheckOptFlag(var1);
      if (iZoomBase != 100) {
         var18 = PlayerXPos[var9];
         var2 = iZoomXCenter;
         var17 = PlayerYPos[var9];
         var5 = iZoomYCenter;
         this._SetXY(var1, 15728640 + ((var18 - var2 + var11 >> 16) * iZoomBase / 100 << 16), 10485760 + ((var17 - var5 >> 16) * iZoomBase / 100 << 16));
      }

      if ((PlayerState[var9] & 16777216) != 0) {
         ObjReq var16 = objExec;
         var16.wObjFlag |= 1;
      }

   }

   boolean PushCheck(GlobalWork var1, int var2, int var3) {
      boolean var4;
      if (Math.abs((tcbPlayer[0].obj.x >> 16) - (tcbPlayer[1].obj.x >> 16)) >= 240) {
         if (var2 == 0) {
            if (CPURand[0] % 100 < this.pGameData.piGameData[this.pGameData.piGameDataPos[3] + this.pGameData.piGameDataXSize[3] * 18 + CPULevel[var3]] && (tcbPlayer[var3].obj.ano == 1 || tcbPlayer[var3].obj.ano == 2 || tcbPlayer[var3].obj.ano == 3 || tcbPlayer[var3].obj.ano == 5 || tcbPlayer[var3].obj.ano == 6 || tcbPlayer[var3].obj.ano == 7 || tcbPlayer[var3].obj.ano == 8 || tcbPlayer[var3].obj.ano == 9 || tcbPlayer[var3].obj.ano == 4 || tcbPlayer[var3].obj.ano == 81 || tcbPlayer[var3].obj.ano == 10 || tcbPlayer[var3].obj.ano == 11 || tcbPlayer[var3].obj.ano == 12 || tcbPlayer[var3].obj.ano == 0) && Synchro[var3] >= 100) {
               var4 = true;
               return var4;
            }
         } else if ((tcbPlayer[var3].obj.ano == 1 || tcbPlayer[var3].obj.ano == 2 || tcbPlayer[var3].obj.ano == 3 || tcbPlayer[var3].obj.ano == 5 || tcbPlayer[var3].obj.ano == 6 || tcbPlayer[var3].obj.ano == 7 || tcbPlayer[var3].obj.ano == 8 || tcbPlayer[var3].obj.ano == 9 || tcbPlayer[var3].obj.ano == 4 || tcbPlayer[var3].obj.ano == 81 || tcbPlayer[var3].obj.ano == 10 || tcbPlayer[var3].obj.ano == 11 || tcbPlayer[var3].obj.ano == 12 || tcbPlayer[var3].obj.ano == 0) && Synchro[var3] >= 100) {
            var4 = true;
            return var4;
         }
      }

      var4 = false;
      return var4;
   }

   void ReleaseAllImage(GlobalWork var1) {
      for(int var2 = 0; var2 < 31; ++var2) {
         this.ReleaseImage(var1, var2);
      }

   }

   public void ReleaseFramebuffer(GlobalWork var1) {
      if (this.osb != null) {
         this.osb.Dispose(var1.gl);
         this.osb = null;
      }

   }

   void ReleaseImage(GlobalWork var1, int var2) {
   }

   public void Run(GlobalWork var1) {
      if (var1 != null) {
         iLanguage = var1.iLocale;
         this.gl = var1.gl;
         byte var5 = 0;
         byte var4 = 0;
         int var2 = var4;

         Exception var10000;
         label613: {
            boolean var10001;
            label640: {
               try {
                  if (var1.bResume) {
                     break label640;
                  }
               } catch (Exception var80) {
                  var10000 = var80;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               try {
                  this.PlaySE(var1, 0);
               } catch (Exception var79) {
                  var10000 = var79;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               try {
                  this.controller.SetKey(var1.keyData);
               } catch (Exception var78) {
                  var10000 = var78;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               try {
                  TapXPos[0] = this.controller.GetTapX();
               } catch (Exception var77) {
                  var10000 = var77;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               try {
                  TapYPos[0] = this.controller.GetTapY();
               } catch (Exception var76) {
                  var10000 = var76;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               try {
                  TapPullXPos[0] = this.controller.GetTapPullX();
               } catch (Exception var75) {
                  var10000 = var75;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               try {
                  TapPullYPos[0] = this.controller.GetTapPullY();
               } catch (Exception var74) {
                  var10000 = var74;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               try {
                  TapType[0] = this.controller.GetTapType();
               } catch (Exception var73) {
                  var10000 = var73;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               try {
                  iTouchStatus = 0;
               } catch (Exception var72) {
                  var10000 = var72;
                  var10001 = false;
                  break label613;
               }

               int var3;
               for(var3 = 0; var3 < 5; ++var3) {
                  var2 = var4;

                  try {
                     TouchesStatus[var3] = 0;
                  } catch (Exception var70) {
                     var10000 = var70;
                     var10001 = false;
                     break label613;
                  }

                  var2 = var4;

                  try {
                     TouchesXPos[var3] = var1.keyData.getX(var3);
                  } catch (Exception var69) {
                     var10000 = var69;
                     var10001 = false;
                     break label613;
                  }

                  var2 = var4;

                  try {
                     TouchesYPos[var3] = var1.keyData.getY(var3);
                  } catch (Exception var68) {
                     var10000 = var68;
                     var10001 = false;
                     break label613;
                  }

                  var2 = var4;

                  try {
                     TouchesXPosGame[var3] = TouchesXPos[var3] - _screenoffect_frame[0];
                  } catch (Exception var67) {
                     var10000 = var67;
                     var10001 = false;
                     break label613;
                  }

                  var2 = var4;

                  try {
                     TouchesYPosGame[var3] = TouchesYPos[var3] + _screenoffect_frame[1];
                  } catch (Exception var66) {
                     var10000 = var66;
                     var10001 = false;
                     break label613;
                  }

                  var2 = var4;

                  try {
                     if (!var1.keyData.isBeginTouch(var3)) {
                        continue;
                     }
                  } catch (Exception var71) {
                     var10000 = var71;
                     var10001 = false;
                     break label613;
                  }

                  var2 = var4;

                  try {
                     TouchesStatus[var3] = 1;
                  } catch (Exception var65) {
                     var10000 = var65;
                     var10001 = false;
                     break label613;
                  }

                  var2 = var4;

                  try {
                     iTouchStatus = 1;
                  } catch (Exception var64) {
                     var10000 = var64;
                     var10001 = false;
                     break label613;
                  }
               }

               var2 = var4;

               try {
                  var1.keyData.ClearBegin();
               } catch (Exception var63) {
                  var10000 = var63;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               try {
                  bBackKeyPush = var1.bBackKey;
               } catch (Exception var62) {
                  var10000 = var62;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               try {
                  var1.bBackKey = false;
               } catch (Exception var61) {
                  var10000 = var61;
                  var10001 = false;
                  break label613;
               }

               var3 = var5;

               while(true) {
                  var2 = var3;

                  try {
                     bTaskRepeat = false;
                  } catch (Exception var44) {
                     var10000 = var44;
                     var10001 = false;
                     break label613;
                  }

                  var2 = var3;

                  try {
                     bTaskSkip = false;
                  } catch (Exception var43) {
                     var10000 = var43;
                     var10001 = false;
                     break label613;
                  }

                  var2 = var3;
                  int var81 = var3;

                  label618: {
                     label619: {
                        try {
                           if (!this.BTRev(var1)) {
                              break label619;
                           }
                        } catch (Exception var51) {
                           var10000 = var51;
                           var10001 = false;
                           break label613;
                        }

                        var2 = var3;

                        try {
                           tcbNow = tcbHead.next;
                        } catch (Exception var42) {
                           var10000 = var42;
                           var10001 = false;
                           break label613;
                        }

                        var2 = var3;

                        try {
                           tcbPrev = tcbHead;
                        } catch (Exception var41) {
                           var10000 = var41;
                           var10001 = false;
                           break label613;
                        }

                        while(true) {
                           var2 = var3;

                           try {
                              if (tcbNow == null) {
                                 break;
                              }
                           } catch (Exception var53) {
                              var10000 = var53;
                              var10001 = false;
                              break label613;
                           }

                           var2 = var3;

                           label621: {
                              try {
                                 if (!bTaskSkip) {
                                    break label621;
                                 }
                              } catch (Exception var60) {
                                 var10000 = var60;
                                 var10001 = false;
                                 break label613;
                              }

                              var2 = var3;

                              try {
                                 if ((tcbNow.prio & '\uff00') != 4096) {
                                    break;
                                 }
                              } catch (Exception var52) {
                                 var10000 = var52;
                                 var10001 = false;
                                 break label613;
                              }
                           }

                           var2 = var3;

                           label622: {
                              label623: {
                                 label624: {
                                    try {
                                       if (iTaskSleep != 0) {
                                          break label624;
                                       }
                                    } catch (Exception var59) {
                                       var10000 = var59;
                                       var10001 = false;
                                       break label613;
                                    }

                                    var2 = var3;

                                    try {
                                       if (!bActionStop) {
                                          break label623;
                                       }
                                    } catch (Exception var58) {
                                       var10000 = var58;
                                       var10001 = false;
                                       break label613;
                                    }
                                 }

                                 var2 = var3;
                                 var81 = var3;

                                 try {
                                    if ((tcbNow.prio & '\uf000') == 12288) {
                                       break label622;
                                    }
                                 } catch (Exception var56) {
                                    var10000 = var56;
                                    var10001 = false;
                                    break label613;
                                 }
                              }

                              var2 = var3;

                              label625: {
                                 try {
                                    if (tcbNow.act) {
                                       break label625;
                                    }
                                 } catch (Exception var57) {
                                    var10000 = var57;
                                    var10001 = false;
                                    break label613;
                                 }

                                 var2 = var3;

                                 try {
                                    tcbPrev.next = tcbNow.next;
                                 } catch (Exception var40) {
                                    var10000 = var40;
                                    var10001 = false;
                                    break label613;
                                 }

                                 var2 = var3;

                                 try {
                                    tcbNow.next = tcbStock;
                                 } catch (Exception var39) {
                                    var10000 = var39;
                                    var10001 = false;
                                    break label613;
                                 }

                                 var2 = var3;

                                 try {
                                    tcbStock = tcbNow;
                                 } catch (Exception var38) {
                                    var10000 = var38;
                                    var10001 = false;
                                    break label613;
                                 }

                                 var2 = var3;

                                 try {
                                    tcbNow = tcbPrev.next;
                                    continue;
                                 } catch (Exception var37) {
                                    var10000 = var37;
                                    var10001 = false;
                                    break label613;
                                 }
                              }

                              var2 = var3;
                              var81 = var3;

                              try {
                                 if (tcbNow.skip != 0) {
                                    break label622;
                                 }
                              } catch (Exception var55) {
                                 var10000 = var55;
                                 var10001 = false;
                                 break label613;
                              }

                              var2 = var3;
                              var81 = var3;

                              try {
                                 if (tcbNow.md == 0) {
                                    break label622;
                                 }
                              } catch (Exception var54) {
                                 var10000 = var54;
                                 var10001 = false;
                                 break label613;
                              }

                              var2 = var3;

                              try {
                                 objExec = tcbNow.obj;
                              } catch (Exception var36) {
                                 var10000 = var36;
                                 var10001 = false;
                                 break label613;
                              }

                              var2 = var3;

                              try {
                                 var81 = tcbNow.md;
                              } catch (Exception var35) {
                                 var10000 = var35;
                                 var10001 = false;
                                 break label613;
                              }

                              var2 = var81;

                              try {
                                 this.Game(var1, tcbNow.md);
                              } catch (Exception var34) {
                                 var10000 = var34;
                                 var10001 = false;
                                 break label613;
                              }
                           }

                           var2 = var81;

                           try {
                              tcbPrev = tcbNow;
                           } catch (Exception var33) {
                              var10000 = var33;
                              var10001 = false;
                              break label613;
                           }

                           var2 = var81;

                           try {
                              tcbNow = tcbNow.next;
                           } catch (Exception var32) {
                              var10000 = var32;
                              var10001 = false;
                              break label613;
                           }

                           var3 = var81;
                        }

                        var2 = var3;

                        try {
                           iTouchStatus = 0;
                        } catch (Exception var31) {
                           var10000 = var31;
                           var10001 = false;
                           break label613;
                        }

                        var81 = 0;

                        while(true) {
                           if (var81 >= 5) {
                              var2 = var3;

                              try {
                                 if (this.BTSend(var1)) {
                                    break label618;
                                 }
                              } catch (Exception var50) {
                                 var10000 = var50;
                                 var10001 = false;
                                 break label613;
                              }

                              var2 = var3;

                              try {
                                 bBTRevOK = false;
                              } catch (Exception var49) {
                                 var10000 = var49;
                                 var10001 = false;
                                 break label613;
                              }

                              var81 = var3;
                              break;
                           }

                           var2 = var3;

                           try {
                              TouchesStatus[var81] = 0;
                           } catch (Exception var30) {
                              var10000 = var30;
                              var10001 = false;
                              break label613;
                           }

                           var2 = var3;

                           try {
                              TouchesXPos[var81] = 0;
                           } catch (Exception var29) {
                              var10000 = var29;
                              var10001 = false;
                              break label613;
                           }

                           var2 = var3;

                           try {
                              TouchesYPos[var81] = 0;
                           } catch (Exception var28) {
                              var10000 = var28;
                              var10001 = false;
                              break label613;
                           }

                           var2 = var3;

                           try {
                              TouchesXPosGame[var81] = 0;
                           } catch (Exception var27) {
                              var10000 = var27;
                              var10001 = false;
                              break label613;
                           }

                           var2 = var3;

                           try {
                              TouchesYPosGame[var81] = 0;
                           } catch (Exception var26) {
                              var10000 = var26;
                              var10001 = false;
                              break label613;
                           }

                           ++var81;
                        }
                     }

                     var2 = var81;

                     try {
                        ++iTaskLoop;
                     } catch (Exception var48) {
                        var10000 = var48;
                        var10001 = false;
                        break label613;
                     }

                     var2 = var81;

                     try {
                        bBackKeyPush = false;
                     } catch (Exception var47) {
                        var10000 = var47;
                        var10001 = false;
                        break label613;
                     }

                     var2 = var81;

                     try {
                        bResume = false;
                     } catch (Exception var46) {
                        var10000 = var46;
                        var10001 = false;
                        break label613;
                     }

                     var2 = var81;

                     boolean var6;
                     try {
                        var6 = bTaskRepeat;
                     } catch (Exception var45) {
                        var10000 = var45;
                        var10001 = false;
                        break label613;
                     }

                     var3 = var81;
                     if (var6) {
                        continue;
                     }

                     var2 = var81;
                     break;
                  }

                  var2 = 65535;
                  break;
               }

               try {
                  JoyTrig[0] = 0;
               } catch (Exception var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label613;
               }

               if (iTaskSleep > 0) {
                  --iTaskSleep;
               }

               this.Draw(var1);
               return;
            }

            var2 = var4;

            label628: {
               try {
                  if (this.stringTexture != null) {
                     break label628;
                  }
               } catch (Exception var24) {
                  var10000 = var24;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               try {
                  this.stringTexture = new StringTexture[2];
               } catch (Exception var23) {
                  var10000 = var23;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               StringTexture[] var7;
               try {
                  var7 = this.stringTexture;
               } catch (Exception var22) {
                  var10000 = var22;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               StringTexture var8;
               try {
                  var8 = new StringTexture();
               } catch (Exception var21) {
                  var10000 = var21;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               /*try {
                  var8.<init>();
               } catch (Exception var20) {
                  var10000 = var20;
                  var10001 = false;
                  break label613;
               }*/

               var7[0] = var8;
               var2 = var4;

               try {
                  var7 = this.stringTexture;
               } catch (Exception var19) {
                  var10000 = var19;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               try {
                  var8 = new StringTexture();
               } catch (Exception var18) {
                  var10000 = var18;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               /*try {
                  var8.<init>();
               } catch (Exception var17) {
                  var10000 = var17;
                  var10001 = false;
                  break label613;
               }*/

               var7[1] = var8;
            }

            var2 = var4;

            label629: {
               try {
                  if (this.stringTexture[0].GetImage() != 0) {
                     break label629;
                  }
               } catch (Exception var16) {
                  var10000 = var16;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               try {
                  this.stringTexture[0].CreateBitmap(512, 512);
               } catch (Exception var15) {
                  var10000 = var15;
                  var10001 = false;
                  break label613;
               }
            }

            var2 = var4;

            label630: {
               try {
                  if (this.stringTexture[1].GetImage() != 0) {
                     break label630;
                  }
               } catch (Exception var14) {
                  var10000 = var14;
                  var10001 = false;
                  break label613;
               }

               var2 = var4;

               try {
                  this.stringTexture[1].CreateBitmap(512, 512);
               } catch (Exception var13) {
                  var10000 = var13;
                  var10001 = false;
                  break label613;
               }
            }

            var2 = var4;

            try {
               Graphics2D.getInstance().dispose();
            } catch (Exception var12) {
               var10000 = var12;
               var10001 = false;
               break label613;
            }

            var2 = var4;

            try {
               Graphics2D.getInstance().Init();
            } catch (Exception var11) {
               var10000 = var11;
               var10001 = false;
               break label613;
            }

            var2 = var4;

            try {
               this.PlayBGM(var1, iPlayBGMNo, bBGMPlayLoop);
            } catch (Exception var10) {
               var10000 = var10;
               var10001 = false;
               break label613;
            }

            var2 = var4;

            try {
               var1.bResume = false;
               return;
            } catch (Exception var9) {
               var10000 = var9;
               var10001 = false;
            }
         }

         Exception var82 = var10000;
         Log.e("Run", "md=[" + var2 + "]:ERROR=" + var82);
         var1.bThreadActive = false;
      }

   }

   boolean RushCheck(GlobalWork var1) {
      boolean var2;
      if (Life[0] > 0 && Life[1] > 0) {
         if (tcbPlayer[0].obj.ano != 51 && tcbPlayer[0].obj.ano != 55 && tcbPlayer[1].obj.ano != 51 && tcbPlayer[1].obj.ano != 55 && tcbPlayer[0].obj.ano != 61 && tcbPlayer[0].obj.ano != 62 && tcbPlayer[1].obj.ano != 61 && tcbPlayer[1].obj.ano != 62 && tcbPlayer[0].obj.ano != 312 && tcbPlayer[1].obj.ano != 312 && tcbPlayer[0].obj.ano != 310 && tcbPlayer[1].obj.ano != 310) {
            if (tcbPlayer[0].md != 911 && tcbPlayer[0].md != 912 && tcbPlayer[0].md != 913 && tcbPlayer[0].md != 914 && tcbPlayer[0].md != 915 && tcbPlayer[0].md != 911 && tcbPlayer[0].md != 912 && tcbPlayer[0].md != 913 && tcbPlayer[0].md != 914 && tcbPlayer[0].md != 915) {
               var2 = true;
            } else {
               var2 = false;
            }
         } else {
            var2 = false;
         }
      } else {
         var2 = false;
      }

      return var2;
   }

   boolean RushGoCheck(GlobalWork var1, int var2) {
      int var3 = 1 - var2;
      int var4 = Math.abs(tcbPlayer[var2].obj.y - 15728640 - (tcbPlayer[var3].obj.y - 15728640));
      boolean var5;
      if (AICtrl[var2] && var2 == 1 && iTimer > 0 && iTCBReqNum[var3] <= 0 && (tcbPlayer[var2].wFlag & 1) == 0 && (tcbPlayer[var2].wFlag & 4096) == 0 && var4 >> 16 < 48) {
         var5 = true;
      } else {
         var5 = false;
      }

      return var5;
   }

   public void SYNCHRO_ADD(GlobalWork var1, int var2, int var3) {
      if (Life[var2] != 0 && iTimer != 0) {
         int[] var4 = Synchro;
         var4[var2] += var3;
         if (Synchro[var2] > SynchroMax[var2]) {
            Synchro[var2] = SynchroMax[var2];
         }
      }

   }

   public void SYNCHRO_DEC(GlobalWork var1, int var2, int var3) {
      int[] var4 = Synchro;
      var4[var2] -= var3;
      if (Synchro[var2] < 0) {
         Synchro[var2] = 0;
      }

   }

   public void SaveConfig(GlobalWork var1) {
      this._FILELoad(var1);
   }

   public boolean SelfDamage(GlobalWork var1, int var2, int var3, int var4) {
      if (HitActNo[var2] == -1) {
         OldLifeSet[var2] = true;
      }

      if (Life[var2] <= var3) {
         Life[var2] = 1;
      } else {
         this.LIFE_DEC(var1, var2, var3);
      }

      if ((iPlayMode == 2 || this.MissionLifeCheck(var1, var2, iStage) != 0) && Life[var2] <= 0) {
         Life[var2] = 1;
      }

      return true;
   }

   void SetBinary(GlobalWork var1, int var2, int var3, int var4) {
      iBinarySize = 0;
      pBinaryData = null;
      String var6 = "";
      String var5;
      if (var2 == 0) {
         if (var3 == 0) {
            return;
         }

         var5 = "card" + Utility.InttoString(3, var3);
      } else {
         var5 = var6;
         if (var2 == 1) {
            switch(var4) {
            case 0:
               var5 = "char" + Utility.InttoString(2, var3);
               break;
            case 1:
               var5 = "chardemo" + Utility.InttoString(2, var3);
               break;
            case 2:
               var5 = "charf" + Utility.InttoString(2, var3);
               break;
            default:
               var5 = var6;
            }
         }
      }

      if (var5.length() > 0) {
         for(var2 = 0; var2 < 2; ++var2) {
            label47: {
               boolean var10001;
               if (var2 == 0) {
                  try {
                     pBinaryData = Utility.readDataRaw(var1.context, var5);
                  } catch (Exception var10) {
                     var10001 = false;
                     break label47;
                  }
               } else {
                  try {
                     Context var11 = var1.context;
                     StringBuilder var7 = new StringBuilder();
                     pBinaryData = Utility.readDataFile(var11, var7.append(var5).append(".pac").toString());
                  } catch (Exception var9) {
                     var10001 = false;
                     break label47;
                  }
               }

               try {
                  if (pBinaryData != null) {
                     iBinarySize = pBinaryData.length;
                     break;
                  }
                  continue;
               } catch (Exception var8) {
                  var10001 = false;
               }
            }

            pBinaryData = null;
         }
      }

   }

   void SetCardNo(GlobalWork var1, int var2, int var3, int var4) {
      var2 = var2 * 100 + 30 + 22 + (var3 << 1);
      ConfigData[var2] = (byte)(var4 & 255);
      ConfigData[var2 + 1] = (byte)(var4 >> 8 & 255);
   }

   void SetCardVersion(GlobalWork var1, int var2, int var3) {
      ConfigData[var2 + 11400] = (byte)(var3 & 255);
   }

   void SetCharDL(GlobalWork var1, int var2) {
      ConfigData[var2 * 100 + 30 + 2] = 1;
   }

   void SetCharVersion(GlobalWork var1, int var2, int var3) {
      ConfigData[var2 * 100 + 30 + 3] = (byte)(var3 & 255);
   }

   void SetCharVisible(GlobalWork var1, int var2) {
      ConfigData[var2 * 100 + 30 + 1] = 1;
      this._FILESave(var1);
   }

   void SetDefaultOpen(GlobalWork var1) {
      for(int var2 = 0; var2 < this.pGameData.piGameDataYSize[158]; ++var2) {
         if (var2 < 13) {
            short var3 = this.pGameData.piGameData[this.pGameData.piGameDataPos[158] + this.pGameData.piGameDataXSize[158] * var2 + 0];
            if (this.pGameData.piGameData[this.pGameData.piGameDataPos[158] + this.pGameData.piGameDataXSize[158] * var2 + 1] != 0) {
               ConfigData[var3 * 100 + 30 + 85] = 1;
            }

            ConfigData[var3 * 100 + 30 + 1] = 1;
         }
      }

      this._FILESave(var1);
   }

   void SetLoad(GlobalWork var1, boolean var2) {
      LoadData[0] = 0;
      LoadData[30] = 0;
      LoadData[29] = 0;

      int var3;
      for(var3 = 0; var3 < 31; ++var3) {
         Create[var3] = -1;
         if (this.ChrGameData[var3] == null) {
            this.ChrGameData[var3] = new GameData();
         }

         if (LoadData[var3] != -1) {
            int var4 = this.IDList[var3] + LoadData[var3];
            if (CreatedAct[var3] != var4) {
               this.ChrGameData[var3].Dispose(var1);
               CreatedAct[var3] = var4;
               Create[var3] = var4;
            }
         } else if (CreatedAct[var3] != -1) {
            this.ChrGameData[var3].Dispose(var1);
            CreatedAct[var3] = -1;
            LoadFilter[var3] = 0;
         }
      }

      iLoadingType = 0;
      if (var2) {
         iLoadingType = 31;
         bDLError = false;

         for(var3 = 0; var3 < 31; ++var3) {
            this.ChrSoundCount[var3] = 0;
            if (Create[var3] == -1) {
               LoadFilter[var3] = 0;
            } else {
               String var5 = this.GetResName2(var1, this.IDList[var3], LoadData[var3]);
               if (!this.ChrGameData[var3].Init(var1, var5, 2, LoadFilter[var3])) {
                  bDLError = true;
               }

               LoadFilter[var3] = 0;
            }
         }

         this.SoundLoad(var1);
      }

   }

   void SetObj(GlobalWork var1, int var2, ObjReq var3) {
      if (var3 != null && var3.prio != var2) {
         var3.prio = var2;

         for(var2 = 0; var2 < var3.iLinkNum; ++var2) {
            if (var3.lnk[var2] != null) {
               var3.lnk[var2].prio = var3.prio;
            }
         }
      }

   }

   void SetString(GlobalWork var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9, int var10, int var11, int var12, int var13) {
      boolean var48 = false;
      byte var24 = 0;
      byte var18 = 0;
      int var16 = 0;
      int var15 = 0;
      byte var23 = 0;
      byte var30 = 0;
      byte var40 = 0;
      int var17 = 0;
      int var20 = 0;
      int var22 = 0;
      int var21 = var10;
      int var29 = 255;
      int var27 = 255;
      int var26 = 255;
      int var19 = 0;
      int var55;
      switch(var5) {
      case 0:
         for(var16 = 0; var16 < var7; ++var16) {
            var15 += ((this.pGameData.piGameData[this.pGameData.piGameDataPos[var6] + this.pGameData.piGameDataXSize[var6] * 0 + var15] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var6] + this.pGameData.piGameDataXSize[var6] * 0 + var15 + 1] & 255) + 2;
         }

         var55 = (this.pGameData.piGameData[this.pGameData.piGameDataPos[var6] + this.pGameData.piGameDataXSize[var6] * 0 + var15] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var6] + this.pGameData.piGameDataXSize[var6] * 0 + var15 + 1] & 255;
         var7 = var15 + 2;
         break;
      case 1:
         var15 = 0;

         for(var16 = var24; var15 < var7; ++var15) {
            var16 += ((this.ChrGameData[var2 + 6].piGameData[this.ChrGameData[var2 + 6].piGameDataPos[var6] + this.ChrGameData[var2 + 6].piGameDataXSize[var6] * 0 + var16] & 255) << 8 | this.ChrGameData[var2 + 6].piGameData[this.ChrGameData[var2 + 6].piGameDataPos[var6] + this.ChrGameData[var2 + 6].piGameDataXSize[var6] * 0 + var16 + 1] & 255) + 2;
         }

         var55 = (this.ChrGameData[var2 + 6].piGameData[this.ChrGameData[var2 + 6].piGameDataPos[var6] + this.ChrGameData[var2 + 6].piGameDataXSize[var6] * 0 + var16] & 255) << 8 | this.ChrGameData[var2 + 6].piGameData[this.ChrGameData[var2 + 6].piGameDataPos[var6] + this.ChrGameData[var2 + 6].piGameDataXSize[var6] * 0 + var16 + 1] & 255;
         var7 = var16 + 2;
         break;
      case 2:
         var15 = 0;

         for(var16 = var18; var15 < var7; ++var15) {
            var16 += ((this.pTextData.piGameData[this.pTextData.piGameDataPos[var6] + this.pTextData.piGameDataXSize[var6] * 0 + var16] & 255) << 8 | this.pTextData.piGameData[this.pTextData.piGameDataPos[var6] + this.pTextData.piGameDataXSize[var6] * 0 + var16 + 1] & 255) + 2;
         }

         var55 = (this.pTextData.piGameData[this.pTextData.piGameDataPos[var6] + this.pTextData.piGameDataXSize[var6] * 0 + var16] & 255) << 8 | this.pTextData.piGameData[this.pTextData.piGameDataPos[var6] + this.pTextData.piGameDataXSize[var6] * 0 + var16 + 1] & 255;
         var7 = var16 + 2;
         break;
      case 3:
         for(var15 = 0; var15 < var7; ++var15) {
            var16 += ((this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[var6] + this.ChrGameData[var2 + 3].piGameDataXSize[var6] * 0 + var16] & 255) << 8 | this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[var6] + this.ChrGameData[var2 + 3].piGameDataXSize[var6] * 0 + var16 + 1] & 255) + 2;
         }

         var55 = (this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[var6] + this.ChrGameData[var2 + 3].piGameDataXSize[var6] * 0 + var16] & 255) << 8 | this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[var6] + this.ChrGameData[var2 + 3].piGameDataXSize[var6] * 0 + var16 + 1] & 255;
         var7 = var16 + 2;
         break;
      default:
         return;
      }

      if (var55 > 0) {
         byte[] var50 = new byte[var55 + 20];
         int var39 = 0;
         int var41 = var11;
         int var38 = var7;

         int var35;
         String var49;
         for(var15 = var23; var39 < var55; var41 = var35) {
            byte var14 = 0;
            switch(var5) {
            case 0:
               var14 = (byte)this.pGameData.piGameData[this.pGameData.piGameDataPos[var6] + this.pGameData.piGameDataXSize[var6] * 0 + var38];
               break;
            case 1:
               var14 = (byte)this.ChrGameData[var2 + 6].piGameData[this.ChrGameData[var2 + 6].piGameDataPos[var6] + this.ChrGameData[var2 + 6].piGameDataXSize[var6] * 0 + var38];
               break;
            case 2:
               var14 = (byte)this.pTextData.piGameData[this.pTextData.piGameDataPos[var6] + this.pTextData.piGameDataXSize[var6] * 0 + var38];
               break;
            case 3:
               var14 = (byte)this.ChrGameData[var2 + 3].piGameData[this.ChrGameData[var2 + 3].piGameDataPos[var6] + this.ChrGameData[var2 + 3].piGameDataXSize[var6] * 0 + var38];
            }

            int var25;
            int var34;
            int var42;
            int var43;
            int var44;
            byte var45;
            int var46;
            boolean var47;
            int var58;
            if (var30 == 0) {
               if (var14 == 95 && !var48) {
                  try {
                     var49 = new String(var50, this.gub(var5));
                  } catch (Exception var54) {
                     var49 = "";
                  }

                  var58 = var21;
                  var42 = var29;
                  var44 = var27;
                  var43 = var26;
                  var24 = var30;
                  var45 = var40;
                  var25 = var22;
                  var34 = var17;
                  var46 = var20;
                  var47 = var48;
                  var7 = var15;
                  var11 = var19;
                  var35 = var41;
                  if (var49.length() > 0) {
                     this.DrawText(var1, var4, var8, var9, var49, var21, var41, var12, var29, var27, var26, var13);
                     var35 = var41 + var12 + 2;
                     var58 = var10;
                     var11 = 0;

                     for(var7 = 0; var7 < var15; ++var7) {
                        var50[var7] = 0;
                     }

                     var7 = 0;
                     var47 = var48;
                     var46 = var20;
                     var34 = var17;
                     var25 = var22;
                     var45 = var40;
                     var24 = var30;
                     var43 = var26;
                     var44 = var27;
                     var42 = var29;
                  }
               } else if (var14 == 35 && !var48) {
                  var24 = 1;
                  var58 = var21;
                  var42 = var29;
                  var44 = var27;
                  var43 = var26;
                  var45 = var40;
                  var25 = var22;
                  var34 = var17;
                  var46 = var20;
                  var47 = var48;
                  var7 = var15;
                  var11 = var19;
                  var35 = var41;
               } else {
                  var11 = var19 + (var12 >> 1);
                  var50[var15] = var14;
                  var7 = var15 + 1;
                  if (!var48) {
                     var47 = this.Check2Byte(var14 & 255);
                     var58 = var21;
                     var42 = var29;
                     var44 = var27;
                     var43 = var26;
                     var24 = var30;
                     var45 = var40;
                     var25 = var22;
                     var34 = var17;
                     var46 = var20;
                     var35 = var41;
                  } else {
                     var47 = false;
                     var58 = var21;
                     var42 = var29;
                     var44 = var27;
                     var43 = var26;
                     var24 = var30;
                     var45 = var40;
                     var25 = var22;
                     var34 = var17;
                     var46 = var20;
                     var35 = var41;
                  }
               }
            } else if (var30 == 1) {
               var45 = var14;
               var25 = 1;
               var34 = 0;
               var24 = 2;
               var58 = var21;
               var42 = var29;
               var44 = var27;
               var43 = var26;
               var46 = var20;
               var47 = var48;
               var7 = var15;
               var11 = var19;
               var35 = var41;
            } else {
               var58 = var21;
               var42 = var29;
               var44 = var27;
               var43 = var26;
               var24 = var30;
               var45 = var40;
               var25 = var22;
               var34 = var17;
               var46 = var20;
               var47 = var48;
               var7 = var15;
               var11 = var19;
               var35 = var41;
               if (var30 == 2) {
                  label254: {
                     var16 = var22;
                     int var28 = var17;
                     if (var14 >= 48) {
                        var16 = var22;
                        var28 = var17;
                        if (var14 <= 57) {
                           var28 = var17 * 10 + (var14 - 48);
                           if (var22 <= 0) {
                              var16 = 1;
                           } else {
                              var16 = var22 * 10;
                           }
                        }
                     }

                     if (var14 >= 48 && var14 <= 57) {
                        var58 = var21;
                        var42 = var29;
                        var44 = var27;
                        var43 = var26;
                        var24 = var30;
                        var45 = var40;
                        var25 = var16;
                        var34 = var28;
                        var46 = var20;
                        var47 = var48;
                        var7 = var15;
                        var11 = var19;
                        var35 = var41;
                        if (var39 != var55 - 1) {
                           break label254;
                        }
                     }

                     int var31;
                     int var32;
                     int var33;
                     int var36;
                     int var37;
                     int var59;
                     if (var40 == 99) {
                        try {
                           var49 = new String(var50, this.gub(var5));
                        } catch (Exception var53) {
                           var49 = "";
                        }

                        var37 = var21;
                        var17 = var15;
                        var36 = var19;
                        if (var49.length() > 0) {
                           this.DrawText(var1, var4, var8, var9, var49, var21, var41, var12, var29, var27, var26, var13);
                           var37 = var21 + var19;
                           var36 = 0;

                           for(var7 = 0; var7 < var15; ++var7) {
                              var50[var7] = 0;
                           }

                           var17 = 0;
                        }

                        var33 = this.TextColor[var28 * 3 + 0];
                        var32 = this.TextColor[var28 * 3 + 1];
                        var31 = this.TextColor[var28 * 3 + 2];
                        var22 = var20;
                        var59 = var16;
                     } else {
                        var37 = var21;
                        var33 = var29;
                        var32 = var27;
                        var31 = var26;
                        var59 = var16;
                        var22 = var20;
                        var17 = var15;
                        var36 = var19;
                        if (var40 == 97) {
                           var7 = this.GetCardLevel(var1, var3);
                           var11 = var7;
                           if (var7 < 0) {
                              var11 = 0;
                           }

                           if (var28 == 1) {
                              var7 = this.GetCardLevel(var1, var3);
                           } else if (var28 == 2) {
                              var7 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var3 + 170] + this.pGameData.piGameDataXSize[var3 + 170] * 48 + var11 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var3 + 170] + this.pGameData.piGameDataXSize[var3 + 170] * 48 + var11 * 2] & 255);
                           } else if (var28 == 3) {
                              var7 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var3 + 170] + this.pGameData.piGameDataXSize[var3 + 170] * 50 + var11 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var3 + 170] + this.pGameData.piGameDataXSize[var3 + 170] * 50 + var11 * 2] & 255);
                           } else {
                              var7 = var20;
                              if (var28 == 4) {
                                 var7 = (short)((this.pGameData.piGameData[this.pGameData.piGameDataPos[var3 + 170] + this.pGameData.piGameDataXSize[var3 + 170] * 52 + var11 * 2 + 1] & 255) << 8 | this.pGameData.piGameData[this.pGameData.piGameDataPos[var3 + 170] + this.pGameData.piGameDataXSize[var3 + 170] * 52 + var11 * 2] & 255);
                              }
                           }

                           if (var28 == 1 && var7 < 0) {
                              var50[var15] = 45;
                              var11 = var15 + 1;
                              var50[var11] = 45;
                              ++var11;
                              var50[var11] = 45;
                              var17 = var11 + 1;
                              var37 = var21;
                              var33 = var29;
                              var32 = var27;
                              var31 = var26;
                              var59 = var16;
                              var22 = var7;
                              var36 = var19;
                           } else {
                              var11 = 100000;
                              boolean var57 = false;

                              while(true) {
                                 var37 = var21;
                                 var33 = var29;
                                 var32 = var27;
                                 var31 = var26;
                                 var59 = var11;
                                 var22 = var7;
                                 var17 = var15;
                                 var36 = var19;
                                 if (var11 <= 0) {
                                    break;
                                 }

                                 label175: {
                                    var20 = var7 / var11;
                                    if (var20 == 0 && !var57) {
                                       var17 = var15;
                                       if (var11 != 1) {
                                          break label175;
                                       }
                                    }

                                    var57 = true;
                                    var50[var15] = (byte)(var20 + 48);
                                    var17 = var15 + 1;
                                 }

                                 var7 %= var11;
                                 var11 /= 10;
                                 var15 = var17;
                              }
                           }
                        }
                     }

                     byte var56 = 0;
                     if (var14 >= 48) {
                        var58 = var37;
                        var42 = var33;
                        var44 = var32;
                        var43 = var31;
                        var24 = var56;
                        var45 = var40;
                        var25 = var59;
                        var34 = var28;
                        var46 = var22;
                        var47 = var48;
                        var7 = var17;
                        var11 = var36;
                        var35 = var41;
                        if (var14 <= 57) {
                           break label254;
                        }
                     }

                     if (var14 != 95) {
                        var16 = var36 + (var12 >> 1);
                        var50[var17] = var14;
                        ++var17;
                        var58 = var37;
                        var42 = var33;
                        var44 = var32;
                        var43 = var31;
                        var24 = var56;
                        var45 = var40;
                        var25 = var59;
                        var34 = var28;
                        var46 = var22;
                        var47 = var48;
                        var7 = var17;
                        var11 = var16;
                        var35 = var41;
                        if (!var48) {
                           var47 = this.Check2Byte(var14 & 255);
                           var58 = var37;
                           var42 = var33;
                           var44 = var32;
                           var43 = var31;
                           var24 = var56;
                           var45 = var40;
                           var25 = var59;
                           var34 = var28;
                           var46 = var22;
                           var7 = var17;
                           var11 = var16;
                           var35 = var41;
                        }
                     } else {
                        try {
                           var49 = new String(var50, this.gub(var5));
                        } catch (Exception var52) {
                           var49 = "";
                        }

                        if (var49.length() > 0) {
                           this.DrawText(var1, var4, var8, var9, var49, var37, var41, var12, var33, var32, var31, var13);
                        }

                        var35 = var41 + var12 + 2;
                        var58 = var10;
                        var11 = 0;

                        for(var7 = 0; var7 < var17; ++var7) {
                           var50[var7] = 0;
                        }

                        var7 = 0;
                        var42 = var33;
                        var44 = var32;
                        var43 = var31;
                        var24 = var56;
                        var45 = var40;
                        var25 = var59;
                        var34 = var28;
                        var46 = var22;
                        var47 = var48;
                     }
                  }
               }
            }

            ++var39;
            ++var38;
            var21 = var58;
            var29 = var42;
            var27 = var44;
            var26 = var43;
            var30 = var24;
            var40 = var45;
            var22 = var25;
            var17 = var34;
            var20 = var46;
            var48 = var47;
            var15 = var7;
            var19 = var11;
         }

         if (var15 > 0) {
            try {
               var49 = new String(var50, this.gub(var5));
            } catch (Exception var51) {
               var49 = "";
            }

            this.DrawText(var1, var4, var8, var9, var49, var21, var41, var12, var29, var27, var26, var13);
         }
      }

   }

   public int SmapDataCount(GlobalWork var1, int var2) {
      //return var1._smapInit.getSize(var2);
      return 0;
   }

   public boolean SmapDataEnd(GlobalWork var1) {
      //return var1._smapInit.isEnd();
      return false;
   }

   public int SmapDataError(GlobalWork var1) {
      //return var1._smapInit.getError();
      return 0;
   }

   public boolean SmapDataInit(GlobalWork var1) {
      /*if (var1._smapInit == null) {
         var1._smapInit = new smapoldInit();
      }

      boolean var2;
      if (var1._smapInit == null) {
         var2 = false;
      } else {
         var1._smapInit.Init();
         var2 = true;
      }

      return var2;*/
      return false;
   }

   public int SmapDataNo(GlobalWork var1, int var2, int var3) {
      //return var1._smapInit.getDataNo(var2, var3);
      return 0;
   }

   public String SmapDataURL(GlobalWork var1, int var2, int var3) {
      //return var1._smapInit.getDataURL(var2, var3);
      return "";
   }

   public int SmapDataVersion(GlobalWork var1, int var2, int var3) {
      //return var1._smapInit.getDataVersion(var2, var3);
      return 0;
   }

   void SoundLoad(GlobalWork var1) {
      SoundEffect.getInstance().releaseAudio();

      for(int var2 = 3; var2 <= 4; ++var2) {
         this.ChrSoundCount[var2] = this.ChrGameData[var2].getSoundCount();

         for(int var3 = 0; var3 < this.ChrGameData[var2].getSoundCount(); ++var3) {
            if (SoundEffect.getInstance().loadAudioTrack(var1.context, this.ChrGameData[var2].getSoundData(var3)) < 0) {
               SoundEffect.getInstance().releaseAudio();
               return;
            }
         }
      }

   }

   public void SpriteRun(ObjReq var1) {
      if (var1 != null) {
         int var2 = var1.acttype & -1044481;
         if (var1.iSpriteFlag != 0 && this.ChrGameData[var2].getSprite() != null) {
            this.ChrGameData[var2].getSprite().getData();
            if (var1.iSpriteStatus[18] == 0) {
               int[] var3 = var1.iSpriteStatus;
               int var10002 = var3[5]++;
               if (var1.iSpriteStatus[5] >= var1.iSpriteStatus[2]) {
                  if (var1.iSpriteStatus[16] == 0) {
                     var1.iSpriteStatus[18] = 1;
                  } else {
                     var1.iSpriteStatus[5] = 0;
                     var1.iSpriteStatus[20] = var1.iSpriteStatus[19];
                     int[] var4 = var1.iSpriteStatus;
                     var10002 = var4[17]++;
                  }
               } else {
                  var3 = var1.iSpriteStatus;
                  var3[20] += var1.iSpriteStatus[23];
               }
            }
         }
      }

   }

   public void SpriteSet(ObjReq var1, int var2) {
      if ((var1.acttype & 1044480) == 0) {
         int var3 = var1.acttype;
         if (this.ChrGameData[var3].getSprite() != null) {
            var1.iSpriteFlag = 1;
            byte[] var4 = this.ChrGameData[var3].getSprite().getData();
            var1.iSpriteStatus[1] = var2;
            var1.iSpriteStatus[19] = Utility.getPackPos(var4, var2, 0);
            var1.iSpriteStatus[21] = (short)(var4[var1.iSpriteStatus[19]] & 255 | (var4[var1.iSpriteStatus[19] + 1] & 255) << 8);
            var1.iSpriteStatus[3] = (short)(var4[var1.iSpriteStatus[19] + 2] & 255 | (var4[var1.iSpriteStatus[19] + 2 + 1] & 255) << 8);
            var1.iSpriteStatus[22] = (short)(var4[var1.iSpriteStatus[19] + 4] & 255 | (var4[var1.iSpriteStatus[19] + 4 + 1] & 255) << 8);
            var1.iSpriteStatus[4] = (short)(var4[var1.iSpriteStatus[19] + 6] & 255 | (var4[var1.iSpriteStatus[19] + 6 + 1] & 255) << 8);
            var1.iSpriteStatus[2] = (short)(var4[var1.iSpriteStatus[19] + 8] & 255 | (var4[var1.iSpriteStatus[19] + 8 + 1] & 255) << 8);
            var1.iSpriteStatus[16] = (short)(var4[var1.iSpriteStatus[19] + 10] & 255 | (var4[var1.iSpriteStatus[19] + 10 + 1] & 255) << 8);
            int[] var5 = var1.iSpriteStatus;
            var5[19] += 16;
            var1.iSpriteStatus[20] = var1.iSpriteStatus[19];
            var1.iSpriteStatus[18] = 0;
            var1.iSpriteStatus[17] = 0;
            var1.iSpriteStatus[5] = 0;
            var1.iSpriteStatus[23] = var1.iSpriteStatus[21] * var1.iSpriteStatus[3];
            if (var1.iSpriteStatus[2] <= 0) {
               var1.iSpriteStatus[18] = 1;
            }

            this.SpriteRun(var1);
         }
      }

   }

   public void StartPlayerAttack(GlobalWork var1) {
      int var4 = tcbNow._work[0];
      int var5 = 1 - var4;
      TCB var6 = tcbPlayer[var4];
      var6.wFlag &= -4098;
      if (CancelTime[var4] > 0) {
         var6 = tcbPlayer[var5];
         var6.iHitStop *= 2;
         tcbNow.iHitStop = 0;
      }

      if (PlayerXPos[var4] != PlayerXPos[var5]) {
         ObjReq var8;
         if (PlayerXPos[var4] < PlayerXPos[var5]) {
            var8 = objExec;
            var8.wObjFlag &= -17;
         } else {
            var8 = objExec;
            var8.wObjFlag |= 16;
         }
      }

      this._SetObj(var1, var4 * 4 + 150);
      PlayerAttack[var4] = 1;
      PlayerHitStop[var4] = 10;
      DamageHitBack[var4] = 0;
      GuardHitBack[var4] = 13;
      CancelTime[var4] = 0;
      DamageHitActNo[1 - var4] = 0;
      PlayerSearch[var4] = false;
      SpecialBulletNumber[var4] = 0;
      tcbNow.iHitStop = 0;
      int var3 = SpecialType[var4];
      SpecialKind[var4] = (short)(this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var3 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 0 + 1] << 8 & '\uff00' | this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var3 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 0]);
      short var2 = (short)(this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var3 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 2 + 1] << 8 & '\uff00' | this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var3 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 2]);
      if (SpecialType[var4] == 14 || SpecialType[var4] == 15) {
         AngryOn[var4] = true;
      }

      if (objExec.ano >= 40 && objExec.ano != 89 && objExec.ano != 80 && objExec.ano < 93 && var2 >= 40 && (SpecialType[var4] < 9 || SpecialType[var4] > 12)) {
         var6 = this._TaskMake(var1, 965, 13598);
         var6._work[0] = 8;
         var6._work[3] = PlayerXPos[var4];
         var6._work[4] = PlayerYPos[var4];
         var6._work[5] = 0;
      }

      objExec.ano = 0;
      this._SetAct(var1, objExec.acttype, var2);
      byte var7;
      if (PlayerYPos[var4] >= PlayerYPos[var5] + 3342336) {
         var7 = 17;
      } else if (PlayerYPos[var4] <= PlayerYPos[var5] - 2424832) {
         var7 = 18;
      } else {
         var7 = 2;
      }

      BulletAction[var4][0] = (short)(this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var3 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + var7 * 2 + 1] << 8 & '\uff00' | this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var3 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + var7 * 2]);
      BulletAction[var4][1] = (short)(this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var3 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 6 + 1] << 8 & '\uff00' | this.ChrGameData[var4 + 3].piGameData[this.ChrGameData[var4 + 3].piGameDataPos[4] + var3 * 2 * this.ChrGameData[var4 + 3].piGameDataXSize[4] + 6]);
   }

   void SwapGameData(GlobalWork var1, int var2, int var3) {
      GameData var5 = this.ChrGameData[var2];
      this.ChrGameData[var2] = this.ChrGameData[var3];
      this.ChrGameData[var3] = var5;
      int var4 = LoadData[var2];
      LoadData[var2] = LoadData[var3];
      LoadData[var3] = var4;
      var4 = CreatedAct[var2];
      CreatedAct[var2] = CreatedAct[var3];
      CreatedAct[var3] = var4;
      var4 = Create[var2];
      Create[var2] = Create[var3];
      Create[var3] = var4;
   }

   boolean TapGuradCnacelCheck(GlobalWork var1, int var2, int var3, int var4) {
      boolean var5;
      if (iControlType[var2] == 2) {
         var3 -= 50;
         var4 -= 50;
         if (TapXBT[var2] > var3 && TapXBT[var2] < var3 + 100 && TapYBT[var2] > var4 && TapYBT[var2] < var4 + 100 && (var2 == 0 || iPlayMode == 8)) {
            var5 = true;
            return var5;
         }
      }

      var5 = false;
      return var5;
   }

   void TextGDTString(GlobalWork var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9) {
      this.TextGDTStringAlpha(var1, var2, var3, var4, var5, var6, var7, var8, var9, 0);
   }

   void TextGDTStringAlpha(GlobalWork var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9, int var10) {
      this.SetString(var1, 0, 0, var2, 2, var3, var4, var5, var6, var7, var8, var9, var10);
   }

   void Voice(GlobalWork var1, int var2, int var3, int var4) {
      if (var2 == 0) {
         if (this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[36] + this.ChrGameData[var3 + 3].piGameDataXSize[36] * var4 + 0] > 0) {
            short var5 = this.ChrGameData[var3 + 3].piGameData[this.ChrGameData[var3 + 3].piGameDataPos[36] + this.ChrGameData[var3 + 3].piGameDataXSize[36] * var4 + 0];
            if (var3 == 1 && 80 <= var5) {
               var2 = var5 + this.ChrSoundCount[3];
            } else {
               var2 = var5;
               if (80 > var5) {
                  var2 = var5 - 1;
               }
            }

            iReqSENo = var2;
            this.PushSE(var1, var2);
         }
      } else {
         if (var3 == 1 && 80 <= var4) {
            var2 = var4 + this.ChrSoundCount[3];
         } else {
            var2 = var4;
            if (80 > var4) {
               var2 = var4 - 1;
            }
         }

         iReqSENo = var2;
         this.PushSE(var1, var2);
      }

   }

   void WorkInitialize(GlobalWork var1) {
      iFade = 0;
      bClrBack = true;
      iClrR = 0;
      iClrG = 0;
      iClrB = 0;
      SoftKey[0] = -1;
      SoftKey[1] = -1;
      SetSoftKey[0] = -1;
      SetSoftKey[1] = -1;
      iSystemFix = 0;
      iSkipFrame = 1;
   }

   void _ActReq(GlobalWork var1) {
      ObjReq var3 = tcbNow.obj;
      this._ActReqMain(var1, var3);

      for(int var2 = 0; var2 < 13; ++var2) {
         if (var3.lnk[var2] != null) {
            this._ActReqMain(var1, var3.lnk[var2]);
         }
      }

   }

   void _ActReqMain(GlobalWork var1, ObjReq var2) {
      if (var2 != null && (var2.acttype & 1044480) == 0) {
         if (var2.apt == 0) {
            var2.wActFlag |= 2;
         } else {
            int var10 = var2.acttype & -1044481;
            if (var2.parent != null && (var2.wActFlag & 'ꀀ') != 0) {
               if ((var2.wActFlag & '耀') != 0) {
                  if (var2.pat != var2.parent.pat) {
                     var2.pat = var2.parent.pat;
                     var2.time = 0;
                     var2.wActFlag &= -3;
                  } else {
                     var2.time = -1;
                  }
               }

               var2.x = var2.parent.x;
               var2.y = var2.parent.y;
            }

            if (var2.pat >= var2.mpt) {
               var2.wActFlag |= 2;
            } else if ((var2.wActFlag & 2) == 0) {
               if (var2.parent != null) {
                  if ((var2.parent.wActFlag & 4) != 0) {
                     return;
                  }
               } else if ((var2.wActFlag & 4) != 0) {
                  return;
               }

               if (var2.time > 0) {
                  if (var2.OptData[2] != 0) {
                     var2.iRotate += var2.iRotateAdd;
                     var2.iAlpha += var2.iAlphaAdd;
                     var2.zoomxBase += var2.iXZoomAdd;
                     var2.zoomyBase += var2.iYZoomAdd;
                     var2.iXZoom = var2.zoomxBase / 128;
                     var2.iYZoom = var2.zoomyBase / 128;
                     var2.oxBase += var2.oxAdd;
                     var2.oyBase += var2.oyAdd;
                     var2.ox = var2.oxBase / 128;
                     var2.oy = var2.oyBase / 128;
                  }

                  if ((var2.wActFlag & 'ꀀ') == 0) {
                     if (var2.iXSpeed != 0) {
                        if ((var2.wObjFlag & 16) != 0) {
                           var2.x -= var2.iXSpeed;
                        } else {
                           var2.x += var2.iXSpeed;
                        }
                     }

                     if (var2.iYSpeed != 0) {
                        if ((var2.wObjFlag & 32) != 0) {
                           var2.y -= var2.iYSpeed;
                        } else {
                           var2.y += var2.iYSpeed;
                        }
                     }

                     var2.iXSpeed += var2.iXAccel;
                     var2.iYSpeed += var2.iYAccel;
                  }

                  --var2.time;
                  if (var2.time > 0) {
                     return;
                  }

                  if ((var2.wActFlag & 1) != 0) {
                     var2.pat = 0;
                  } else {
                     ++var2.pat;
                     if (var2.pat >= var2.mpt) {
                        var2.wActFlag |= 2;
                        return;
                     }
                  }
               }

               int var3 = var2.apt + (var2.pat << 1);
               var3 = ((this.ChrGameData[var10].getData(3)[var3 + 1] & 255) << 8 | this.ChrGameData[var10].getData(3)[var3] & 255) + var2.apt + (var2.mpt << 1);
               byte var11 = this.ChrGameData[var10].getData(3)[var3];
               ++var3;
               if ((var11 & 32) != 0) {
                  var2.time = this.ChrGameData[var10].getData(3)[var3] & 255;
                  var2.timeMax = var2.time;
                  ++var3;
               } else {
                  var2.time = 0;
                  var2.timeMax = 0;
               }

               var2.img = (short)((this.ChrGameData[var10].getData(3)[var3 + 1] & 255) << 8 | this.ChrGameData[var10].getData(3)[var3] & 255);
               int var4 = var3 + 2;
               if ((var11 & 1) != 0) {
                  var2.ox = (short)((this.ChrGameData[var10].getData(3)[var4 + 1] & 255) << 8 | this.ChrGameData[var10].getData(3)[var4] & 255);
                  var3 = var4 + 2;
                  var2.oy = (short)((this.ChrGameData[var10].getData(3)[var3 + 1] & 255) << 8 | this.ChrGameData[var10].getData(3)[var3] & 255);
                  var4 = var3 + 2;
               } else {
                  var2.ox = 0;
                  var2.oy = 0;
               }

               var2.wActFlag &= 40960;
               var3 = var4;
               if ((var11 & 2) != 0) {
                  var2.wActFlag |= (short)((this.ChrGameData[var10].getData(3)[var4 + 1] & 255) << 8 | this.ChrGameData[var10].getData(3)[var4] & 255);
                  var3 = var4 + 2;
               }

               var2.se = -1;
               var4 = var3;
               if ((var11 & 8) != 0) {
                  byte var12 = this.ChrGameData[var10].getData(3)[var3];
                  if (80 > var12) {
                     iReqSENo = var12 - 1;
                     this.PushSE(var1, var12 - 1);
                  } else {
                     var2.se = var12;
                  }

                  var4 = var3 + 1;
               }

               if ((var2.wActFlag & 64) == 0) {
                  var2.iXSpeed = 0;
                  var2.iYSpeed = 0;
               }

               var2.iXAccel = 0;
               var2.iYAccel = 0;
               var3 = var4;
               if ((var11 & 4) != 0) {
                  byte var5 = this.ChrGameData[var10].getData(3)[var4];
                  ++var4;
                  var3 = var4;
                  if ((var5 & 1) != 0) {
                     var2.iXSpeed = (this.ChrGameData[var10].getData(3)[var4 + 3] & 255) << 24 | (this.ChrGameData[var10].getData(3)[var4 + 2] & 255) << 16 | (this.ChrGameData[var10].getData(3)[var4 + 1] & 255) << 8 | this.ChrGameData[var10].getData(3)[var4] & 255;
                     var3 = var4 + 4;
                  }

                  var4 = var3;
                  if ((var5 & 2) != 0) {
                     var2.iYSpeed = (this.ChrGameData[var10].getData(3)[var3 + 3] & 255) << 24 | (this.ChrGameData[var10].getData(3)[var3 + 2] & 255) << 16 | (this.ChrGameData[var10].getData(3)[var3 + 1] & 255) << 8 | this.ChrGameData[var10].getData(3)[var3] & 255;
                     var4 = var3 + 4;
                  }

                  if ((var5 & 4) != 0) {
                     var2.iXAccel = (this.ChrGameData[var10].getData(3)[var4 + 3] & 255) << 24 | (this.ChrGameData[var10].getData(3)[var4 + 2] & 255) << 16 | (this.ChrGameData[var10].getData(3)[var4 + 1] & 255) << 8 | this.ChrGameData[var10].getData(3)[var4] & 255;
                     var3 = var4 + 4;
                  } else {
                     var2.iXAccel = 0;
                     var3 = var4;
                  }

                  if ((var5 & 8) != 0) {
                     var2.iYAccel = (this.ChrGameData[var10].getData(3)[var3 + 3] & 255) << 24 | (this.ChrGameData[var10].getData(3)[var3 + 2] & 255) << 16 | (this.ChrGameData[var10].getData(3)[var3 + 1] & 255) << 8 | this.ChrGameData[var10].getData(3)[var3] & 255;
                     var3 += 4;
                  } else {
                     var2.iYAccel = 0;
                  }
               }

               int var7 = 0;
               var4 = 0;
               byte var8;
               int var13;
               if ((var11 & 16) != 0) {
                  byte var9 = 1;
                  var2.iHitNum = this.ChrGameData[var10].getData(3)[var3] & 255;
                  ++var3;
                  int var6 = 0;

                  while(true) {
                     var8 = var9;
                     var7 = var4;
                     var13 = var3;
                     if (var6 >= var2.iHitNum) {
                        break;
                     }

                     byte var14 = this.ChrGameData[var10].getData(3)[var3];
                     var13 = var6 * 5;
                     var2.hit[var13 + 0] = var14 & 127;
                     var4 |= 1 << (var14 & 127);
                     ++var3;
                     if ((var14 & 128) != 0) {
                        var2.hit[var13 + 1] = (short)((this.ChrGameData[var10].getData(3)[var3 + 1] & 255) << 8 | this.ChrGameData[var10].getData(3)[var3] & 255);
                        var2.hit[var13 + 2] = (short)((this.ChrGameData[var10].getData(3)[var3 + 3] & 255) << 8 | this.ChrGameData[var10].getData(3)[var3 + 2] & 255);
                        var2.hit[var13 + 3] = (short)((this.ChrGameData[var10].getData(3)[var3 + 5] & 255) << 8 | this.ChrGameData[var10].getData(3)[var3 + 4] & 255);
                        var2.hit[var13 + 4] = (short)((this.ChrGameData[var10].getData(3)[var3 + 7] & 255) << 8 | this.ChrGameData[var10].getData(3)[var3 + 6] & 255);
                        var3 += 8;
                     } else {
                        var2.hit[var13 + 1] = this.ChrGameData[var10].getData(3)[var3];
                        ++var3;
                        var2.hit[var13 + 2] = this.ChrGameData[var10].getData(3)[var3];
                        ++var3;
                        var2.hit[var13 + 3] = this.ChrGameData[var10].getData(3)[var3] & 255;
                        ++var3;
                        var2.hit[var13 + 4] = this.ChrGameData[var10].getData(3)[var3] & 255;
                        ++var3;
                     }

                     ++var6;
                  }
               } else {
                  var2.iHitNum = 0;
                  var8 = 0;
                  var13 = var3;
               }

               if (var2.parent == null) {
                  tcbNow.iHitCount = var8;
                  tcbNow.iHitFlag = var7;
               }

               if ((var11 & 64) != 0) {
                  var2.wOptFlag = (short)((this.ChrGameData[var10].getData(3)[var13 + 1] & 255) << 8 | this.ChrGameData[var10].getData(3)[var13] & 255);
                  var3 = var13 + 2;
                  var4 = 0;

                  while(true) {
                     var13 = var3;
                     if (var4 >= 4) {
                        break;
                     }

                     var2.OptData[var4] = this.ChrGameData[var10].getData(3)[var3] & 255;
                     ++var3;
                     ++var4;
                  }
               } else {
                  var2.wOptFlag = 0;
                  var2.OptData[0] = 0;
                  var2.OptData[1] = 0;
                  var2.OptData[2] = 0;
                  var2.OptData[3] = 0;
               }

               if ((var11 & 128) != 0) {
                  var2.iRotate = (short)((this.ChrGameData[var10].getData(3)[var13 + 1] & 255) << 8 | this.ChrGameData[var10].getData(3)[var13] & 255);
                  var2.iAlpha = (short)((this.ChrGameData[var10].getData(3)[var13 + 3] & 255) << 8 | this.ChrGameData[var10].getData(3)[var13 + 2] & 255);
                  var2.iXZoom = (short)((this.ChrGameData[var10].getData(3)[var13 + 5] & 255) << 8 | this.ChrGameData[var10].getData(3)[var13 + 4] & 255);
                  var2.iYZoom = (short)((this.ChrGameData[var10].getData(3)[var13 + 7] & 255) << 8 | this.ChrGameData[var10].getData(3)[var13 + 6] & 255);
                  var2.wActFlag |= 2048;
                  if (var2.iAlpha != 0) {
                     var3 = var2.iAlpha >> 8;
                     var2.iAlpha = 255 - (var2.iAlpha & 255);
                     if (var3 != 0) {
                        if (var3 == 1) {
                           var2.wActFlag |= 512;
                        } else {
                           var2.wActFlag |= 1024;
                        }
                     }
                  } else {
                     var2.iAlpha = 255;
                  }
               } else {
                  var2.iAlpha = 255;
                  var2.iRotate = 0;
                  var2.iXZoom = 100;
                  var2.iYZoom = 100;
               }

               this._Hokan(var1, var2, var11);
            }
         }
      }

   }

   public void _FILELoad(GlobalWork var1) {
      label38: {
         boolean var10001;
         byte[] var6;
         try {
            ConfigDataInit = false;
            var6 = Utility.readDataFile(var1.context, "save.bin");
         } catch (Exception var5) {
            var10001 = false;
            break label38;
         }

         if (var6 != null) {
            try {
               System.arraycopy(var6, 0, ConfigData, 0, var6.length);
               return;
            } catch (Exception var3) {
               var10001 = false;
            }
         } else {
            try {
               ConfigDataInit = true;
               return;
            } catch (Exception var4) {
               var10001 = false;
            }
         }

         try {
            ConfigDataInit = true;
            return;
         } catch (Exception var2) {
            var10001 = false;
         }
      }

      ConfigDataInit = true;
   }

   public void _FILESave(GlobalWork var1) {
      if (!Utility.writeDataFile(var1.context, "save.bin", ConfigData, false)) {
      }

   }

   public void _FILESaveLen(GlobalWork var1, int var2, int var3) {
      if (!Utility.writeDataFile("save.bin", ConfigData, var2, var3, var2, false)) {
      }

   }

   void _Hokan(GlobalWork var1, ObjReq var2, int var3) {
      int var4 = var2.pat + 1;
      var2.iRotateAdd = 0;
      var2.iAlphaAdd = 0;
      var2.iXZoomAdd = 0;
      var2.iYZoomAdd = 0;
      var2.oxAdd = 0;
      var2.oyAdd = 0;
      if (var2 != null && var2.OptData[2] != 0 && var2.time > 0) {
         var3 = var4;
         if (var4 >= var2.mpt) {
            var3 = 0;
         }

         int var6 = var2.acttype & -1044481;
         var3 = var2.apt + (var3 << 1);
         var3 = ((this.ChrGameData[var6].getData(3)[var3 + 1] & 255) << 8 | this.ChrGameData[var6].getData(3)[var3] & 255) + var2.apt + (var2.mpt << 1);
         byte var7 = this.ChrGameData[var6].getData(3)[var3];
         var4 = var3 + 1;
         var3 = var4;
         if ((var7 & 32) != 0) {
            var3 = var4 + 1;
         }

         var4 = var3 + 2;
         short var5;
         if ((var7 & 1) != 0) {
            short var11 = (short)((this.ChrGameData[var6].getData(3)[var4 + 1] & 255) << 8 | this.ChrGameData[var6].getData(3)[var4] & 255);
            var4 += 2;
            var5 = (short)((this.ChrGameData[var6].getData(3)[var4 + 1] & 255) << 8 | this.ChrGameData[var6].getData(3)[var4] & 255);
            var4 += 2;
            var2.oxAdd = (var11 * 128 - var2.ox * 128) / var2.time;
            var2.oyAdd = (var5 * 128 - var2.oy * 128) / var2.time;
            var2.oxBase = var2.ox * 128;
            var2.oyBase = var2.oy * 128;
         } else {
            var2.oxAdd = (0 - var2.ox * 128) / var2.time;
            var2.oyAdd = (0 - var2.oy * 128) / var2.time;
            var2.oxBase = var2.ox * 128;
            var2.oyBase = var2.oy * 128;
         }

         var3 = var4;
         if ((var7 & 2) != 0) {
            var3 = var4 + 2;
         }

         var4 = var3;
         if ((var7 & 8) != 0) {
            var4 = var3 + 1;
         }

         var3 = var4;
         int var10;
         if ((var7 & 4) != 0) {
            byte var8 = this.ChrGameData[var6].getData(3)[var4];
            ++var4;
            var3 = var4;
            if ((var8 & 1) != 0) {
               var3 = var4 + 4;
            }

            var4 = var3;
            if ((var8 & 2) != 0) {
               var4 = var3 + 4;
            }

            var10 = var4;
            if ((var8 & 4) != 0) {
               var10 = var4 + 4;
            }

            var3 = var10;
            if ((var8 & 8) != 0) {
               var3 = var10 + 4;
            }
         }

         var4 = var3;
         if ((var7 & 16) != 0) {
            ++var3;
            var10 = 0;

            while(true) {
               var4 = var3;
               if (var10 >= var2.iHitNum) {
                  break;
               }

               byte var15 = this.ChrGameData[var6].getData(3)[var3];
               ++var3;
               if ((var15 & 128) != 0) {
                  var3 += 8;
               } else {
                  var3 += 4;
               }

               ++var10;
            }
         }

         var3 = var4;
         if ((var7 & 64) != 0) {
            var3 = var4 + 2 + 4;
         }

         if ((var7 & 128) != 0) {
            var5 = (short)((this.ChrGameData[var6].getData(3)[var3 + 1] & 255) << 8 | this.ChrGameData[var6].getData(3)[var3] & 255);
            int var14 = var2.iRotate;
            short var9 = (short)((this.ChrGameData[var6].getData(3)[var3 + 3] & 255) << 8 | this.ChrGameData[var6].getData(3)[var3 + 2] & 255);
            short var16 = (short)((this.ChrGameData[var6].getData(3)[var3 + 5] & 255) << 8 | this.ChrGameData[var6].getData(3)[var3 + 4] & 255);
            int var13 = var2.iXZoom;
            short var12 = (short)((this.ChrGameData[var6].getData(3)[var3 + 7] & 255) << 8 | this.ChrGameData[var6].getData(3)[var3 + 6] & 255);
            var3 = var2.iYZoom;
            var2.zoomxBase = var2.iXZoom * 128;
            var2.zoomyBase = var2.iYZoom * 128;
            var2.iRotateAdd = (var5 - var14) / var2.time;
            var2.iXZoomAdd = (var16 * 128 - var13 * 128) / var2.time;
            var2.iYZoomAdd = (var12 * 128 - var3 * 128) / var2.time;
            var2.iAlphaAdd = (255 - (var9 & 255) - var2.iAlpha) / var2.time;
         } else {
            var10 = var2.iRotate;
            var3 = var2.iXZoom;
            var4 = var2.iYZoom;
            var2.zoomxBase = var2.iXZoom * 128;
            var2.zoomyBase = var2.iYZoom * 128;
            var2.iRotateAdd = (0 - var10) / var2.time;
            var2.iXZoomAdd = (12800 - var3 * 128) / var2.time;
            var2.iYZoomAdd = (12800 - var4 * 128) / var2.time;
            var2.iAlphaAdd = (255 - var2.iAlpha) / var2.time;
         }
      }

   }

   void _KillObj(GlobalWork var1, ObjReq var2) {
      if (var2 != null) {
         for(ObjReq var4 = this.pObjReqBuffer; var4 != null; var4 = var4.next) {
            if (var4 == var2) {
               if (var2.prev != null) {
                  var2.prev.next = var2.next;
               }

               if (var2.next != null) {
                  var2.next.prev = var2.prev;
               }

               if (this.pObjReqBuffer == var2) {
                  this.pObjReqBuffer = var2.next;
               }

               --this.iObjNum;
               break;
            }
         }

         for(int var3 = 0; var3 < 13; ++var3) {
            if (var2.lnk[var3] != null) {
               this._KillObj(var1, var2.lnk[var3]);
               var2.lnk[var3] = null;
            }
         }

         this.ObjStockNext.prev = var2;
         var2.next = this.ObjStockNext;
         var2.prev = null;
         this.ObjStockNext = var2;
      }

   }

   void _LinkAdd(GlobalWork var1, int var2, int var3, int var4) {
      ObjReq var6 = tcbNow.obj;
      if (var6.iLinkNum < 13) {
         int var5 = var6.iLinkNum;
         ObjReq[] var8 = var6.lnk;
         ObjReq var7 = this.GetNewObj(var1);
         var8[var5] = var7;
         if (var7 != null) {
            ++var6.iLinkNum;
            var6.lnk[var5].acttype = var6.acttype;
            var6.lnk[var5].prio = var6.prio;
            var6.lnk[var5].ano = var2;
            var6.lnk[var5].apt = 0;
            var6.lnk[var5].pat = 0;
            var6.lnk[var5].x = var3;
            var6.lnk[var5].y = var4;
            var6.lnk[var5].parent = var6;
            var6.lnk[var5].time = 0;
            if ((var6.acttype & 1044480) == 0) {
               short var9 = (short)((this.ChrGameData[var6.acttype].getData(3)[4 + 1] & 255) << 8 | this.ChrGameData[var6.acttype].getData(3)[4] & 255);
               var3 = 4 + 2;
               short var10 = (short)((this.ChrGameData[var6.acttype].getData(3)[var3 + 1] & 255) << 8 | this.ChrGameData[var6.acttype].getData(3)[var3] & 255);
               var9 = (short)((this.ChrGameData[var6.acttype].getData(3)[var6.lnk[var5].ano * 2 + var9 + 1] & 255) << 8 | this.ChrGameData[var6.acttype].getData(3)[var6.lnk[var5].ano * 2 + var9] & 255);
               if (var9 != -1) {
                  var2 = (var9 << 2) + var10;
                  byte var11 = this.ChrGameData[var6.acttype].getData(3)[var2];
                  ++var2;
                  var6.lnk[var5].mpt = this.ChrGameData[var6.acttype].getData(3)[var2];
                  ++var2;
                  if ((var11 & 4) != 0) {
                     var6.lnk[var5].iActPrio = this.ChrGameData[var6.acttype].getData(3)[var2];
                     ++var2;
                  } else {
                     var6.lnk[var5].iActPrio = 0;
                  }

                  var3 = var2;
                  if ((var11 & 2) != 0) {
                     var3 = var2 + this.ChrGameData[var6.acttype].getData(3)[var2] * 6 + 1;
                  }

                  var6.lnk[var5].apt = var3;
                  var6.lnk[var5].prio = var6.prio;
                  var7 = var6.lnk[var5];
                  var7.wObjFlag |= var6.wObjFlag;
                  var6.lnk[var5].wActFlag = 0;
                  this._ActReqMain(var1, var6.lnk[var5]);
               }
            }
         }
      }

   }

   void _SetAct(GlobalWork var1, int var2, int var3) {
      ObjReq var12 = tcbNow.obj;
      ObjReq var11 = var12;
      if (var12 == null) {
         var11 = this.GetNewObj(var1);
         if (var11 == null) {
            return;
         }

         tcbNow.obj = var11;
         objExec = tcbNow.obj;
      }

      if (var11.ano != var3 || var11.acttype != var2) {
         int var4;
         for(var4 = 0; var4 < 13; ++var4) {
            if (var11.lnk[var4] != null) {
               this._KillObj(var1, var11.lnk[var4]);
               var11.lnk[var4] = null;
            }
         }

         var11.iLinkNum = 0;
         var11.ano = var3;
         var11.acttype = var2;
         var11.apt = 0;
         var11.img = -1;
         var11.time = 0;
         var11.iTaskPrio = tcbNow.prio * 13 + 13 - 1;
         if ((1044480 & var2) == 0 && this.ChrGameData[var2].getData(3) != null) {
            short var8 = (short)((this.ChrGameData[var2].getData(3)[2 + 1] & 255) << 8 | this.ChrGameData[var2].getData(3)[2] & 255);
            var4 = 2 + 2;
            if (var3 < var8) {
               short var7 = (short)((this.ChrGameData[var2].getData(3)[var4 + 1] & 255) << 8 | this.ChrGameData[var2].getData(3)[var4] & 255);
               var4 += 2;
               short var9 = (short)((this.ChrGameData[var2].getData(3)[var4 + 1] & 255) << 8 | this.ChrGameData[var2].getData(3)[var4] & 255);
               short var14 = (short)((this.ChrGameData[var2].getData(3)[var3 * 2 + var7 + 1] & 255) << 8 | this.ChrGameData[var2].getData(3)[var3 * 2 + var7] & 255);
               if (var14 != -1) {
                  var3 = (var14 << 2) + var9;
                  var4 = this.ChrGameData[var2].getData(3)[var3] & 255;
                  ++var3;
                  var11.mpt = this.ChrGameData[var2].getData(3)[var3] & 255;
                  ++var3;
                  var11.pat = 0;
                  var11.wActFlag = 0;
                  var11.time = 0;
                  tcbNow.iHitCount = 0;
                  var11.wObjFlag &= -65;
                  if ((var4 & 4) != 0) {
                     var11.iActPrio = this.ChrGameData[var2].getData(3)[var3];
                     ++var3;
                  } else {
                     var11.iActPrio = 0;
                  }

                  int var5 = var3;
                  if ((var4 & 2) != 0) {
                     var11.iLinkNum = this.ChrGameData[var2].getData(3)[var3] & 255;
                     var4 = var3 + 1;

                     for(var3 = var11.iLinkNum - 1; var3 >= 0; --var3) {
                        ObjReq[] var13 = var11.lnk;
                        var12 = this.GetNewObj(var1);
                        var13[var3] = var12;
                        if (var12 == null) {
                           return;
                        }
                     }

                     byte var15 = 0;
                     var3 = var4;
                     var4 = var15;

                     while(true) {
                        var5 = var3;
                        if (var4 >= var11.iLinkNum) {
                           break;
                        }

                        short var16 = (short)((this.ChrGameData[var2].getData(3)[var3 + 1] & 255) << 8 | this.ChrGameData[var2].getData(3)[var3] & 255);
                        int var6 = var3 + 2;
                        var14 = (short)((this.ChrGameData[var2].getData(3)[var6 + 1] & 255) << 8 | this.ChrGameData[var2].getData(3)[var6] & 255);
                        var6 += 2;
                        var11.LinkData[var4] = (short)((this.ChrGameData[var2].getData(3)[var6 + 1] & 255) << 8 | this.ChrGameData[var2].getData(3)[var6] & 255);
                        var6 += 2;
                        if ((var11.LinkData[var4] & 4095) < var8) {
                           var11.lnk[var4].img = -1;
                           var11.lnk[var4].ano = var11.LinkData[var4] & 4095;
                           var11.lnk[var4].acttype = var2;
                           var11.lnk[var4].apt = 0;
                           var11.lnk[var4].bx = var16;
                           var11.lnk[var4].by = var14;
                           var11.lnk[var4].parent = var11;
                           var11.lnk[var4].iTaskPrio = tcbNow.prio * 13 + 13 - 2 - var4;
                           var14 = (short)((this.ChrGameData[var2].getData(3)[var11.lnk[var4].ano * 2 + var7 + 1] & 255) << 8 | this.ChrGameData[var2].getData(3)[var11.lnk[var4].ano * 2 + var7] & 255);
                           if (var14 != -1) {
                              var3 = (var14 << 2) + var9;
                              int var10 = this.ChrGameData[var2].getData(3)[var3] & 255;
                              ++var3;
                              var11.lnk[var4].mpt = this.ChrGameData[var2].getData(3)[var3] & 255;
                              ++var3;
                              if ((var10 & 4) != 0) {
                                 var11.lnk[var4].iActPrio = this.ChrGameData[var2].getData(3)[var3];
                                 ++var3;
                              } else {
                                 var11.lnk[var4].iActPrio = 0;
                              }

                              var5 = var3;
                              if ((var10 & 2) != 0) {
                                 var5 = var3 + (this.ChrGameData[var2].getData(3)[var3] & 255) * 6 + 1;
                              }

                              var11.lnk[var4].apt = var5;
                              var11.lnk[var4].prio = var11.prio;
                              var12 = var11.lnk[var4];
                              var12.wObjFlag |= var11.wObjFlag;
                              var11.lnk[var4].wActFlag = 0;
                              if ((var11.LinkData[var4] & '耀') != 0) {
                                 var12 = var11.lnk[var4];
                                 var12.wActFlag |= 32768;
                                 var11.lnk[var4].pat = -1;
                              } else {
                                 var11.lnk[var4].pat = 0;
                                 var11.lnk[var4].time = 0;
                                 if ((var11.LinkData[var4] & 4096) == 0) {
                                    var11.lnk[var4].x = var11.x;
                                    var11.lnk[var4].y = var11.y;
                                 }
                              }

                              if ((var11.LinkData[var4] & 16384) != 0) {
                                 var12 = var11.lnk[var4];
                                 var12.wActFlag |= 8192;
                              }

                              var12 = var11.lnk[var4];
                              var12.x += (int)(this.genrand_int32(var1) % 20L) << 16;
                           }
                        }

                        ++var4;
                        var3 = var6;
                     }
                  }

                  var11.apt = var5;
               }
            }
         }
      }

   }

   void _SetObj(GlobalWork var1, int var2) {
      this.SetObj(var1, var2, tcbNow.obj);
   }

   void _SetObjFlag(GlobalWork var1, ObjReq var2, int var3, boolean var4) {
      int var5;
      ObjReq var6;
      if (var4) {
         var2.wObjFlag |= var3;

         for(var5 = 0; var5 < var2.iLinkNum; ++var5) {
            if (var2.lnk[var5] != null) {
               var6 = var2.lnk[var5];
               var6.wObjFlag |= var3;
            }
         }
      } else {
         var2.wObjFlag &= ~var3;

         for(var5 = 0; var5 < var2.iLinkNum; ++var5) {
            if (var2.lnk[var5] != null) {
               var6 = var2.lnk[var5];
               var6.wObjFlag &= ~var3;
            }
         }
      }

   }

   void _SetSize(GlobalWork var1, int var2, int var3, int var4, int var5) {
      ObjReq var6 = tcbNow.obj;
      var6.x = var2;
      var6.y = var3;
      var6.ox = var4;
      var6.oy = var5;
   }

   void _SetXY(GlobalWork var1, int var2, int var3) {
      ObjReq var5 = tcbNow.obj;
      var5.x = var2;
      var5.y = var3;

      for(int var4 = 0; var4 < var5.iLinkNum; ++var4) {
         if (var5.lnk[var4] != null) {
            var5.lnk[var4].x = var2;
            var5.lnk[var4].y = var3;
         }
      }

   }

   void _SetXYObj(GlobalWork var1, ObjReq var2, int var3, int var4) {
      var2.x = var3;
      var2.y = var4;
   }

   void _TFlag(GlobalWork var1, int var2, int var3, int var4) {
      TCB var5 = tcbHead;

      while(var5.next != null) {
         var5 = var5.next;
         if (var5.prio >= var2 && var5.prio <= var3) {
            var5.wFlag = var4;
         }
      }

   }

   void _TKill(GlobalWork var1) {
      tcbNow.act = false;
      if (tcbNow.obj != null) {
         this._KillObj(var1, tcbNow.obj);
         tcbNow.obj = null;
      }

   }

   void _TKilx(GlobalWork var1, int var2, int var3) {
      TCB var4 = tcbHead;

      while(var4.next != null) {
         var4 = var4.next;
         if (var4.prio >= var2 && var4.prio <= var3) {
            var4.act = false;
            if (var4.obj != null) {
               this._KillObj(var1, var4.obj);
               var4.obj = null;
            }
         }
      }

   }

   void _TLoop(GlobalWork var1, int var2, int var3) {
      if (tcbNow.lp == 0) {
         tcbNow.lp = var2;
      } else {
         TCB var4 = tcbNow;
         --var4.lp;
         if (tcbNow.lp == 0) {
            tcbNow.md = var3;
         }
      }

   }

   TCB _TaskMake(GlobalWork var1, int var2, int var3) {
      TCB var4 = tcbStock;
      if (var4 == null) {
         var4.prio = 0;
      }

      tcbStock = tcbStock.next;
      var4.prio = var3;
      var4.act = true;
      var4.md = var2;
      var4.next = null;
      var4.lp = 0;
      var4.obj = null;
      var4.iHitStop = 0;
      var4.wFlag = 0;

      TCB var5;
      for(var5 = tcbHead; var5.next != null && var5.next.prio <= var3; var5 = var5.next) {
      }

      var4.next = var5.next;
      var5.next = var4;
      return var4;
   }

   boolean cardlistData(GlobalWork var1, String var2) {
      iCardCountSv = 0;

      boolean var6;
      label40: {
         label35: {
            boolean var10001;
            String[] var10;
            try {
               var10 = var2.split("\r\n");
            } catch (Exception var8) {
               var10001 = false;
               break label35;
            }

            int var3 = 1;

            while(true) {
               try {
                  if (var3 >= var10.length) {
                     break label40;
                  }

                  String[] var9 = var10[var3].split(",");
                  int var5 = Integer.parseInt(var9[0]);
                  int var4 = Integer.parseInt(var9[1]);
                  bCardVersionSv[iCardCountSv] = (byte)var5;
                  bCardNoSv[iCardCountSv] = (byte)var4;
                  ++iCardCountSv;
               } catch (Exception var7) {
                  var10001 = false;
                  break;
               }

               ++var3;
            }
         }

         var6 = false;
         return var6;
      }

      var6 = true;
      return var6;
   }

   boolean charlistData(GlobalWork var1, String var2) {
      iCharCountSv = 0;

      boolean var6;
      label40: {
         label35: {
            boolean var10001;
            String[] var9;
            try {
               var9 = var2.split("\r\n");
            } catch (Exception var8) {
               var10001 = false;
               break label35;
            }

            int var3 = 1;

            while(true) {
               try {
                  if (var3 >= var9.length) {
                     break label40;
                  }

                  String[] var10 = var9[var3].split(",");
                  int var4 = Integer.parseInt(var10[0]);
                  int var5 = Integer.parseInt(var10[1]);
                  bCharVersionSv[iCharCountSv] = (byte)var4;
                  bCharNoSv[iCharCountSv] = (byte)var5;
                  ++iCharCountSv;
               } catch (Exception var7) {
                  var10001 = false;
                  break;
               }

               ++var3;
            }
         }

         var6 = false;
         return var6;
      }

      var6 = true;
      return var6;
   }

   boolean checkNewsDate(GlobalWork var1, int var2, int var3) {
      boolean var4 = this.newsdata[var2].checkDate(var3);
      if (var4) {
         this.DL_SetURL(var1, this.newsdata[var2].getDataURL());
      }

      return var4;
   }

   public long genrand_int32(GlobalWork var1) {
      long[] var6 = new long[]{0L, 2567483615L};
      int var2;
      long var4;
      if (mti >= 624) {
         if (mti == 625) {
            this.init_genrand(var1, 5489L);
         }

         var2 = 0;

         while(true) {
            int var3 = var2;
            if (var2 >= 227) {
               while(var3 < 623) {
                  var4 = mt[var3] & 2147483648L | mt[var3 + 1] & 2147483647L;
                  mt[var3] = mt[var3 - 227] ^ var4 >> 1 ^ var6[(int)var4 & 1];
                  ++var3;
               }

               var4 = mt[623] & 2147483648L | mt[0] & 2147483647L;
               mt[623] = mt[396] ^ var4 >> 1 ^ var6[(int)var4 & 1];
               mti = 0;
               break;
            }

            var4 = mt[var2] & 2147483648L | mt[var2 + 1] & 2147483647L;
            mt[var2] = mt[var2 + 397] ^ var4 >> 1 ^ var6[(int)var4 & 1];
            ++var2;
         }
      }

      long[] var7 = mt;
      var2 = mti++;
      var4 = var7[var2];
      var4 ^= var4 >> 11;
      var4 ^= var4 << 7 & 2636928640L;
      var4 ^= var4 << 15 & 4022730752L;
      return var4 ^ var4 >> 18;
   }

   int getAngleKey(GlobalWork var1, int var2, int var3, int var4, int var5) {
      byte var8 = 0;
      double var6 = (double)(var2 - var4);
      var2 = (int)(Math.atan2((double)(var3 - var5), var6) * 180.0D / 3.141592653589793D) + 90;
      var4 = var2;
      if (var2 < 0) {
         var4 = var2 + 360;
      }

      var2 = var8;
      if (var4 > 22) {
         var2 = var8;
         if (var4 < 157) {
            var2 = 0 | 8;
         }
      }

      var3 = var2;
      if (var4 > 112) {
         var3 = var2;
         if (var4 < 247) {
            var3 = var2 | 2;
         }
      }

      var2 = var3;
      if (var4 > 202) {
         var2 = var3;
         if (var4 < 337) {
            var2 = var3 | 4;
         }
      }

      if (var4 <= 292) {
         var3 = var2;
         if (var4 >= 67) {
            return var3;
         }
      }

      var3 = var2 | 1;
      return var3;
   }

   int getNewsCount(GlobalWork var1) {
      int var2;
      if (this.newsdata == null) {
         var2 = 0;
      } else {
         var2 = this.newsDataCount;
      }

      return var2;
   }

   public void init_by_array(GlobalWork var1, int var2) {
      this.init_genrand(var1, 19650218L);
      int var4 = 1;
      int var5 = 0;
      int var3;
      if (624 > var2) {
         var3 = 624;
      } else {
         var3 = var2;
      }

      long[] var8;
      for(; var3 != 0; --var3) {
         mt[var4] = (mt[var4] ^ (mt[var4 - 1] ^ mt[var4 - 1] >> 30) * 1664525L) + InitMtiKey[var5] + (long)var5;
         var8 = mt;
         var8[var4] &= 4294967295L;
         int var7 = var4 + 1;
         int var6 = var5 + 1;
         var4 = var7;
         if (var7 >= 624) {
            mt[0] = mt[623];
            var4 = 1;
         }

         var5 = var6;
         if (var6 >= var2) {
            var5 = 0;
         }
      }

      var3 = 623;

      for(var2 = var4; var3 != 0; --var3) {
         mt[var2] = (mt[var2] ^ (mt[var2 - 1] ^ mt[var2 - 1] >> 30) * 1566083941L) - (long)var2;
         var8 = mt;
         var8[var2] &= 4294967295L;
         var4 = var2 + 1;
         var2 = var4;
         if (var4 >= 624) {
            mt[0] = mt[623];
            var2 = 1;
         }
      }

      mt[0] = 2147483648L;
   }

   public void init_genrand(GlobalWork var1, long var2) {
      mt[0] = -1L & var2;

      for(mti = 1; mti < 624; ++mti) {
         mt[mti] = 1812433253L * (mt[mti - 1] ^ mt[mti - 1] >> 30) + (long)mti;
         long[] var5 = mt;
         int var4 = mti;
         var5[var4] &= 4294967295L;
      }

   }

   int isMission(GlobalWork var1) {
      return iMissionClear;
   }

   boolean newsData(GlobalWork var1, byte[] var2, int var3) {
      iCharCountSv = 0;
      this.newsdata = null;

      boolean var4;
      label53: {
         label46: {
            boolean var10001;
            String[] var5;
            try {
               String var9 = new String(var2, "Shift_JIS");
               var5 = var9.split("\r\n");
               this.newsdata = new NewsData[var5.length];
            } catch (Exception var8) {
               var10001 = false;
               break label46;
            }

            var3 = 0;

            while(true) {
               label47: {
                  NewsData var10;
                  NewsData[] var11;
                  try {
                     if (var3 >= var5.length) {
                        break label53;
                     }

                     if (!var5[var3].startsWith("http")) {
                        break label47;
                     }

                     var11 = this.newsdata;
                     var10 = new NewsData(var5[var3]);
                  } catch (Exception var7) {
                     var10001 = false;
                     break;
                  }

                  var11[var3] = var10;

                  try {
                     ++this.newsDataCount;
                  } catch (Exception var6) {
                     var10001 = false;
                     break;
                  }
               }

               ++var3;
            }
         }

         var4 = false;
         return var4;
      }

      var4 = true;
      return var4;
   }

   boolean pack_unpack(GlobalWork var1, byte[] var2, int var3, int var4, int var5) {
      boolean var12;
      if (var2 == null) {
         var12 = false;
      } else {
         int var6 = (var2[0] & 255) + ((var2[1] & 255) << 8);
         var3 = 0;

         while(true) {
            if (var3 >= var6) {
               var12 = true;
               break;
            }

            int var7 = (var3 << 4) + 2;
            byte var10 = var2[var7];
            byte var11 = var2[var7 + 1];
            byte var9 = var2[var7 + 2];
            byte var8 = var2[var7 + 3];
            var7 = (var2[var7 + 4] & 255) + ((var2[var7 + 5] & 255) << 8) + ((var2[var7 + 6] & 255) << 16) + ((var2[var7 + 7] & 255) << 24);
            int var14 = (var6 << 4) + 2 + (var10 & 255) + ((var11 & 255) << 8) + ((var9 & 255) << 16) + ((var8 & 255) << 24);
            label33:
            switch(var4) {
            case 0:
               switch(var3) {
               case 0:
                  Utility.deleteFile(var1.context, "char" + Utility.InttoString(2, var5) + ".pac");
                  if (!Utility.writeDataFile("char" + Utility.InttoString(2, var5) + ".pac", var2, var14, var7, 0, false)) {
                     var12 = false;
                     return var12;
                  }
                  break label33;
               case 1:
                  Utility.deleteFile(var1.context, "chardemo" + Utility.InttoString(2, var5) + ".pac");
                  if (!Utility.writeDataFile("chardemo" + Utility.InttoString(2, var5) + ".pac", var2, var14, var7, 0, false)) {
                     var12 = false;
                     return var12;
                  }
                  break label33;
               case 2:
                  Utility.deleteFile(var1.context, "charf00" + Utility.InttoString(2, var5) + ".pac");
                  if (!Utility.writeDataFile("charf00" + Utility.InttoString(2, var5) + ".pac", var2, var14, var7, 0, false)) {
                     var12 = false;
                     return var12;
                  }
               default:
                  break label33;
               }
            case 1:
               int var13 = var5 * var6 + 1 + var3;
               Utility.deleteFile(var1.context, "card" + Utility.InttoString(3, var13) + ".pac");
               if (!Utility.writeDataFile("card" + Utility.InttoString(3, var13) + ".pac", var2, var14, var7, 0, false)) {
                  var12 = false;
                  return var12;
               }

               this.SetCardVersion(var1, var13, bCardVersionSv[0]);
            }

            ++var3;
         }
      }

      return var12;
   }

   public void resumeBGM(GlobalWork var1) {
      this.PlayBGM(var1, iPlayBGMNo, bBGMPlayLoop);
   }

   long sqrt2(long var1) {
      long var3 = var1;
      long var5;
      long var7;
      if (var1 == 0L) {
         var5 = 0L;
      } else {
         do {
            var5 = var3;
            if (var3 == 0L) {
               break;
            }

            var7 = var1 / var3 + var3 >> 1;
            var3 = var7;
         } while(var7 < var5);
      }

      return var5;
   }

   public void suspendBGM() {
      SoundEffect.getInstance().stopBgm();
   }

   private static long[] $d2j$hex$83b9c161$decode_J(String src) {
      byte[] d = $d2j$hex$83b9c161$decode_B(src);
      ByteBuffer b = ByteBuffer.wrap(d);
      b.order(ByteOrder.LITTLE_ENDIAN);
      LongBuffer s = b.asLongBuffer();
      long[] data = new long[d.length / 8];
      s.get(data);
      return data;
   }

   private static int[] $d2j$hex$83b9c161$decode_I(String src) {
      byte[] d = $d2j$hex$83b9c161$decode_B(src);
      ByteBuffer b = ByteBuffer.wrap(d);
      b.order(ByteOrder.LITTLE_ENDIAN);
      IntBuffer s = b.asIntBuffer();
      int[] data = new int[d.length / 4];
      s.get(data);
      return data;
   }

   private static short[] $d2j$hex$83b9c161$decode_S(String src) {
      byte[] d = $d2j$hex$83b9c161$decode_B(src);
      ByteBuffer b = ByteBuffer.wrap(d);
      b.order(ByteOrder.LITTLE_ENDIAN);
      ShortBuffer s = b.asShortBuffer();
      short[] data = new short[d.length / 2];
      s.get(data);
      return data;
   }

   private static byte[] $d2j$hex$83b9c161$decode_B(String src) {
      char[] d = src.toCharArray();
      byte[] ret = new byte[src.length() / 2];

      for(int i = 0; i < ret.length; ++i) {
         char h = d[2 * i];
         char l = d[2 * i + 1];
         int hh;
         if (h >= '0' && h <= '9') {
            hh = h - 48;
         } else if (h >= 'a' && h <= 'f') {
            hh = h - 97 + 10;
         } else {
            if (h < 'A' || h > 'F') {
               throw new RuntimeException();
            }

            hh = h - 65 + 10;
         }

         int ll;
         if (l >= '0' && l <= '9') {
            ll = l - 48;
         } else if (l >= 'a' && l <= 'f') {
            ll = l - 97 + 10;
         } else {
            if (l < 'A' || l > 'F') {
               throw new RuntimeException();
            }

            ll = l - 65 + 10;
         }

         ret[i] = (byte)(hh << 4 | ll);
      }

      return ret;
   }
   class AutoCardTask implements Runnable {
    private byte[] _bCardLevelBuf;
    private int _charNo;
    private int _cost_max;
    private int[] _iCardBuf;
    private int _iCardBufCount;
    private int _iCardBufVal;
    private int[] _iCardCost;
    private int[] _iCardVal;
    private int[][] _iCardWork;
    private int _type;
    private boolean bCancel;
    private boolean bEnd;
    private int iError;
    final TCBManajer this$0;

    AutoCardTask(TCBManajer var1) {
        this.this$0 = var1;
        this.bEnd = false;
        this.bCancel = false;
        this.iError = 0;
        this._charNo = 0;
        this._cost_max = 0;
        this._type = 0;
        this._iCardBufVal = 0;
        this._iCardWork = new int[2][8];
        this._iCardBufCount = 0;
        this._iCardBuf = null;
        this._bCardLevelBuf = null;
        this._iCardVal = null;
        this._iCardCost = null;
    }

    private void CardFlash(int var1) {
        if (this._iCardBufVal < var1) {
            this._iCardBufVal = var1;

            for(var1 = 0; var1 < 8; ++var1) {
                this._iCardWork[0][var1] = this._iCardWork[1][var1];
            }
        }

    }

    private void atCardBuf(int var1, int var2) {
        this._iCardBufCount = 0;

        for(int var3 = 1; var3 < 90; ++var3) {
            int var4 = this.this$0.GetCardLevel(TCBManajer.access$000(this.this$0), var3);
            if (var4 >= 0 && (short)((this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 48 + var4 * 2 + 1] & 255) << 8 | this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 48 + var4 * 2] & 255) <= var1) {
                this._iCardBuf[this._iCardBufCount] = var3;
                this._bCardLevelBuf[this._iCardBufCount] = (byte)var4;
                this._iCardCost[this._iCardBufCount] = (short)((this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 48 + var4 * 2 + 1] & 255) << 8 | this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 48 + var4 * 2] & 255);
                int var5;
                int[] var6;
                switch (var2) {
                    case 0:
                        this._iCardVal[this._iCardBufCount] = (short)((this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 50 + var4 * 2 + 1] & 255) << 8 | this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 50 + var4 * 2] & 255);
                        var6 = this._iCardVal;
                        var5 = this._iCardBufCount;
                        var6[var5] += (short)((this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 52 + var4 * 2 + 1] & 255) << 8 | this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 52 + var4 * 2] & 255);
                        var6 = this._iCardVal;
                        var5 = this._iCardBufCount;
                        var6[var5] += (short)((this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 6 + var4 * 2 + 1] & 255) << 8 | this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 6 + var4 * 2] & 255) * 1000;
                        var6 = this._iCardVal;
                        var5 = this._iCardBufCount;
                        var6[var5] += (short)((this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 12 + var4 * 2 + 1] & 255) << 8 | this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 12 + var4 * 2] & 255) * 1000;
                        break;
                    case 1:
                        this._iCardVal[this._iCardBufCount] = (short)((this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 50 + var4 * 2 + 1] & 255) << 8 | this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 50 + var4 * 2] & 255);
                        var6 = this._iCardVal;
                        var5 = this._iCardBufCount;
                        var6[var5] += (short)((this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 6 + var4 * 2 + 1] & 255) << 8 | this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 6 + var4 * 2] & 255) * 1000;
                        break;
                    default:
                        this._iCardVal[this._iCardBufCount] = (short)((this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 52 + var4 * 2 + 1] & 255) << 8 | this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 52 + var4 * 2] & 255);
                        var6 = this._iCardVal;
                        var5 = this._iCardBufCount;
                        var6[var5] += (short)((this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 12 + var4 * 2 + 1] & 255) << 8 | this.this$0.pGameData.piGameData[this.this$0.pGameData.piGameDataPos[var3 + 170] + this.this$0.pGameData.piGameDataXSize[var3 + 170] * 12 + var4 * 2] & 255) * 1000;
                }

                ++this._iCardBufCount;
            }
        }

    }

    private void atCardSet(int var1, int var2, int var3, int var4, int var5, int var6) {
        if (!this.bCancel) {
            if (var1 >= 8) {
                this.CardFlash(var5);
            } else {
                int var8 = var2;

                for(int var7 = var2; var7 < this._iCardBufCount; var8 = var2) {
                    this._iCardWork[1][var1] = this._iCardBuf[var7];
                    int var9 = this._iCardCost[var7];
                    int var10 = this._iCardVal[var7];
                    if (var4 + var9 <= var3) {
                        var2 = var8 + 1;
                        this.atCardSet(var1 + 1, var2, var3, var4 + var9, var5 + var10, var6);
                    } else {
                        var2 = var8;
                        if (var4 + var9 > var3) {
                            this._iCardWork[1][var1] = 0;
                            this.CardFlash(var5);
                            var2 = var8 + 1;
                        }
                    }

                    ++var7;
                }

                this._iCardWork[1][var1] = 0;
                this.CardFlash(var5);
            }
        }

    }

    public void cancel() {
        this.bCancel = true;
    }

    public int get(int var1) {
        return this._iCardWork[0][var1];
    }

    public int getError() {
        return this.iError;
    }

    public boolean isEnd() {
        return this.bEnd;
    }

    public void run() {
        label48: {
            label50: {
                boolean var10001;
                try {
                    this._iCardBuf = new int[90];
                    this._bCardLevelBuf = new byte[90];
                    this._iCardVal = new int[90];
                    this._iCardCost = new int[90];
                    this.atCardBuf(this._cost_max, this._type);
                } catch (Exception var6) {
                    var10001 = false;
                    break label50;
                }

                int var1 = 0;

                while(true) {
                    try {
                        if (var1 >= this._iCardBufCount) {
                            break label48;
                        }

                        if (this.bCancel) {
                            break;
                        }
                    } catch (Exception var5) {
                        var10001 = false;
                        break label50;
                    }

                    try {
                        this.atCardSet(0, var1, this._cost_max, 0, 0, this._type);
                    } catch (Exception var4) {
                        var10001 = false;
                        break label50;
                    }

                    ++var1;
                }

                var1 = 0;

                while(true) {
                    if (var1 >= 8) {
                        break label48;
                    }

                    try {
                        this._iCardWork[0][var1] = 0;
                        this._iCardWork[1][var1] = 0;
                    } catch (Exception var3) {
                        var10001 = false;
                        break;
                    }

                    ++var1;
                }
            }

            this.iError = 1;
        }

        this._iCardBuf = null;
        this._bCardLevelBuf = null;
        this._iCardVal = null;
        this._iCardCost = null;
        this.bEnd = true;
    }

    public void start(int var1, int var2, int var3) {
        this._iCardBufVal = 0;
        this.iError = 0;

        for(int var4 = 0; var4 < 8; ++var4) {
            this._iCardWork[0][var4] = 0;
            this._iCardWork[1][var4] = 0;
        }

        this._charNo = var1;
        this._cost_max = var2;
        this._type = var3;
        this.bEnd = false;
        this.bCancel = false;
        (new Thread(this)).start();
    }
}
}
